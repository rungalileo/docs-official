{
    "openapi": "3.1.0",
    "info": {
      "title": "Galileo API Server",
      "version": "1.435.0"
    },
    "servers": [
      {
        "url": "https://api.dev.rungalileo.io",
        "description": "Galileo API Server - dev"
      }
    ],
    "paths": {
      "/login": {
        "post": {
          "tags": [
            "auth"
          ],
          "summary": "Login Email",
          "operationId": "login_email_login_post",
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Body_login_email_login_post"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Token"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/login/api_key": {
        "post": {
          "tags": [
            "auth"
          ],
          "summary": "Login Api Key",
          "operationId": "login_api_key_login_api_key_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyLoginRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Token"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/login/social": {
        "post": {
          "tags": [
            "auth"
          ],
          "summary": "Login Social",
          "operationId": "login_social_login_social_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialLoginRequest",
                  "examples": [
                    {
                      "id_token": "token1234",
                      "provider": "google"
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Token"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/logout": {
        "post": {
          "tags": [
            "auth"
          ],
          "summary": "Logout",
          "operationId": "logout_logout_post",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Token"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/current_user": {
        "get": {
          "tags": [
            "auth"
          ],
          "summary": "Current User",
          "operationId": "current_user_current_user_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CurrentUserDB"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/presigned_url": {
        "get": {
          "tags": [
            "auth"
          ],
          "summary": "Get Presigned Url",
          "operationId": "get_presigned_url_presigned_url_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "api_url",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Api Url"
              }
            },
            {
              "name": "method",
              "in": "query",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Method"
              }
            },
            {
              "name": "bucket_name",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Bucket Name"
              }
            },
            {
              "name": "object_name",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Object Name"
              }
            },
            {
              "name": "project_id",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetPresignedUrlResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/verify_email": {
        "post": {
          "tags": [
            "auth"
          ],
          "summary": "Verify Email",
          "operationId": "verify_email_verify_email_post",
          "parameters": [
            {
              "name": "verification_token",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Verification Token"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailVerificationRequest",
                  "examples": [
                    {
                      "email": "user@example.com"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Token"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/token": {
        "get": {
          "tags": [
            "auth"
          ],
          "summary": "Get Token",
          "operationId": "get_token_token_get",
          "deprecated": true,
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "organization_id",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "uuid4"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Organization Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetTokenResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/changelog": {
        "get": {
          "tags": [
            "changelog"
          ],
          "summary": "Get Current Changelog",
          "operationId": "get_current_changelog_changelog_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RootModel_Sequence_WeeklyChangelog__"
                  }
                }
              }
            }
          }
        }
      },
      "/healthcheck": {
        "get": {
          "tags": [
            "health"
          ],
          "summary": "Healthcheck",
          "operationId": "healthcheck_healthcheck_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HealthcheckResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/{training_or_inference}/validate_dataset": {
        "post": {
          "tags": [
            "projects"
          ],
          "summary": "Validate Dataset",
          "description": "Validate a dataset for training.",
          "operationId": "validate_dataset_projects__project_id___training_or_inference__validate_dataset_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "training_or_inference",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/DatasetType"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ValidationResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/{training_mode}/start": {
        "post": {
          "tags": [
            "projects"
          ],
          "summary": "Start Training Job",
          "description": "Start training.",
          "operationId": "start_training_job_projects__project_id___training_mode__start_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "training_mode",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Training Mode"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Request Body"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TrainResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/training/{training_job_id}/status/": {
        "get": {
          "tags": [
            "projects"
          ],
          "summary": "Training Status",
          "description": "Get the status for a training job.",
          "operationId": "training_status_projects__project_id__training__training_job_id__status__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "training_job_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Training Job Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TrainJobStatusResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/training/{training_job_id}/token": {
        "post": {
          "tags": [
            "projects"
          ],
          "summary": "Get Token For Training Job",
          "description": "Get the status for a training job.",
          "operationId": "get_token_for_training_job_training__training_job_id__token_post",
          "parameters": [
            {
              "name": "training_job_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Training Job Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Request Body"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TrainJobAuthTokenResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/user_roles": {
        "get": {
          "tags": [
            "users"
          ],
          "summary": "Get User Roles",
          "description": "Get all user roles.",
          "operationId": "get_user_roles_user_roles_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/UserRoleInfo"
                    },
                    "type": "array",
                    "title": "Response Get User Roles User Roles Get"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/request_access": {
        "post": {
          "tags": [
            "users"
          ],
          "summary": "Request Access",
          "description": "Endpoint for a user to request access to the console.\n\nThis is often the first step for a user to sign up for the console. The user record is created with\n`email_is_verified=None`, which signifies that the user has requested access but hasn't been invited yet.",
          "operationId": "request_access_request_access_post",
          "parameters": [
            {
              "name": "user_email",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "format": "email",
                "title": "User Email"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/signup_link": {
        "post": {
          "tags": [
            "users"
          ],
          "summary": "Generate Signup Link",
          "description": "Generate a signup link for a new user.\n\nThis endpoint is used by admins in the console Command Center.\nWe create an unverified user entry and send a signup email to the new user.\n\nThe user is then verified via one of the following endpoints:\n- POST /users\n- POST /users/social",
          "operationId": "generate_signup_link_signup_link_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "user_email",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "format": "email",
                "title": "User Email"
              }
            },
            {
              "name": "send_email",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Send Email"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateSignupLinkResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/invite_users": {
        "post": {
          "tags": [
            "users"
          ],
          "summary": "Invite Users",
          "operationId": "invite_users_invite_users_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteUsersRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/users": {
        "post": {
          "tags": [
            "users"
          ],
          "summary": "Create Or Verify User",
          "description": "Create a new system user with an email and password.\n\nIf no admin exists (first user), the user will be created as an admin.\n\nOtherwise:\n- User record was already created when the admin invited the user\n- We should verify the user's email",
          "operationId": "create_or_verify_user_users_post",
          "deprecated": true,
          "parameters": [
            {
              "name": "signup_token",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Signup Token"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreate",
                  "examples": [
                    {
                      "email": "user@example.com",
                      "first_name": "Alice",
                      "last_name": "Appleseed",
                      "auth_method": "email",
                      "password": "Th3secret_"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SystemUserDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "users"
          ],
          "summary": "List Users",
          "operationId": "list_users_users_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetUsersResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "users"
          ],
          "summary": "Delete User Self",
          "operationId": "delete_user_self_users_delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeleteUserResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/system_users": {
        "post": {
          "tags": [
            "users"
          ],
          "summary": "Create Or Verify User",
          "description": "Create a new system user with an email and password.\n\nIf no admin exists (first user), the user will be created as an admin.\n\nOtherwise:\n- User record was already created when the admin invited the user\n- We should verify the user's email",
          "operationId": "create_or_verify_user_system_users_post",
          "parameters": [
            {
              "name": "signup_token",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Signup Token"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreate",
                  "examples": [
                    {
                      "email": "user@example.com",
                      "first_name": "Alice",
                      "last_name": "Appleseed",
                      "auth_method": "email",
                      "password": "Th3secret_"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SystemUserDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/users/social": {
        "post": {
          "tags": [
            "users"
          ],
          "summary": "Create Or Verify User Social",
          "description": "! This method is completely deprecated and we're removing it in the near future.\n\nCreate a user using a social login provider.\n\nAll social users are created with `email_is_verified=True`, don't need to be invited and are by default read-only\n(unless they are the first user, in which case they are set to admin).",
          "operationId": "create_or_verify_user_social_users_social_post",
          "deprecated": true,
          "parameters": [
            {
              "name": "signup_token",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Signup Token"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialLoginRequest",
                  "examples": [
                    {
                      "id_token": "token1234",
                      "provider": "google"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SystemUserDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/system_users/social": {
        "post": {
          "tags": [
            "users"
          ],
          "summary": "Create Or Verify User Social",
          "description": "! This method is completely deprecated and we're removing it in the near future.\n\nCreate a user using a social login provider.\n\nAll social users are created with `email_is_verified=True`, don't need to be invited and are by default read-only\n(unless they are the first user, in which case they are set to admin).",
          "operationId": "create_or_verify_user_social_system_users_social_post",
          "deprecated": true,
          "parameters": [
            {
              "name": "signup_token",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Signup Token"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialLoginRequest",
                  "examples": [
                    {
                      "id_token": "token1234",
                      "provider": "google"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SystemUserDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/users/all": {
        "get": {
          "tags": [
            "users"
          ],
          "summary": "List All Users",
          "description": "List all users in the system.\n\nThis endpoint is optimized to count project and runs for each user. This endpoint must be placed before\n`/users/{user_id}` so that \"all\" is not interpreted as a UUID4.",
          "operationId": "list_all_users_users_all_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/GetUserResponse"
                    },
                    "type": "array",
                    "title": "Response List All Users Users All Get"
                  }
                }
              }
            }
          },
          "deprecated": true,
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/users/{user_id}": {
        "get": {
          "tags": [
            "users"
          ],
          "summary": "Get User",
          "operationId": "get_user_users__user_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "user_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "User Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetUserResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "users"
          ],
          "summary": "Update User",
          "operationId": "update_user_users__user_id__put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "user_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "User Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdate",
                  "examples": [
                    {
                      "first_name": "Tony",
                      "last_name": "Newname",
                      "email": "bigtony@rungalileo.io"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateUserResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "users"
          ],
          "summary": "Delete User",
          "operationId": "delete_user_users__user_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "user_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "User Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeleteUserResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/users/{user_id}/runs/latest": {
        "get": {
          "tags": [
            "users"
          ],
          "summary": "Get Latest User Run",
          "description": "Gets the most recent run for a User, ordered by last updated.",
          "operationId": "get_latest_user_run_users__user_id__runs_latest_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "user_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "User Id"
              }
            },
            {
              "name": "project_type",
              "in": "query",
              "required": false,
              "schema": {
                "$ref": "#/components/schemas/ProjectType",
                "default": "training_inference"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetUserLatestRunsDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/users/{user_id}/runs": {
        "get": {
          "tags": [
            "users"
          ],
          "summary": "Get Project Runs For User",
          "description": "Get all user created runs across all projects they can access.\n\nThis returns a filtered list of projects with only runs created by this user.",
          "operationId": "get_project_runs_for_user_users__user_id__runs_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "user_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "User Id"
              }
            },
            {
              "name": "project_type",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ProjectType"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Project Type"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ProjectDB"
                    },
                    "title": "Response Get Project Runs For User Users  User Id  Runs Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/generate_password_reset": {
        "get": {
          "tags": [
            "users"
          ],
          "summary": "Generate Password Reset Link",
          "operationId": "generate_password_reset_link_generate_password_reset_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "user_email",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "title": "User Email"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PasswordResetResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/generate_password_reset_email": {
        "get": {
          "tags": [
            "users"
          ],
          "summary": "Generate Password Reset Email",
          "operationId": "generate_password_reset_email_generate_password_reset_email_get",
          "parameters": [
            {
              "name": "user_email",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "title": "User Email"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PasswordResetEmailResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/password_reset": {
        "post": {
          "tags": [
            "users"
          ],
          "summary": "Password Reset",
          "description": "Reset a user's password.\n\nA password reset with a valid token should always verify the user. (See default of\nUserPasswordResetRequest.email_is_verified is True)",
          "operationId": "password_reset_password_reset_post",
          "parameters": [
            {
              "name": "reset_token",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Reset Token"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPasswordResetRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserPasswordResetResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/users/{user_id}/transfer": {
        "post": {
          "tags": [
            "users"
          ],
          "summary": "Transfer User Data",
          "description": "Transfers all projects, runs, and edits created by a user to another user.",
          "operationId": "transfer_user_data_users__user_id__transfer_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "user_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "User Id"
              }
            },
            {
              "name": "new_user_id",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "New User Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TransferUserResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/current_user/groups": {
        "get": {
          "tags": [
            "users"
          ],
          "summary": "List Current User Groups",
          "operationId": "list_current_user_groups_current_user_groups_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/GroupDB"
                    },
                    "type": "array",
                    "title": "Response List Current User Groups Current User Groups Get"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/users/{user_id}/api_keys": {
        "get": {
          "tags": [
            "api_keys"
          ],
          "summary": "Get Api Keys",
          "operationId": "get_api_keys_users__user_id__api_keys_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "user_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "User Id"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListApiKeyResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/users/api_keys": {
        "post": {
          "tags": [
            "api_keys"
          ],
          "summary": "Create Api Key",
          "operationId": "create_api_key_users_api_keys_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateApiKeyRequest",
                  "examples": [
                    {
                      "description": "My cool api_key",
                      "expires_at": "2025-04-01 09:00:00+00:00"
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateApiKeyResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/users/api_keys/{api_key_id}": {
        "delete": {
          "tags": [
            "api_keys"
          ],
          "summary": "Delete Api Key",
          "operationId": "delete_api_key_users_api_keys__api_key_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "api_key_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Api Key Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiKeyDeleteResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/prompt_datasets": {
        "post": {
          "tags": [
            "datasets"
          ],
          "summary": "Upload Prompt Evaluation Dataset",
          "operationId": "upload_prompt_evaluation_dataset_projects__project_id__prompt_datasets_post",
          "deprecated": true,
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "format",
              "in": "query",
              "required": false,
              "schema": {
                "$ref": "#/components/schemas/DatasetFormat",
                "default": "csv"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Body_upload_prompt_evaluation_dataset_projects__project_id__prompt_datasets_post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PromptDatasetDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "datasets"
          ],
          "summary": "List Prompt Datasets",
          "operationId": "list_prompt_datasets_projects__project_id__prompt_datasets_get",
          "deprecated": true,
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListPromptDatasetResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/datasets": {
        "post": {
          "tags": [
            "datasets"
          ],
          "summary": "Create Dataset",
          "description": "Creates a stand alone dataset.",
          "operationId": "create_dataset_datasets_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "format",
              "in": "query",
              "required": false,
              "schema": {
                "$ref": "#/components/schemas/DatasetFormat",
                "default": "csv"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Body_create_dataset_datasets_post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "datasets"
          ],
          "summary": "List Datasets",
          "operationId": "list_datasets_datasets_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "actions",
              "in": "query",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DatasetAction"
                },
                "description": "Actions to include in the 'permissions' field.",
                "title": "Actions"
              },
              "description": "Actions to include in the 'permissions' field."
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListDatasetResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/datasets/{dataset_id}": {
        "get": {
          "tags": [
            "datasets"
          ],
          "summary": "Get Dataset",
          "operationId": "get_dataset_datasets__dataset_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "datasets"
          ],
          "summary": "Update Dataset",
          "operationId": "update_dataset_datasets__dataset_id__patch",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDatasetRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "datasets"
          ],
          "summary": "Delete Dataset",
          "operationId": "delete_dataset_datasets__dataset_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/datasets/query": {
        "post": {
          "tags": [
            "datasets"
          ],
          "summary": "Query Datasets",
          "operationId": "query_datasets_datasets_query_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "actions",
              "in": "query",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DatasetAction"
                },
                "description": "Actions to include in the 'permissions' field.",
                "title": "Actions"
              },
              "description": "Actions to include in the 'permissions' field."
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDatasetParams",
                  "default": {
                    "filters": [],
                    "sort": {
                      "name": "created_at",
                      "ascending": false,
                      "sort_type": "column"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListDatasetResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/prompt_datasets/{dataset_id}": {
        "put": {
          "tags": [
            "datasets"
          ],
          "summary": "Update Prompt Dataset",
          "operationId": "update_prompt_dataset_projects__project_id__prompt_datasets__dataset_id__put",
          "deprecated": true,
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            },
            {
              "name": "file_name",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "File Name"
              }
            },
            {
              "name": "num_rows",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Num Rows"
              }
            },
            {
              "name": "format",
              "in": "query",
              "required": false,
              "schema": {
                "$ref": "#/components/schemas/DatasetFormat",
                "default": "csv"
              }
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Body_update_prompt_dataset_projects__project_id__prompt_datasets__dataset_id__put"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PromptDatasetDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "datasets"
          ],
          "summary": "Delete Prompt Dataset",
          "operationId": "delete_prompt_dataset_projects__project_id__prompt_datasets__dataset_id__delete",
          "deprecated": true,
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "datasets"
          ],
          "summary": "Download Prompt Dataset",
          "operationId": "download_prompt_dataset_projects__project_id__prompt_datasets__dataset_id__get",
          "deprecated": true,
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/datasets/{dataset_id}/content": {
        "patch": {
          "tags": [
            "datasets"
          ],
          "summary": "Update Dataset Content",
          "description": "Update the content of a dataset.\n\nThe `index` and `column_name` fields are treated as keys tied to a specific version of the dataset.\nAs such, these values are considered immutable identifiers for the dataset's structure.\n\nFor example, if an edit operation changes the name of a column, subsequent edit operations in\nthe same request should reference the column using its original name.\n\nThe `If-Match` header is used to ensure that updates are only applied if the client's version of the dataset\nmatches the server's version. This prevents conflicts from simultaneous updates. The `ETag` header in the response\nprovides the new version identifier after a successful update.",
          "operationId": "update_dataset_content_datasets__dataset_id__content_patch",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            },
            {
              "name": "If-Match",
              "in": "header",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "ETag of the dataset as a version identifier.",
                "title": "If-Match"
              },
              "description": "ETag of the dataset as a version identifier.",
              "example": "d89cce33-549d-4b6d-b220-afb641d859c8"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDatasetContentRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "datasets"
          ],
          "summary": "Get Dataset Content",
          "operationId": "get_dataset_content_datasets__dataset_id__content_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetContent"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "datasets"
          ],
          "summary": "Rollback Dataset Content",
          "description": "Rollback the content of a dataset to a previous version.",
          "operationId": "rollback_dataset_content_datasets__dataset_id__content_put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RollbackRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/datasets/{dataset_id}/download": {
        "get": {
          "tags": [
            "datasets"
          ],
          "summary": "Download Dataset",
          "operationId": "download_dataset_datasets__dataset_id__download_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/datasets/{dataset_id}/preview": {
        "post": {
          "tags": [
            "datasets"
          ],
          "summary": "Preview Dataset",
          "operationId": "preview_dataset_datasets__dataset_id__preview_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewDatasetRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetContent"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/datasets/{dataset_id}/content/query": {
        "post": {
          "tags": [
            "datasets"
          ],
          "summary": "Query Dataset Content",
          "operationId": "query_dataset_content_datasets__dataset_id__content_query_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDatasetParams",
                  "default": {
                    "filters": []
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetContent"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/datasets/{dataset_id}/users": {
        "post": {
          "tags": [
            "datasets"
          ],
          "summary": "Create User Dataset Collaborators",
          "operationId": "create_user_dataset_collaborators_datasets__dataset_id__users_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserCollaboratorCreate"
                  },
                  "title": "Body"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UserCollaborator"
                    },
                    "title": "Response Create User Dataset Collaborators Datasets  Dataset Id  Users Post"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "datasets"
          ],
          "summary": "List User Dataset Collaborators",
          "description": "List the users with which the dataset has been shared.",
          "operationId": "list_user_dataset_collaborators_datasets__dataset_id__users_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListUserCollaboratorsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/datasets/{dataset_id}/groups": {
        "post": {
          "tags": [
            "datasets"
          ],
          "summary": "Create Group Dataset Collaborators",
          "description": "Share a dataset with groups.",
          "operationId": "create_group_dataset_collaborators_datasets__dataset_id__groups_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupCollaboratorCreate"
                  },
                  "title": "Body"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GroupCollaborator"
                    },
                    "title": "Response Create Group Dataset Collaborators Datasets  Dataset Id  Groups Post"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "datasets"
          ],
          "summary": "List Group Dataset Collaborators",
          "description": "List the groups with which the dataset has been shared.",
          "operationId": "list_group_dataset_collaborators_datasets__dataset_id__groups_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListGroupCollaboratorsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/datasets/{dataset_id}/users/{user_id}": {
        "patch": {
          "tags": [
            "datasets"
          ],
          "summary": "Update User Dataset Collaborator",
          "description": "Update the sharing permissions of a user on a dataset.",
          "operationId": "update_user_dataset_collaborator_datasets__dataset_id__users__user_id__patch",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "User Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollaboratorUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserCollaborator"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "datasets"
          ],
          "summary": "Delete User Dataset Collaborator",
          "description": "Remove a user's access to a dataset.",
          "operationId": "delete_user_dataset_collaborator_datasets__dataset_id__users__user_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "User Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/datasets/{dataset_id}/groups/{group_id}": {
        "patch": {
          "tags": [
            "datasets"
          ],
          "summary": "Update Group Dataset Collaborator",
          "description": "Update the sharing permissions of a group on a dataset.",
          "operationId": "update_group_dataset_collaborator_datasets__dataset_id__groups__group_id__patch",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            },
            {
              "name": "group_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Group Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollaboratorUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupCollaborator"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "datasets"
          ],
          "summary": "Delete Group Dataset Collaborator",
          "description": "Remove a group's access to a dataset.",
          "operationId": "delete_group_dataset_collaborator_datasets__dataset_id__groups__group_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            },
            {
              "name": "group_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Group Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/datasets/{dataset_id}/versions/query": {
        "post": {
          "tags": [
            "datasets"
          ],
          "summary": "Query Dataset Versions",
          "operationId": "query_dataset_versions_datasets__dataset_id__versions_query_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDatasetVersionParams"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListDatasetVersionResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/datasets/{dataset_id}/versions/{version_index}/content": {
        "get": {
          "tags": [
            "datasets"
          ],
          "summary": "Get Dataset Version Content",
          "operationId": "get_dataset_version_content_datasets__dataset_id__versions__version_index__content_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            },
            {
              "name": "version_index",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "title": "Version Index"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetContent"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/datasets/{dataset_id}/versions/{version_index}": {
        "patch": {
          "tags": [
            "datasets"
          ],
          "summary": "Update Dataset Version",
          "operationId": "update_dataset_version_datasets__dataset_id__versions__version_index__patch",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "dataset_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Dataset Id"
              }
            },
            {
              "name": "version_index",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "title": "Version Index"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDatasetVersionRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetVersionDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/edits": {
        "get": {
          "tags": [
            "edits"
          ],
          "summary": "Get Run Edits",
          "description": "Gets all edits in a project/run/split.\n\n:param project_id: project_id :param run_id: run_id :param split: split :param include_exported: Whether to also\nquery exported (past) edits. Default True. If True, return will include historical edits that have already been\nexported",
          "operationId": "get_run_edits_projects__project_id__runs__run_id__split__split__edits_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Inference Name"
              }
            },
            {
              "name": "include_exported",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Include Exported"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/EditGetResponse"
                    },
                    "title": "Response Get Run Edits Projects  Project Id  Runs  Run Id  Split  Split  Edits Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "edits"
          ],
          "summary": "Create Edit",
          "description": "Creates a Edit.\n\nIf setting sample_ids, the IDs must exist in the project/run/split. If setting filter, use the same filter params as\nused in /insights/summary\n\n**Cannot set both sample_ids and filter, must use only one.**\n\nIf in a run type that has tasks (see multi-label runs) you must set a task as part of the body.",
          "operationId": "create_edit_projects__project_id__runs__run_id__split__split__edits_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Inference Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditCreateRequest",
                  "examples": [
                    {
                      "note": "Note for my edit!",
                      "sample_ids": [2, 5, 7, 4, 1, 99, 234, 1152, 3435],
                      "filter": {
                        "likely_mislabeled": "true"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EditCreateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/edits/exports": {
        "get": {
          "tags": [
            "edits"
          ],
          "summary": "Get Edits Exports",
          "description": "Gets all exported edits from a project/run/split.\n\nReturns the id, edit_id, time of export, and user id that made the export",
          "operationId": "get_edits_exports_projects__project_id__runs__run_id__split__split__edits_exports_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/EditExportDB"
                    },
                    "title": "Response Get Edits Exports Projects  Project Id  Runs  Run Id  Split  Split  Edits Exports Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/edits/{edit_id}": {
        "get": {
          "tags": [
            "edits"
          ],
          "summary": "Get Edit",
          "description": "Gets an edit.",
          "operationId": "get_edit_edits__edit_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "edit_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Edit Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EditGetResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "edits"
          ],
          "summary": "Delete Edit",
          "operationId": "delete_edit_edits__edit_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "edit_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Edit Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EditDeleteResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/edits/{edit_id}/content": {
        "get": {
          "tags": [
            "edits"
          ],
          "summary": "Get Edit Content",
          "description": "Gets the data for an edit, including the text, predicted label and true label.",
          "operationId": "get_edit_content_edits__edit_id__content_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "edit_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Edit Id"
              }
            },
            {
              "name": "page_num",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Page Num"
              }
            },
            {
              "name": "meta_cols",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Meta Cols"
              }
            },
            {
              "name": "text_pat",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Text Pat"
              }
            },
            {
              "name": "regex",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Regex"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EditContent"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/edits/content": {
        "get": {
          "tags": [
            "edits"
          ],
          "summary": "Get Edit Contents For Run",
          "description": "Gets the data for all edits in a run.\n\nEquivalent logic to /edits/edit_id/content except for all edits in a run",
          "operationId": "get_edit_contents_for_run_projects__project_id__runs__run_id__split__split__edits_content_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Inference Name"
              }
            },
            {
              "name": "include_exported",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Include Exported"
              }
            },
            {
              "name": "page_num",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Page Num"
              }
            },
            {
              "name": "meta_cols",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Meta Cols"
              }
            },
            {
              "name": "text_pat",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Text Pat"
              }
            },
            {
              "name": "regex",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Regex"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/EditContent"
                    },
                    "title": "Response Get Edit Contents For Run Projects  Project Id  Runs  Run Id  Split  Split  Edits Content Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/edits/export": {
        "post": {
          "tags": [
            "edits"
          ],
          "summary": "Export Edits",
          "description": "Exports the resulting dataframe after a series of edits.\n\nIf overrides are provided, and the original edit had a task, the override MUST explicitly have a task set (typically\nthe same task as the edit)",
          "operationId": "export_edits_edits_export_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "ignore_conflicting_edits",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Ignore Conflicting Edits"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditExportRequest",
                  "examples": [
                    {
                      "edit_ids": [
                        "your-edit-uuid-1",
                        "your-edit-uuid-2"
                      ],
                      "file_type": "csv"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/edits/export/remote": {
        "post": {
          "tags": [
            "edits"
          ],
          "summary": "Export Edits Remote",
          "description": "Exports the resulting dataframe after a series of edits to a remote object store.\n\nNote that the file type is determined by the suffix of the object name. Must be one of csv, parquet, json, arrow\n\nIf overrides are provided, and the original edit had a task, the override MUST explicitly have a task set (typically\nthe same task as the edit)",
          "operationId": "export_edits_remote_edits_export_remote_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "ignore_conflicting_edits",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Ignore Conflicting Edits"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoteEditExportRequest",
                  "examples": [
                    {
                      "edit_ids": [
                        "your-edit-uuid-1",
                        "your-edit-uuid-2"
                      ],
                      "export_to": "s3",
                      "object_name": "/{project_id}/{run_id}/{split}/data_edited.csv"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RemoteEditExportResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/edits/labels": {
        "get": {
          "tags": [
            "edits"
          ],
          "summary": "Get New Labels For Run Edits",
          "description": "Returns any newly created labels for the edits within a run/split.\n\nNewly created labels are those that were created via the `create_new_label` action",
          "operationId": "get_new_labels_for_run_edits_projects__project_id__runs__run_id__split__split__edits_labels_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "title": "Response Get New Labels For Run Edits Projects  Project Id  Runs  Run Id  Split  Split  Edits Labels Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/edits/{edit_id}/review": {
        "post": {
          "tags": [
            "edits"
          ],
          "summary": "Add Review For Edit",
          "description": "Add a review for an edit.\n\nMust have access to the run with which the edit exists in. Users CAN review their own edits (as per ticket\ninstructions)",
          "operationId": "add_review_for_edit_edits__edit_id__review_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "edit_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Edit Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EditReviewDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/embeddings/available": {
        "get": {
          "tags": [
            "embeddings"
          ],
          "summary": "Has Embeddings",
          "description": "Returns whether or not model embeddings are available for this run/split.",
          "operationId": "has_embeddings_projects__project_id__runs__run_id__split__split__embeddings_available_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HasEmbeddingsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/embeddings": {
        "post": {
          "tags": [
            "embeddings"
          ],
          "summary": "Get Embeddings",
          "description": "Get all embedding data for 500k (or otherwise requested) data points.\n\nThis will take a random sample of the dataset. It exports the result as a csv\nin order to reduce request size and response latency (as results can be large)\nThis will return:\n* id\n* gold (index)\n* prediction (index)\n* data quality\n* text_sample\n* x coordinate\n* y coordinate\n** any metadata columns explicitly requested\n\nSet data_view=true to return data embeddings instead of model embeddings. If\ndata embeddings are not available, an exception will be thrown\n\nSet use_seed=false for random batches of embeddings on every response. This is\nuseful for batching, but should remain true if you are requesting a single set\nof embeddings. If you are returning all embeddings, this parameter is useless",
          "operationId": "get_embeddings_projects__project_id__runs__run_id__split__split__embeddings_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            },
            {
              "name": "data_view",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false,
                "title": "Data View"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingRequest",
                  "examples": [
                    {
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/embeddings/point": {
        "post": {
          "tags": [
            "embeddings"
          ],
          "summary": "Get Point Embeddings",
          "description": "Get all data (including text) for requested embedding points.\n\nSelect either via point IDs, or by selecting a Circle around them (providing\nan x, y, and radius (eg \"circle\": {\"x\": 0.1, \"y\": 0.2, \"radius\": 0.5}).\n\nOnly points or a circle are allowed, not both. Max 15 points per request.\nThis will return:\n* id\n* gold (string) (for non inference)\n* prediction (string)\n* dep (for non inference)\n* confidence\n* text_sample\n* x coordinate\n* y coordinate\n\nSet data_view=true to return data embeddings instead of model embeddings. If\ndata embeddings are not available, an error will be thrown",
          "operationId": "get_point_embeddings_projects__project_id__runs__run_id__split__split__embeddings_point_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            },
            {
              "name": "data_view",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false,
                "title": "Data View"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingPointRequest",
                  "examples": [
                    {
                      "ids": [1, 2, 5, 7, 3]
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EmbeddingPointResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/prompts/alerts": {
        "get": {
          "tags": [
            "evaluate-alerts"
          ],
          "summary": "List Evaluate Alerts",
          "operationId": "list_evaluate_alerts_projects__project_id__runs__run_id__prompts_alerts_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/EvaluateAlertDB"
                    },
                    "title": "Response List Evaluate Alerts Projects  Project Id  Runs  Run Id  Prompts Alerts Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/prompts/insights/metrics": {
        "post": {
          "tags": [
            "data",
            "prompts",
            "insights"
          ],
          "summary": "Get Metric Insights With Filters",
          "operationId": "get_metric_insights_with_filters_projects__project_id__runs__run_id__prompts_insights_metrics_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptFilterParams",
                  "default": {
                    "filters": []
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetricInsight"
                    },
                    "title": "Response Get Metric Insights With Filters Projects  Project Id  Runs  Run Id  Prompts Insights Metrics Post"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/evaluate/runs": {
        "post": {
          "tags": [
            "evaluate"
          ],
          "summary": "Create Workflows Run",
          "description": "Create a new Evaluate run with workflows.\n\nUse this endpoint to create a new Evaluate run with workflows. The request body should contain the `workflows` to be ingested and evaluated.\n\nAdditionally, specify the `project_id` or `project_name` to which the workflows should be ingested. If the project does not exist, it will be created. If the project exists, the workflows will be logged to it. If both `project_id` and `project_name` are provided, `project_id` will take precedence. The `run_name` is optional and will be auto-generated (timestamp-based) if not provided.\n\nThe body is also expected to include the configuration for the scorers to be used in the evaluation. This configuration will be used to evaluate the workflows and generate the results.",
          "operationId": "create_workflows_run_evaluate_runs_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluateRunRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EvaluateRunResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/evaluate/run-workflows": {
        "post": {
          "tags": [
            "evaluate"
          ],
          "summary": "Get Evaluate Run Results",
          "description": "Fetch evaluation results for a specific run including rows and aggregate information.",
          "operationId": "get_evaluate_run_results_evaluate_run_workflows_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluateRunResultsRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowsReadResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/projects/{project_id}/experiments": {
        "post": {
          "tags": [
            "experiment"
          ],
          "summary": "Create Experiment",
          "description": "Create a new experiment for a project.",
          "operationId": "create_experiment_projects__project_id__experiments_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperimentCreateRequest",
                  "examples": [
                    {
                      "name": "my_first_experiment"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExperimentResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "experiment"
          ],
          "summary": "List Experiments",
          "description": "Retrieve all experiments for a project.",
          "operationId": "list_experiments_projects__project_id__experiments_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExperimentResponse"
                    },
                    "title": "Response List Experiments Projects  Project Id  Experiments Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/experiments/{experiment_id}": {
        "get": {
          "tags": [
            "experiment"
          ],
          "summary": "Get Experiment",
          "description": "Retrieve a specific experiment.",
          "operationId": "get_experiment_projects__project_id__experiments__experiment_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "experiment_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Experiment Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExperimentResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "experiment"
          ],
          "summary": "Update Experiment",
          "description": "Update a specific experiment.",
          "operationId": "update_experiment_projects__project_id__experiments__experiment_id__put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "experiment_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Experiment Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperimentUpdateRequest",
                  "examples": [
                    {
                      "name": "my_first_experiment"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExperimentResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "experiment"
          ],
          "summary": "Delete Experiment",
          "description": "Delete a specific experiment.",
          "operationId": "delete_experiment_projects__project_id__experiments__experiment_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "experiment_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Experiment Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Successful Response"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/export": {
        "post": {
          "tags": [
            "export"
          ],
          "summary": "Export Data",
          "operationId": "export_data_projects__project_id__runs__run_id__split__split__export_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportRequest",
                  "examples": [
                    {
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the"
                      },
                      "all_but": false,
                      "include_emb": false,
                      "include_cols": [
                        "id",
                        "text",
                        "gold",
                        "pred"
                      ],
                      "col_mapping": {
                        "text": "Sentence"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/export/remote": {
        "post": {
          "tags": [
            "export"
          ],
          "summary": "Export Data Remote",
          "operationId": "export_data_remote_projects__project_id__runs__run_id__split__split__export_remote_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoteExportRequest",
                  "examples": [
                    {
                      "export_to": "s3",
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RemoteExportResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/features/columns": {
        "get": {
          "tags": [
            "features"
          ],
          "summary": "List Feature Columns",
          "description": "Lists the names of the features for a given project_id/run_id.\n\nThis endpoint is for tabular data only.",
          "operationId": "list_feature_columns_projects__project_id__runs__run_id__features_columns_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FeatureColumnsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/feedback/templates": {
        "post": {
          "tags": [
            "feedback"
          ],
          "summary": "Create Feedback Template",
          "operationId": "create_feedback_template_projects__project_id__feedback_templates_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedbackTemplateCreate",
                  "examples": [
                    {
                      "name": "creativity",
                      "criteria": "How creative was the response?",
                      "constraints": {
                        "feedback_type": "score",
                        "min": 1,
                        "max": 10
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FeedbackTemplateDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "feedback"
          ],
          "summary": "List Feedback Templates",
          "operationId": "list_feedback_templates_projects__project_id__feedback_templates_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FeedbackTemplateDB"
                    },
                    "title": "Response List Feedback Templates Projects  Project Id  Feedback Templates Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/feedback/templates/{template_id}": {
        "patch": {
          "tags": [
            "feedback"
          ],
          "summary": "Update Feedback Template",
          "operationId": "update_feedback_template_projects__project_id__feedback_templates__template_id__patch",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "template_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Template Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedbackTemplateUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FeedbackTemplateDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "feedback"
          ],
          "summary": "Get Feedback Template",
          "operationId": "get_feedback_template_projects__project_id__feedback_templates__template_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "template_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Template Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FeedbackTemplateDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "feedback"
          ],
          "summary": "Delete Feedback Template",
          "operationId": "delete_feedback_template_projects__project_id__feedback_templates__template_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "template_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Template Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/feedback/templates/{template_id}/index/{index}/rating": {
        "put": {
          "tags": [
            "feedback"
          ],
          "summary": "Create Feedback Rating",
          "description": "Record a feedack rating for a specific sample in a run. For prompt chains, the index must be the root node.",
          "operationId": "create_feedback_rating_projects__project_id__runs__run_id__feedback_templates__template_id__index__index__rating_put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "index",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "title": "Index"
              }
            },
            {
              "name": "template_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Template Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedbackRatingCreate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FeedbackRatingDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "feedback"
          ],
          "summary": "Get Feedback Rating",
          "operationId": "get_feedback_rating_projects__project_id__runs__run_id__feedback_templates__template_id__index__index__rating_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "index",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "title": "Index"
              }
            },
            {
              "name": "template_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Template Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FeedbackRatingDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "feedback"
          ],
          "summary": "Delete Feedback Rating",
          "operationId": "delete_feedback_rating_projects__project_id__runs__run_id__feedback_templates__template_id__index__index__rating_delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "template_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Template Id"
              }
            },
            {
              "name": "index",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "title": "Index"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/ratings": {
        "post": {
          "tags": [
            "feedback"
          ],
          "summary": "Apply Bulk Feedback",
          "description": "Record multiple feedback ratings",
          "operationId": "apply_bulk_feedback_projects__project_id__runs__run_id__ratings_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkFeedbackRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/BulkFeedbackRatingStatus"
                    },
                    "title": "Response Apply Bulk Feedback Projects  Project Id  Runs  Run Id  Ratings Post"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/feedback/templates/{template_id}/nodes/{node_id}/rating": {
        "put": {
          "tags": [
            "feedback"
          ],
          "summary": "Create Feedback Rating Observe",
          "description": "Record a feedack rating for a specific sample in a run. For prompt chains, the index must be the root node.",
          "operationId": "create_feedback_rating_observe_projects__project_id__feedback_templates__template_id__nodes__node_id__rating_put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "node_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Node Id"
              }
            },
            {
              "name": "template_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Template Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedbackRatingCreate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FeedbackRatingDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "feedback"
          ],
          "summary": "Get Feedback Rating Observe",
          "operationId": "get_feedback_rating_observe_projects__project_id__feedback_templates__template_id__nodes__node_id__rating_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "node_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Node Id"
              }
            },
            {
              "name": "template_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Template Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FeedbackRatingDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "feedback"
          ],
          "summary": "Delete Feedback Rating Observe",
          "operationId": "delete_feedback_rating_observe_projects__project_id__feedback_templates__template_id__nodes__node_id__rating_delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "node_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Node Id"
              }
            },
            {
              "name": "template_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Template Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/generated-scorers/generate": {
        "post": {
          "tags": [
            "scorer",
            "llm"
          ],
          "summary": "Generate",
          "operationId": "generate_generated_scorers_generate_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratedScorerGenerateConfiguration"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GenerationResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/generated-scorers/validate": {
        "post": {
          "tags": [
            "scorer",
            "llm"
          ],
          "summary": "Validate",
          "operationId": "validate_generated_scorers_validate_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratedScorerValidationRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GeneratedScorerValidationResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/generated-scorers": {
        "post": {
          "tags": [
            "scorer",
            "llm"
          ],
          "summary": "Create",
          "operationId": "create_generated_scorers_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGeneratedScorerRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GeneratedScorerResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "scorer",
            "llm"
          ],
          "summary": "Get All",
          "operationId": "get_all_generated_scorers_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListGeneratedScorersResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/generated-scorers/task-results/{task_result_id}": {
        "get": {
          "tags": [
            "scorer",
            "llm"
          ],
          "summary": "Get Task Result",
          "operationId": "get_task_result_generated_scorers_task_results__task_result_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "task_result_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Task Result Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GeneratedScorerTaskResultResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/generated-scorers/{generated_scorer_id}": {
        "patch": {
          "tags": [
            "scorer",
            "llm"
          ],
          "summary": "Update",
          "operationId": "update_generated_scorers__generated_scorer_id__patch",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "generated_scorer_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Generated Scorer Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateGeneratedScorerRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GeneratedScorerResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "scorer",
            "llm"
          ],
          "summary": "Get",
          "operationId": "get_generated_scorers__generated_scorer_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "generated_scorer_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Generated Scorer Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GeneratedScorerResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "scorer",
            "llm"
          ],
          "summary": "Delete",
          "operationId": "delete_generated_scorers__generated_scorer_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "generated_scorer_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Generated Scorer Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/group_roles": {
        "get": {
          "tags": [
            "groups"
          ],
          "summary": "Get Group Roles",
          "operationId": "get_group_roles_group_roles_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/GroupRoleInfo"
                    },
                    "type": "array",
                    "title": "Response Get Group Roles Group Roles Get"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/groups": {
        "post": {
          "tags": [
            "groups"
          ],
          "summary": "Create Group",
          "operationId": "create_group_groups_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupCreate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "groups"
          ],
          "summary": "List Groups",
          "operationId": "list_groups_groups_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListGroupsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/groups/{group_id}": {
        "delete": {
          "tags": [
            "groups"
          ],
          "summary": "Delete Group",
          "operationId": "delete_group_groups__group_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "group_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Group Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "groups"
          ],
          "summary": "Get Group",
          "operationId": "get_group_groups__group_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "group_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Group Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "groups"
          ],
          "summary": "Update Group",
          "operationId": "update_group_groups__group_id__patch",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "group_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Group Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/groups/{group_id}/members": {
        "post": {
          "tags": [
            "groups"
          ],
          "summary": "Add User To Group",
          "operationId": "add_user_to_group_groups__group_id__members_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "group_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Group Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMemberCreate"
                  },
                  "title": "Body"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GroupMemberDB"
                    },
                    "title": "Response Add User To Group Groups  Group Id  Members Post"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "groups"
          ],
          "summary": "List Group Members",
          "operationId": "list_group_members_groups__group_id__members_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "group_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Group Id"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListGroupMembersResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/groups/{group_id}/members/{user_id}": {
        "patch": {
          "tags": [
            "groups"
          ],
          "summary": "Update Group Member",
          "operationId": "update_group_member_groups__group_id__members__user_id__patch",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "user_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "User Id"
              }
            },
            {
              "name": "group_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Group Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMemberUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupMemberDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "groups"
          ],
          "summary": "Delete Group Member",
          "operationId": "delete_group_member_groups__group_id__members__user_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "user_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "User Id"
              }
            },
            {
              "name": "group_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Group Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/summary": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Summary Statistics",
          "description": "Populates the core components of the Galileo Console.\n\nCalculate summary statistics, data rows, hard/easy thresholds, DEP distribution for\n the cohort, and applies any filters requested.\n\nArgs:\n    project_id\n    run_id\n    split\n    current_user (User, optional): The current user making the HTTP request.\n        Defaults to Depends(authentication_service.current_user).\n    inference_name (bool, default \"\"): Optional inference name. Required if split\n        is inference\n    summary_request (SummaryRequest, optional): See SummaryRequest.\n\nReturns:\n    SplitRunResults",
          "operationId": "get_summary_statistics_projects__project_id__runs__run_id__split__split__insights_summary_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SummaryRequest",
                  "examples": [
                    {
                      "include_emb": true,
                      "hard_easy_threshold": true,
                      "sort_by": "data_error_potential",
                      "sort_ascending": false,
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the",
                        "misclassified_only": false
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RootModel_Union_InferenceRunResults__SplitRunResults__"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/groupby": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Groupby Statistics",
          "description": "Calculates statistics for a particular categorical groupby column.\n\nCalculates f1, precision, recall, DEP (if applicable), confidence (if applicable),\nand count, for each group in the groupby column.\n\nArgs:\n    project_id\n    run_id\n    split\n    groupby_col: Required query param. The column to calculate statistics on\n    current_user (User, optional): The current user making the HTTP request.\n        Defaults to Depends(authentication_service.current_user).\n    inference_name (bool, default \"\"): Optional inference name. Required if split\n        is inference\n    groupby_request (ContentRequest, optional): See ContentRequest. Optional filters\n    for the request\n\nReturns:\n    GroupByMetrics",
          "operationId": "get_groupby_statistics_projects__project_id__runs__run_id__split__split__insights_groupby_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "groupby_col",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Groupby Col"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentRequest",
                  "examples": [
                    {
                      "task": "",
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the",
                        "misclassified_only": false
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupByMetrics"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/ids": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Insight Ids",
          "description": "Gets ids from a given filter.\n\nRequest params should match the /summary request\n\nReturns:\n    List[int]",
          "operationId": "get_insight_ids_projects__project_id__runs__run_id__split__split__insights_ids_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SummaryIDRequest",
                  "examples": [
                    {
                      "include_emb": true,
                      "hard_easy_threshold": true,
                      "sort_by": "data_error_potential",
                      "sort_ascending": false,
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the",
                        "misclassified_only": false
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SummaryIDResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/percentage/sample": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Percentage",
          "description": "Gets the percentage of the current filter against the original dataframe.\n\nUse this route if you just need a percentage without calculating all summary stats",
          "operationId": "get_percentage_projects__project_id__runs__run_id__split__split__insights_percentage_sample_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterPercentageRequest",
                  "examples": [
                    {
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the",
                        "misclassified_only": false
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FilterPercentageResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/thresholds": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Thresholds",
          "description": "Gets the DEP score hard/easy thresholds for a project/run/split.\n\nIf in a multi-label model, you must provide a task",
          "operationId": "get_thresholds_projects__project_id__runs__run_id__split__split__insights_thresholds_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThresholdRequest",
                  "examples": [
                    {
  
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ThresholdResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/split/{split}/insights/compare": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Compare Runs",
          "description": "Gets overall statistics for multiple runs as well as slice statistics.",
          "operationId": "compare_runs_projects__project_id__split__split__insights_compare_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CompareRunsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/distribution": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Column Distribution",
          "description": "Calculates density distribution / histogram for a numeric column.\n\nArgs:\n    project_id\n    run_id\n    split\n    inference_name (bool, default \"\"): Optional inference name. Required if split\n        is inference\n    current_user (User, optional): The current user making the HTTP request.\n        Defaults to Depends(authentication_service.current_user).\n\n    distribution_request (DistributionRequest):\n    In request body:\n    col: Required. The column to calculate distribution on\n    nbins: Number of bins for the distribution. Default 20\n    limit_min: Minimum value for the limit of the dist. Default to min of column\n    limit_max: Maximum value for the limit of the dist. Default to min of column\n    Inherits from ContentRequest.\n        - Optional filters for the request\n\nReturns:\n    Distribution",
          "operationId": "get_column_distribution_projects__project_id__runs__run_id__split__split__insights_distribution_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistributionRequest",
                  "examples": [
                    {
                      "task": "",
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the",
                        "misclassified_only": false
                      },
                      "col": "confidence",
                      "nbins": 20,
                      "remove_outliers": false,
                      "include_metrics": false
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Distribution"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/metrics": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Model Metrics",
          "description": "Calculates f1, precision, and recall for a run/split given a set of filters.\n\n:param macro: Whether to macro average or weighted average metrics.     Default False (weighted) :param\nmetrics_request: Filters to pass in before calculating metrics",
          "operationId": "get_model_metrics_projects__project_id__runs__run_id__split__split__insights_metrics_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            },
            {
              "name": "macro",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false,
                "title": "Macro"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsRequest",
                  "examples": [
                    {
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the",
                        "misclassified_only": false
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MetricsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/metrics/tasks": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Task Metrics",
          "description": "[MLTC ONLY] This route calculates the overall F1 score per task.",
          "operationId": "get_task_metrics_projects__project_id__runs__run_id__split__split__insights_metrics_tasks_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            },
            {
              "name": "macro",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false,
                "title": "Macro"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsRequest",
                  "examples": [
                    {
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the",
                        "misclassified_only": false
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MultiLabelTaskMetrics"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/co_occurrence": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Label Co Occurrence",
          "description": "[MLTC ONLY] This route calculates label co-occurrence across tasks.",
          "operationId": "get_label_co_occurrence_projects__project_id__runs__run_id__split__split__insights_co_occurrence_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            },
            {
              "name": "threshold",
              "in": "query",
              "required": false,
              "schema": {
                "type": "number",
                "default": 0.3,
                "title": "Threshold"
              }
            },
            {
              "name": "top_n",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 5,
                "title": "Top N"
              }
            },
            {
              "name": "starting_label",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Starting Label"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsRequest",
                  "examples": [
                    {
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the",
                        "misclassified_only": false
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MultiLabelCoOccurrence"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/similar": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Similar From Split",
          "description": "Gets similar samples from another split.\n\nGiven a set of samples from a dataframe from split {split}, find the most similar samples from split {from_split}\nand return those IDs",
          "operationId": "get_similar_from_split_projects__project_id__runs__run_id__split__split__insights_similar_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "from_split",
              "in": "query",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            },
            {
              "name": "from_inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "From Inference Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentRequest",
                  "examples": [
                    {
                      "task": "",
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the",
                        "misclassified_only": false
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SimilarToResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/cbo_clusters": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Cbo Clusters For Split",
          "description": "Returns the list of available CBO (class boundary overlap) clusters for the.\n\ndataframe given some (or no) filters.\n\nThe clusters are returned as a list of CBOCluster in order of num_samples descending",
          "operationId": "get_cbo_clusters_for_split_projects__project_id__runs__run_id__split__split__insights_cbo_clusters_post",
          "deprecated": true,
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CBOClusterRequest",
                  "examples": [
                    {
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the",
                        "misclassified_only": false
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CBOClusterResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/cartograph_clusters": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Cartograph Clusters For Split",
          "description": "Get information about the Cartograph clusters found for a split.",
          "operationId": "get_cartograph_clusters_for_split_projects__project_id__runs__run_id__split__split__insights_cartograph_clusters_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CartographClusterResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/communities": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Communities For Split",
          "description": "Returns the list of available Communities (class confusions)",
          "operationId": "get_communities_for_split_projects__project_id__runs__run_id__split__split__insights_communities_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CommunityResponse"
                    },
                    "title": "Response Get Communities For Split Projects  Project Id  Runs  Run Id  Split  Split  Insights Communities Post"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/top": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Top Insights",
          "description": "Returns the list of top insights for UI to consume.\n\nDataframe given some (or no) filters.\n\nThe insights returned are:\n- top erroneous words (NER)\n- top misclassified pairs\n- top correlation pairs (tabular data)",
          "operationId": "get_top_insights_projects__project_id__runs__run_id__split__split__insights_top_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopInsightsRequest",
                  "examples": [
                    {
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the",
                        "misclassified_only": false
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TopInsightsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/charts/correlation": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Correlation Matrix Chart",
          "description": "Fetches data to populate a chart on the UI.\n\nDataframe given some (or no) filters.\n\nAvailable charts are:\n- correlation matrix (tabular data)\n- feature pairwise accuracy matrix (tabular data), to come...",
          "operationId": "get_correlation_matrix_chart_projects__project_id__runs__run_id__split__split__insights_charts_correlation_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsightChartRequest",
                  "examples": [
                    {
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the",
                        "misclassified_only": false
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InsightChartResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/alerts": {
        "get": {
          "tags": [
            "insights"
          ],
          "summary": "Get Alerts For Run",
          "description": "Gets alerts for project/run/split.\n\nOptionally gets dismissed cards as well",
          "operationId": "get_alerts_for_run_projects__project_id__runs__run_id__split__split__insights_alerts_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            },
            {
              "name": "include_dismissed",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false,
                "title": "Include Dismissed"
              }
            },
            {
              "name": "map_threshold",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Map Threshold"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/XRayCardDB"
                    },
                    "title": "Response Get Alerts For Run Projects  Project Id  Runs  Run Id  Split  Split  Insights Alerts Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/alerts/{alert_id}": {
        "delete": {
          "tags": [
            "insights"
          ],
          "summary": "Dismiss Alert",
          "description": "Marks an alert as dismissed. Dismissed alerts wont be queries by the GET.\n\nThis is the new name for xray. After some deprecation time we will rename everything",
          "operationId": "dismiss_alert_projects__project_id__runs__run_id__split__split__insights_alerts__alert_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "alert_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Alert Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/errors": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Error Counts",
          "description": "Returns the counts of errors, per error type.\n\nCurrently NER and OD support",
          "operationId": "get_error_counts_projects__project_id__runs__run_id__split__split__insights_errors_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentRequest",
                  "examples": [
                    {
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the",
                        "misclassified_only": false
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BarChart"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "insights"
          ],
          "summary": "Get Errors",
          "description": "Get the available errors for a run (if any)",
          "operationId": "get_errors_projects__project_id__runs__run_id__split__split__insights_errors_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "title": "Response Get Errors Projects  Project Id  Runs  Run Id  Split  Split  Insights Errors Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/map": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Map For Run",
          "description": "[OD ONLY] Calculates mean Average Precision for the (potentially filtered) df.\n\nAlso includes the errors and their scores for the insights chart. The\n`map_threshold` defaults to 0.5, but can be changed in the ContentRequest",
          "operationId": "get_map_for_run_projects__project_id__runs__run_id__split__split__insights_map_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentRequest",
                  "examples": [
                    {
                      "map_threshold": 0.5,
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the",
                        "misclassified_only": false
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MAPResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/semseg/metrics": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Segmentation Metrics For Run",
          "description": "[Sem Seg ONLY] Calculates mean and boundary IoU for the (filtered) df.",
          "operationId": "get_segmentation_metrics_for_run_projects__project_id__runs__run_id__split__split__insights_semseg_metrics_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentRequest",
                  "examples": [
                    {
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the",
                        "misclassified_only": false
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SegmentationMetricsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/seq2seq/metrics": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Seq2Seq Metrics For Run",
          "description": "[Seq2Seq ONLY] Calculates bleu, rouge, and DEP for the (filtered) df.",
          "operationId": "get_seq2seq_metrics_for_run_projects__project_id__runs__run_id__split__split__insights_seq2seq_metrics_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentRequest",
                  "examples": [
                    {
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the",
                        "misclassified_only": false
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Seq2SeqMetricsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/rows": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Data Rows",
          "description": "Returns rows of data for the run/split with optional filters applied.\n\nAlso responds if there is a next page available (more rows)\n[MLTC] - A task must be provided\n[OD] - A default map_threshold is provided at 0.5. This can be changed in the body\n    of the request, and will result in different error values for each returned row",
          "operationId": "get_data_rows_projects__project_id__runs__run_id__split__split__insights_rows_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SummaryRequest",
                  "examples": [
                    {
                      "sort_by": "data_error_potential",
                      "sort_ascending": false,
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the",
                        "misclassified_only": false
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DataRows"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/insights/errors/{error_name}/distribution": {
        "post": {
          "tags": [
            "insights"
          ],
          "summary": "Get Error Distribution For Column",
          "description": "Returns the breakdown of a given error per unique column.",
          "operationId": "get_error_distribution_for_column_projects__project_id__runs__run_id__split__split__insights_errors__error_name__distribution_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "error_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Error Name"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "column_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "class",
                "title": "Column Name"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentRequest",
                  "examples": [
                    {
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the",
                        "misclassified_only": false
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDistribution"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/integrations": {
        "get": {
          "tags": [
            "integrations"
          ],
          "summary": "List Integrations",
          "description": "List the created integrations for the requesting user.",
          "operationId": "list_integrations_integrations_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/IntegrationDB"
                    },
                    "type": "array",
                    "title": "Response List Integrations Integrations Get"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/integrations/available": {
        "get": {
          "tags": [
            "integrations"
          ],
          "summary": "List Available Integrations",
          "description": "List all of the available integrations to be created in Galileo.",
          "operationId": "list_available_integrations_integrations_available_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AvailableIntegrations"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/integrations/{name}": {
        "delete": {
          "tags": [
            "integrations"
          ],
          "summary": "Delete Integration",
          "description": "Delete the integration created by this user.",
          "operationId": "delete_integration_integrations__name__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/IntegrationName"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "integrations"
          ],
          "summary": "Get Integration",
          "description": "Gets the integration data formatted for the specified integration.",
          "operationId": "get_integration_integrations__name__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/IntegrationName"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/AwsBedrockIntegration"
                      },
                      {
                        "$ref": "#/components/schemas/AwsSageMakerIntegration"
                      },
                      {
                        "$ref": "#/components/schemas/AzureIntegration"
                      },
                      {
                        "$ref": "#/components/schemas/DatabricksIntegration"
                      },
                      {
                        "$ref": "#/components/schemas/LabelStudioIntegration"
                      },
                      {
                        "$ref": "#/components/schemas/OpenAIIntegration"
                      },
                      {
                        "$ref": "#/components/schemas/VertexAIIntegration"
                      },
                      {
                        "$ref": "#/components/schemas/WriterIntegration"
                      },
                      {
                        "$ref": "#/components/schemas/AnthropicIntegration"
                      },
                      {
                        "$ref": "#/components/schemas/MistralIntegration"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "aws_bedrock": "#/components/schemas/AwsBedrockIntegration",
                        "aws_sagemaker": "#/components/schemas/AwsSageMakerIntegration",
                        "azure": "#/components/schemas/AzureIntegration",
                        "databricks": "#/components/schemas/DatabricksIntegration",
                        "labelstudio": "#/components/schemas/LabelStudioIntegration",
                        "openai": "#/components/schemas/OpenAIIntegration",
                        "vertex_ai": "#/components/schemas/VertexAIIntegration",
                        "writer": "#/components/schemas/WriterIntegration",
                        "anthropic": "#/components/schemas/AnthropicIntegration",
                        "mistral": "#/components/schemas/MistralIntegration"
                      }
                    },
                    "title": "Response Get Integration Integrations  Name  Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/integrations/{name}/status": {
        "get": {
          "tags": [
            "integrations"
          ],
          "summary": "Get Integration Status",
          "description": "Checks if the integration status is active or not.",
          "operationId": "get_integration_status_integrations__name__status_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "name",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/IntegrationName"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "title": "Response Get Integration Status Integrations  Name  Status Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/integrations/{integration_id}/users": {
        "get": {
          "tags": [
            "integrations"
          ],
          "summary": "List User Integration Collaborators",
          "description": "List the users with which the integration has been shared.",
          "operationId": "list_user_integration_collaborators_integrations__integration_id__users_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "integration_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Integration Id"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListUserCollaboratorsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "integrations"
          ],
          "summary": "Create User Integration Collaborators",
          "operationId": "create_user_integration_collaborators_integrations__integration_id__users_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "integration_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Integration Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserCollaboratorCreate"
                  },
                  "title": "Body"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UserCollaborator"
                    },
                    "title": "Response Create User Integration Collaborators Integrations  Integration Id  Users Post"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/integrations/{integration_id}/users/{user_id}": {
        "patch": {
          "tags": [
            "integrations"
          ],
          "summary": "Update User Integration Collaborator",
          "description": "Update the sharing permissions of a user on a integration.",
          "operationId": "update_user_integration_collaborator_integrations__integration_id__users__user_id__patch",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "integration_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Integration Id"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "User Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollaboratorUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserCollaborator"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "integrations"
          ],
          "summary": "Delete User Integration Collaborator",
          "description": "Remove a user's access to a integration.",
          "operationId": "delete_user_integration_collaborator_integrations__integration_id__users__user_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "integration_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Integration Id"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "User Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/integrations/{integration_id}/groups": {
        "post": {
          "tags": [
            "integrations"
          ],
          "summary": "Create Group Integration Collaborators",
          "description": "Share a integration with groups.",
          "operationId": "create_group_integration_collaborators_integrations__integration_id__groups_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "integration_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Integration Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupCollaboratorCreate"
                  },
                  "title": "Body"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GroupCollaborator"
                    },
                    "title": "Response Create Group Integration Collaborators Integrations  Integration Id  Groups Post"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "integrations"
          ],
          "summary": "List Group Integration Collaborators",
          "description": "List the groups with which the integration has been shared.",
          "operationId": "list_group_integration_collaborators_integrations__integration_id__groups_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "integration_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Integration Id"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListGroupCollaboratorsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/integrations/{integration_id}/groups/{group_id}": {
        "patch": {
          "tags": [
            "integrations"
          ],
          "summary": "Update Group Integration Collaborator",
          "description": "Update the sharing permissions of a group on a integration.",
          "operationId": "update_group_integration_collaborator_integrations__integration_id__groups__group_id__patch",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "integration_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Integration Id"
              }
            },
            {
              "name": "group_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Group Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollaboratorUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupCollaborator"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "integrations"
          ],
          "summary": "Delete Group Integration Collaborator",
          "description": "Remove a group's access to a integration.",
          "operationId": "delete_group_integration_collaborator_integrations__integration_id__groups__group_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "integration_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Integration Id"
              }
            },
            {
              "name": "group_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Group Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/integrations/{integration_id}/select": {
        "put": {
          "tags": [
            "integrations"
          ],
          "summary": "Create Or Update Integration Selection",
          "description": "Create or update an integration selection for this user from Galileo.",
          "operationId": "create_or_update_integration_selection_integrations__integration_id__select_put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "integration_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Integration Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/integrations/anthropic": {
        "put": {
          "tags": [
            "integrations"
          ],
          "summary": "Create Or Update Integration",
          "description": "Create or update an Anthropic integration for this user from Galileo.",
          "operationId": "create_or_update_integration_integrations_anthropic_put",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnthropicIntegrationCreate",
                  "examples": [
                    {
                      "token": "my_secret_api_token"
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/integrations/aws_bedrock": {
        "put": {
          "tags": [
            "integrations"
          ],
          "summary": "Create Or Update Integration",
          "description": "Create or update an AWS integration for this user from Galileo.",
          "operationId": "create_or_update_integration_integrations_aws_bedrock_put",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseAwsIntegrationCreate",
                  "examples": [
                    {
                      "credential_type": "key_secret",
                      "region": "us-west-2",
                      "token": {
                        "aws_access_key_id": "AWSA46AWSAWSBEDR0C45K",
                        "aws_secret_access_key": "sagasg2t0-9527@$s1ashsahfahfddsg"
                      }
                    },
                    {
                      "credential_type": "assumed_role",
                      "region": "eu-west-1",
                      "token": {
                        "aws_role_arn": "arn:aws:iam::1234567901:role/AWSBedrockAccessRole"
                      }
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/integrations/aws_sagemaker": {
        "put": {
          "tags": [
            "integrations"
          ],
          "summary": "Create Or Update Integration",
          "description": "Create or update an AWS integration for this user from Galileo.",
          "operationId": "create_or_update_integration_integrations_aws_sagemaker_put",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwsSageMakerIntegrationCreate",
                  "examples": [
                    {
                      "models": [
                        {
                          "name": "huggingface-pytorch-inference-2024-02-29-14-53-51-829",
                          "alias": "aws_hello_world",
                          "integration": "aws_sagemaker",
                          "system_supported": false,
                          "token_limit": 4000,
                          "output_price": 0,
                          "input_price": 0,
                          "cost_by": "tokens",
                          "is_chat": false,
                          "provides_log_probs": false,
                          "formatting_tokens": 0,
                          "response_prefix_tokens": 0,
                          "params_map": {
                            "model": "model"
                          },
                          "input_map": {
                            "prompt": "prompt",
                            "prefix": "",
                            "suffix": ""
                          },
                          "completion_only": true
                        }
                      ],
                      "credential_type": "key_secret",
                      "region": "us-west-2",
                      "token": {
                        "aws_access_key_id": "AWSA46AWSAWSBEDR0C45K",
                        "aws_secret_access_key": "sagasg2t0-9527@$s1ashsahfahfddsg"
                      }
                    },
                    {
                      "models": [],
                      "credential_type": "assumed_role",
                      "region": "eu-west-1",
                      "token": {
                        "aws_role_arn": "arn:aws:iam::1234567901:role/AWSSagemakerAccessRole"
                      }
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/integrations/azure": {
        "put": {
          "tags": [
            "integrations"
          ],
          "summary": "Create Or Update Integration",
          "description": "Create or update an Azure integration for this user from Galileo.",
          "operationId": "create_or_update_integration_integrations_azure_put",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AzureIntegrationCreate",
                  "examples": [
                    {
                      "token": "my_secret_api_token",
                      "endpoint": "https://example-proxy.rungalileo.io",
                      "proxy": true,
                      "available_deployments": [
                        {
                          "model": "gpt-35-turbo",
                          "id": "id1"
                        },
                        {
                          "model": "gpt-4o-mini",
                          "id": "id2"
                        }
                      ]
                    },
                    {
                      "token": "my_secret_api_token",
                      "endpoint": "https://example-endpoint.openai.azure.com",
                      "available_deployments": [
                        {
                          "model": "gpt-35-turbo",
                          "id": "id1"
                        },
                        {
                          "model": "gpt-4o-mini",
                          "id": "id2"
                        }
                      ]
                    },
                    {
                      "token": "my_secret_api_token",
                      "endpoint": "https://example-endpoint.openai.azure.com",
                      "headers": {
                        "user_id": "user@example.com",
                        "project_name": "foo-bar"
                      }
                    },
                    {
                      "token": "my_secret_api_token",
                      "endpoint": "https://example-proxy.rungalileo.io",
                      "proxy": true
                    },
                    {
                      "token": "my_secret_api_token",
                      "endpoint": "https://example-endpoint.openai.azure.com"
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/integrations/databricks/unity-catalog/sql": {
        "put": {
          "tags": [
            "integrations"
          ],
          "summary": "Create Or Update Unity Catalog Integration",
          "description": "Create or update a databricks integration for this user from Galileo.",
          "operationId": "create_or_update_unity_catalog_integration_integrations_databricks_unity_catalog_sql_put",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabricksIntegrationCreate",
                  "examples": [
                    {
                      "storage": true,
                      "hostname": "https://dbc-00000000-0000.cloud.databricks.com",
                      "path": "/sql/1.0/warehouses/a000000000000000",
                      "token": "my_secret_api_token"
                    },
                    {
                      "llm": true,
                      "hostname": "https://dbc-00000000-0000.cloud.databricks.com",
                      "token": "my_secret_api_token"
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "deprecated": true,
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/integrations/databricks": {
        "put": {
          "tags": [
            "integrations"
          ],
          "summary": "Create Or Update Unity Catalog Integration",
          "description": "Create or update a databricks integration for this user from Galileo.",
          "operationId": "create_or_update_unity_catalog_integration_integrations_databricks_put",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabricksIntegrationCreate",
                  "examples": [
                    {
                      "storage": true,
                      "hostname": "https://dbc-00000000-0000.cloud.databricks.com",
                      "path": "/sql/1.0/warehouses/a000000000000000",
                      "token": "my_secret_api_token"
                    },
                    {
                      "llm": true,
                      "hostname": "https://dbc-00000000-0000.cloud.databricks.com",
                      "token": "my_secret_api_token"
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/integrations/databricks/catalogs": {
        "get": {
          "tags": [
            "integrations"
          ],
          "summary": "Get Databricks Catalogs",
          "operationId": "get_databricks_catalogs_integrations_databricks_catalogs_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "title": "Response Get Databricks Catalogs Integrations Databricks Catalogs Get"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/integrations/databricks/databases": {
        "get": {
          "tags": [
            "integrations"
          ],
          "summary": "Get Databases For Cluster",
          "operationId": "get_databases_for_cluster_integrations_databricks_databases_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "catalog",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Catalog"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "title": "Response Get Databases For Cluster Integrations Databricks Databases Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/integrations/databricks/export": {
        "post": {
          "tags": [
            "integrations"
          ],
          "summary": "Export To Databricks",
          "operationId": "export_to_databricks_integrations_databricks_export_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabricksExportRequest",
                  "examples": [
                    {
                      "database_name": "galileo_delta_db",
                      "table_name": "table_1",
                      "project_id": "{uuid4}",
                      "run_id": "{uuid4}",
                      "split": "training"
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatabricksExportResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/integrations/databricks/edits/export": {
        "post": {
          "tags": [
            "integrations",
            "integrations",
            "edits"
          ],
          "summary": "Export Edits Databricks",
          "description": "Exports the resulting dataframe after a series of edits to databricks delta lake.\n\nIf overrides are provided, and the original edit had a task, the override MUST explicitly have a task set (typically\nthe same task as the edit)",
          "operationId": "export_edits_databricks_integrations_databricks_edits_export_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "ignore_conflicting_edits",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Ignore Conflicting Edits"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabricksEditExportRequest",
                  "examples": [
                    {
                      "edit_ids": [
                        "your-edit-uuid-1",
                        "your-edit-uuid-2"
                      ],
                      "database_name": "galileo_delta_db",
                      "table_name": "table_1"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatabricksEditExportResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/integrations/databricks/unity-catalog/export": {
        "post": {
          "tags": [
            "integrations"
          ],
          "summary": "Export To Databricks Unity Catalog",
          "operationId": "export_to_databricks_unity_catalog_integrations_databricks_unity_catalog_export_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabricksExportRequest",
                  "examples": [
                    {
                      "catalog_name": "catalog0",
                      "schema_name": "schema0",
                      "table_name": "table0",
                      "psl_content_file_name": "data0.parquet",
                      "project_id": "{uuid4}",
                      "run_id": "{uuid4}",
                      "split": "training"
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatabricksUnityCatalogExportResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/integrations/databricks/unity-catalog/edits/export": {
        "post": {
          "tags": [
            "integrations",
            "integrations",
            "edits"
          ],
          "summary": "Export Edits Databricks Unity Catalog",
          "operationId": "export_edits_databricks_unity_catalog_integrations_databricks_unity_catalog_edits_export_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "ignore_conflicting_edits",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Ignore Conflicting Edits"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabricksUnityCatalogEditExportRequest",
                  "examples": [
                    {
                      "catalog_name": "catalog0",
                      "schema_name": "schema0",
                      "table_name": "table0",
                      "psl_content_file_name": "data0.parquet",
                      "edit_ids": [
                        "your-edit-uuid-1",
                        "your-edit-uuid-2"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatabricksUnityCatalogExportEditsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/integrations/labelstudio": {
        "put": {
          "tags": [
            "integrations"
          ],
          "summary": "Create Or Update Integration",
          "description": "Create or update a labelstudio integration for this user from Galileo.",
          "operationId": "create_or_update_integration_integrations_labelstudio_put",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabelStudioIntegrationCreate",
                  "examples": [
                    {
                      "token": "my_secret_api_token",
                      "url": "https://app.heartex.com",
                      "is_enterprise": false
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/integrations/labelstudio/projects": {
        "get": {
          "tags": [
            "integrations"
          ],
          "summary": "Get Labelstudio Projects",
          "operationId": "get_labelstudio_projects_integrations_labelstudio_projects_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/LabelStudioProject"
                    },
                    "type": "array",
                    "title": "Response Get Labelstudio Projects Integrations Labelstudio Projects Get"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/integrations/labelstudio/export": {
        "post": {
          "tags": [
            "integrations"
          ],
          "summary": "Export To Labelstudio",
          "operationId": "export_to_labelstudio_integrations_labelstudio_export_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabelStudioExportRequest",
                  "examples": [
                    {
                      "project_name": "my_galileo_labelstudio_project",
                      "project_id": "{uuid4}",
                      "run_id": "{uuid4}",
                      "split": "training"
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/integrations/mistral": {
        "put": {
          "tags": [
            "integrations"
          ],
          "summary": "Create Or Update Integration",
          "description": "Create or update an Mistral integration for this user from Galileo.",
          "operationId": "create_or_update_integration_integrations_mistral_put",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MistralIntegrationCreate",
                  "examples": [
                    {
                      "token": "my_secret_api_token"
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/integrations/openai": {
        "put": {
          "tags": [
            "integrations"
          ],
          "summary": "Create Or Update Integration",
          "description": "Create or update an OpenAI integration for this user from Galileo.",
          "operationId": "create_or_update_integration_integrations_openai_put",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIIntegrationCreate",
                  "examples": [
                    {
                      "token": "my_secret_api_token"
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/integrations/vertex_ai": {
        "put": {
          "tags": [
            "integrations"
          ],
          "summary": "Create Or Update Integration",
          "description": "Create or update a Google Vertex AI integration for a user.",
          "operationId": "create_or_update_integration_integrations_vertex_ai_put",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VertexAIIntegrationCreate",
                  "examples": [
                    {
                      "token": "{\"type\": \"service_account\", \"project_id\": \"project-id\", \"private_key_id\": \"foo-bar\", \"private_key\": \"-----BEGIN RSA PRIVATE KEY-----\\n                ...\\n                -----END RSA PRIVATE KEY-----\", \"client_email\": \"user@iam.gserviceaccount.com\", \"client_id\": \"12353152646346\", \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\", \"token_uri\": \"https://oauth2.googleapis.com/token\", \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\", \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/user%40iam.gserviceaccount.com\", \"universe_domain\": \"googleapis.com\"}"
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/integrations/writer": {
        "put": {
          "tags": [
            "integrations"
          ],
          "summary": "Create Or Update Integration",
          "description": "Create or update a Writer integration for a user.",
          "operationId": "create_or_update_integration_integrations_writer_put",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriterIntegrationCreate",
                  "examples": [
                    {
                      "organization_id": "123456789",
                      "token": "my_secret_api_token"
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/jobs": {
        "post": {
          "tags": [
            "jobs"
          ],
          "summary": "Create Job",
          "operationId": "create_job_jobs_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateJobRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateJobResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/jobs/{job_id}": {
        "get": {
          "tags": [
            "jobs"
          ],
          "summary": "Get Job",
          "description": "Get a job by id.",
          "operationId": "get_job_jobs__job_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "job_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Job Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JobDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/jobs": {
        "get": {
          "tags": [
            "jobs"
          ],
          "summary": "Get Jobs For Project Run",
          "description": "Get all jobs by for a project and run.\n\nReturns them in order of creation from newest to oldest.",
          "operationId": "get_jobs_for_project_run_projects__project_id__runs__run_id__jobs_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "status",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Status"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/JobDB"
                    },
                    "title": "Response Get Jobs For Project Run Projects  Project Id  Runs  Run Id  Jobs Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/jobs/latest": {
        "get": {
          "tags": [
            "jobs"
          ],
          "summary": "Get Latest Job For Project Run",
          "description": "Returns the most recently updated job for a run.",
          "operationId": "get_latest_job_for_project_run_projects__project_id__runs__run_id__jobs_latest_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/JobDB"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Response Get Latest Job For Project Run Projects  Project Id  Runs  Run Id  Jobs Latest Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/llm_integrations/{llm_integration}/models": {
        "get": {
          "tags": [
            "llm_integrations"
          ],
          "summary": "Get Available Models",
          "description": "Get the list of supported models for the LLM integration.",
          "operationId": "get_available_models_llm_integrations__llm_integration__models_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "llm_integration",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/LLMIntegration"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "title": "Response Get Available Models Llm Integrations  Llm Integration  Models Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/llm_integrations/{llm_integration}/scorer_models": {
        "get": {
          "tags": [
            "llm_integrations"
          ],
          "summary": "Get Available Scorer Models",
          "description": "Get the list of supported scorer models for the LLM integration.",
          "operationId": "get_available_scorer_models_llm_integrations__llm_integration__scorer_models_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "llm_integration",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/LLMIntegration"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "title": "Response Get Available Scorer Models Llm Integrations  Llm Integration  Scorer Models Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/log_streams": {
        "post": {
          "tags": [
            "log_stream"
          ],
          "summary": "Create Log Stream",
          "description": "Create a new log stream for a project.",
          "operationId": "create_log_stream_projects__project_id__log_streams_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogStreamCreateRequest",
                  "examples": [
                    {
                      "name": "my_first_log_stream"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogStreamResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "log_stream"
          ],
          "summary": "List Log Streams",
          "description": "Retrieve all log streams for a project.",
          "operationId": "list_log_streams_projects__project_id__log_streams_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LogStreamResponse"
                    },
                    "title": "Response List Log Streams Projects  Project Id  Log Streams Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/log_streams/{log_stream_id}": {
        "get": {
          "tags": [
            "log_stream"
          ],
          "summary": "Get Log Stream",
          "description": "Retrieve a specific log stream.",
          "operationId": "get_log_stream_projects__project_id__log_streams__log_stream_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "log_stream_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Log Stream Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogStreamResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "log_stream"
          ],
          "summary": "Update Log Stream",
          "description": "Update a specific log stream.",
          "operationId": "update_log_stream_projects__project_id__log_streams__log_stream_id__put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "log_stream_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Log Stream Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogStreamUpdateRequest",
                  "examples": [
                    {
                      "name": "my_first_log_stream"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogStreamResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "log_stream"
          ],
          "summary": "Delete Log Stream",
          "description": "Delete a specific log stream.",
          "operationId": "delete_log_stream_projects__project_id__log_streams__log_stream_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "log_stream_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Log Stream Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Successful Response"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/meta/columns": {
        "post": {
          "tags": [
            "meta"
          ],
          "summary": "List Metadata Columns",
          "description": "Describes the available metadata columns for a given project_id/run_id.\n\nResponse is a list of MetaInfo objects with fields:\nname\nis_categorical\nunique_values\nunique_values_filtered (if filter applied)\nn_unique_values\nn_unique_values_filtered (if filter applied)\nmax\nmin",
          "operationId": "list_metadata_columns_projects__project_id__runs__run_id__split__split__meta_columns_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMetaRequest",
                  "examples": [
                    {
                      "filter_params": {
                        "data_error_potential_high": 0.8,
                        "data_error_potential_low": 0.3,
                        "text_pat": "the",
                        "misclassified_only": false
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListMetaResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/metric_critiques": {
        "post": {
          "tags": [
            "metric-critiques"
          ],
          "summary": "Create Metric Critiques",
          "operationId": "create_metric_critiques_projects__project_id__metric_critiques_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMetricCritiquesRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetricCritique"
                    },
                    "title": "Response Create Metric Critiques Projects  Project Id  Metric Critiques Post"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/metric_critiques/{critique_id}": {
        "delete": {
          "tags": [
            "metric-critiques"
          ],
          "summary": "Delete Metric Critique",
          "operationId": "delete_metric_critique_projects__project_id__metric_critiques__critique_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "critique_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Critique Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/metric_critiques/scorers": {
        "get": {
          "tags": [
            "metric-critiques"
          ],
          "summary": "Get Metric Critique Scorers For Run",
          "description": "Get scorer ids that can be critiqued for a given run, and metadata about whether a metric critique job is in progress",
          "operationId": "get_metric_critique_scorers_for_run_projects__project_id__runs__run_id__metric_critiques_scorers_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MetricCritiqueScorers"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/alerts/create": {
        "post": {
          "tags": [
            "observe"
          ],
          "summary": "Create",
          "description": "Create alert for llm-monitor.",
          "operationId": "create_projects__project_id__alerts_create_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAlertConfigurationRequest",
                  "examples": [
                    {
                      "conditions": [
                        {
                          "field": "uncertainty",
                          "aggregation": "max",
                          "operator": "lte",
                          "value": 0.3,
                          "window": 900,
                          "condition_type": "metric/numeric/1"
                        }
                      ],
                      "interval": 300
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AlertConfigurationResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/alerts/{monitor_alert_config_id}/update": {
        "put": {
          "tags": [
            "observe"
          ],
          "summary": "Update",
          "description": "Create alert for llm-monitor.",
          "operationId": "update_projects__project_id__alerts__monitor_alert_config_id__update_put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "monitor_alert_config_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Monitor Alert Config Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAlertConfigurationRequest",
                  "examples": [
                    {
                      "conditions": [
                        {
                          "field": "uncertainty",
                          "aggregation": "max",
                          "operator": "lte",
                          "value": 0.3,
                          "window": 900,
                          "condition_type": "metric/numeric/1"
                        }
                      ],
                      "interval": 300
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AlertConfigurationResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/alerts/{monitor_alert_config_id}": {
        "delete": {
          "tags": [
            "observe"
          ],
          "summary": "Delete Alert",
          "description": "Get all rows from monitor_records.\n\nReturns them in order of creation from newest to oldest.",
          "operationId": "delete_alert_projects__project_id__alerts__monitor_alert_config_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "monitor_alert_config_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Monitor Alert Config Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AlertStatusResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "observe"
          ],
          "summary": "Get Alert By Id",
          "operationId": "get_alert_by_id_projects__project_id__alerts__monitor_alert_config_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "monitor_alert_config_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Monitor Alert Config Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AlertConfigurationResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/alerts": {
        "get": {
          "tags": [
            "observe"
          ],
          "summary": "List Alerts By Project",
          "operationId": "list_alerts_by_project_projects__project_id__alerts_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListAlertConfigurationsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/observe/workflows": {
        "post": {
          "tags": [
            "observe"
          ],
          "summary": "Log Workflows",
          "description": "Log workflows to an Observe project.\n\nUse this endpoint to log workflows to an Observe project. The request body should contain the\n`workflows` to be ingested.\n\nAdditionally, specify the `project_id` or `project_name` to which the workflows should be ingested.\nIf the project does not exist, it will be created. If the project exists, the workflows will be logged to it.\nIf both `project_id` and `project_name` are provided, `project_id` will take precedence.",
          "operationId": "log_workflows_observe_workflows_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowsIngestRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowsIngestResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/observe/projects/{project_id}/workflows": {
        "post": {
          "tags": [
            "observe"
          ],
          "summary": "Get Workflows",
          "description": "Get workflows for a specific run in an Observe project.",
          "operationId": "get_workflows_observe_projects__project_id__workflows_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "start_time",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Start Time"
              }
            },
            {
              "name": "end_time",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "End Time"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetObserveWorkflowsRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowsReadResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/observe/ingest": {
        "post": {
          "tags": [
            "observe"
          ],
          "summary": "Ingest",
          "description": "Ingest batches of transaction records from llm-monitor.",
          "operationId": "ingest_projects__project_id__observe_ingest_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionRecordBatch",
                  "examples": [
                    {
                      "records": [
                        {
                          "latency_ms": 894,
                          "status_code": 200,
                          "input_text": "This is a prompt.",
                          "output_text": "This is a response.",
                          "model": "gpt-3.5-turbo",
                          "num_input_tokens": 7,
                          "num_output_tokens": 8,
                          "num_total_tokens": 15,
                          "node_id": "ded93205-6411-40cf-9183-7739f18bd4b9",
                          "chain_id": "\u003Cfunction uuid4 at 0x7a84f3204280\u003E",
                          "output_logprobs": {
  
                          },
                          "created_at": "2023-08-07T15:14:30.519922"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/observe/rows": {
        "post": {
          "tags": [
            "observe"
          ],
          "summary": "Get Rows",
          "description": "Get all rows from monitor_records.\n\nReturns them in order of creation from newest to oldest.",
          "operationId": "get_rows_projects__project_id__observe_rows_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "start_time",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Start Time"
              }
            },
            {
              "name": "end_time",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "End Time"
              }
            },
            {
              "name": "chain_id",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Chain Id"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 50,
                "title": "Limit"
              }
            },
            {
              "name": "offset",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Offset"
              }
            },
            {
              "name": "include_chains",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false,
                "title": "Include Chains"
              }
            },
            {
              "name": "return_col_schema",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Return Col Schema"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionRowsRequestBody",
                  "examples": [
                    {
                      "filters": [
                        {
                          "col_name": "metrics",
                          "json_field": "uncertainty",
                          "json_field_type": "float",
                          "value": 0.8,
                          "operator": "gt"
                        }
                      ],
                      "sort_spec": [
                        {
                          "col_name": "metrics",
                          "sort_dir": "desc",
                          "json_field": "cost",
                          "json_field_type": "float"
                        }
                      ],
                      "columns": []
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TransactionRecordsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/observe/filter_options": {
        "get": {
          "tags": [
            "observe"
          ],
          "summary": "Get Filter Options",
          "description": "Get filter options for the observe view.",
          "operationId": "get_filter_options_projects__project_id__observe_filter_options_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "start_time",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Start Time"
              }
            },
            {
              "name": "end_time",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "End Time"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FilterOptionsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/observe/metric_critique_columns": {
        "get": {
          "tags": [
            "observe"
          ],
          "summary": "Get Metric Critique Columns",
          "description": "Get the metadata for the columns in the observe view.",
          "operationId": "get_metric_critique_columns_projects__project_id__observe_metric_critique_columns_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MetricCritiqueColumns"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/observe/export": {
        "post": {
          "tags": [
            "observe"
          ],
          "summary": "Export Rows",
          "description": "Export rows from monitor_records as jsonl or csv.",
          "operationId": "export_rows_projects__project_id__observe_export_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "start_time",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Start Time"
              }
            },
            {
              "name": "end_time",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "End Time"
              }
            },
            {
              "name": "chain_id",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Chain Id"
              }
            },
            {
              "name": "include_chains",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false,
                "title": "Include Chains"
              }
            },
            {
              "name": "test_set",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false,
                "title": "Test Set"
              }
            },
            {
              "name": "export_format",
              "in": "query",
              "required": false,
              "schema": {
                "$ref": "#/components/schemas/LLMExportFormat",
                "default": "jsonl"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionRowsRequestBody",
                  "examples": [
                    {
                      "filters": [
                        {
                          "col_name": "metrics",
                          "json_field": "uncertainty",
                          "json_field_type": "float",
                          "value": 0.8,
                          "operator": "gt"
                        }
                      ],
                      "sort_spec": [
                        {
                          "col_name": "metrics",
                          "sort_dir": "desc",
                          "json_field": "cost",
                          "json_field_type": "float"
                        }
                      ],
                      "columns": []
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/observe/export/databricks": {
        "post": {
          "tags": [
            "observe"
          ],
          "summary": "Export Rows Databricks",
          "description": "Export rows from monitor_records to databricks.",
          "operationId": "export_rows_databricks_projects__project_id__observe_export_databricks_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "start_time",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Start Time"
              }
            },
            {
              "name": "end_time",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "End Time"
              }
            },
            {
              "name": "chain_id",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Chain Id"
              }
            },
            {
              "name": "test_set",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false,
                "title": "Test Set"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabricksObserveExportRequest",
                  "examples": [
                    {
                      "database_name": "galileo_delta_db",
                      "table_name": "table_1",
                      "filters": [
                        {
                          "col_name": "metrics",
                          "json_field": "uncertainty",
                          "json_field_type": "float",
                          "value": 0.8,
                          "operator": "gt"
                        }
                      ],
                      "sort_spec": [
                        {
                          "col_name": "metrics",
                          "sort_dir": "desc",
                          "json_field": "cost",
                          "json_field_type": "float"
                        }
                      ],
                      "columns": []
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/observe/metrics": {
        "post": {
          "tags": [
            "observe"
          ],
          "summary": "Get Metrics",
          "operationId": "get_metrics_projects__project_id__observe_metrics_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "start_time",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "format": "date-time",
                "title": "Start Time"
              }
            },
            {
              "name": "end_time",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "format": "date-time",
                "title": "End Time"
              }
            },
            {
              "name": "interval",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 5,
                "title": "Interval"
              }
            },
            {
              "name": "group_by",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Group By"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FiltersRequestBody",
                  "examples": [
                    {
                      "filters": [
                        {
                          "col_name": "metrics",
                          "json_field": "uncertainty",
                          "json_field_type": "float",
                          "value": 0.8,
                          "operator": "gt"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TransactionMetricsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/observe/delete": {
        "post": {
          "tags": [
            "observe"
          ],
          "summary": "Delete Rows",
          "description": "Get all rows from monitor_records.\n\nReturns them in order of creation from newest to oldest.",
          "operationId": "delete_rows_projects__project_id__observe_delete_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionRowsRequestBody",
                  "examples": [
                    {
                      "filters": [
                        {
                          "col_name": "metrics",
                          "json_field": "uncertainty",
                          "json_field_type": "float",
                          "value": 0.8,
                          "operator": "gt"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TransactionRecordsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/observe/workflows-count": {
        "post": {
          "tags": [
            "observe"
          ],
          "summary": "Get Workflow Count",
          "operationId": "get_workflow_count_projects__project_id__observe_workflows_count_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FiltersRequestBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowCountResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/observe/integrations": {
        "get": {
          "tags": [
            "observe"
          ],
          "summary": "Get Project Integrations",
          "description": "Get the integrations for a project.",
          "operationId": "get_project_integrations_projects__project_id__observe_integrations_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectIntegrationsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/observe/column_schema": {
        "get": {
          "tags": [
            "observe"
          ],
          "summary": "Get Metrics Schema Endpoint",
          "description": "Get column_schema for each metric.",
          "operationId": "get_metrics_schema_endpoint_projects__project_id__observe_column_schema_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "title": "Response Get Metrics Schema Endpoint Projects  Project Id  Observe Column Schema Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/observe/user_metadata": {
        "get": {
          "tags": [
            "observe"
          ],
          "summary": "Get User Metadata Endpoint",
          "description": "Get user_metadata fields for a project.",
          "operationId": "get_user_metadata_endpoint_projects__project_id__observe_user_metadata_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "title": "Response Get User Metadata Endpoint Projects  Project Id  Observe User Metadata Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/organizations": {
        "post": {
          "tags": [
            "organizations"
          ],
          "summary": "Create Organization",
          "operationId": "create_organization_organizations_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrganizationDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/organizations/query": {
        "post": {
          "tags": [
            "organizations"
          ],
          "summary": "Query Organizations",
          "operationId": "query_organizations_organizations_query_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryOrganizationParams",
                  "default": {
                    "filters": [],
                    "sort": {
                      "name": "created_at",
                      "ascending": false,
                      "sort_type": "column"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListOrganizationsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/project_settings/{project_id}": {
        "put": {
          "tags": [
            "project_settings"
          ],
          "summary": "Update Project Settings Legacy",
          "operationId": "update_project_settings_legacy_project_settings__project_id__put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompositeProjectSettings"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectSettingsDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/settings": {
        "put": {
          "tags": [
            "project_settings"
          ],
          "summary": "Update Project Settings",
          "operationId": "update_project_settings_projects__project_id__settings_put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenAIProjectSettings-Input"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectSettingsDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "project_settings"
          ],
          "summary": "Get Settings",
          "operationId": "get_settings_projects__project_id__settings_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GenAIProjectSettings-Output"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/settings/scorers_config": {
        "get": {
          "tags": [
            "project_settings"
          ],
          "summary": "Get Scorers Config",
          "operationId": "get_scorers_config_projects__project_id__settings_scorers_config_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ScorersConfig-Output"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/project/{project_id}/settings/scorers_config": {
        "get": {
          "tags": [
            "project_settings"
          ],
          "summary": "Get Scorers Config",
          "operationId": "get_scorers_config_project__project_id__settings_scorers_config_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ScorersConfig-Output"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/settings/observe": {
        "get": {
          "tags": [
            "project_settings"
          ],
          "summary": "Get Observe Settings",
          "operationId": "get_observe_settings_projects__project_id__settings_observe_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObserveProjectSettings"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/settings/evaluate": {
        "get": {
          "tags": [
            "project_settings"
          ],
          "summary": "Get Evaluate Settings",
          "operationId": "get_evaluate_settings_projects__project_id__settings_evaluate_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EvaluateProjectSettings"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/collaborator_roles": {
        "get": {
          "tags": [
            "projects"
          ],
          "summary": "Get Collaborator Roles",
          "operationId": "get_collaborator_roles_collaborator_roles_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/CollaboratorRoleInfo"
                    },
                    "type": "array",
                    "title": "Response Get Collaborator Roles Collaborator Roles Get"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/projects": {
        "post": {
          "tags": [
            "projects"
          ],
          "summary": "Create Project",
          "description": "Create a new project.",
          "operationId": "create_project_projects_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreate",
                  "examples": [
                    {
                      "name": "my_first_project"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectCreateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "projects"
          ],
          "summary": "Get Projects",
          "description": "Gets projects for a user.\n\nIf provided, filters on project_name and project_type.\n\nDEPRECATED in favor of `get_projects_paginated`.",
          "operationId": "get_projects_projects_get",
          "deprecated": true,
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_name",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Project Name"
              }
            },
            {
              "name": "type",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ProjectType"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Type"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ProjectDB"
                    },
                    "title": "Response Get Projects Projects Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/paginated": {
        "post": {
          "tags": [
            "projects"
          ],
          "summary": "Get Projects Paginated",
          "description": "Gets projects for a user with pagination.\n\nIf provided, filters on project_name and project_type.",
          "operationId": "get_projects_paginated_projects_paginated_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "actions",
              "in": "query",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectAction"
                },
                "description": "Actions to include in the 'permissions' field.",
                "title": "Actions"
              },
              "description": "Actions to include in the 'permissions' field."
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCollectionParams",
                  "default": {
                    "filters": [],
                    "sort": {
                      "name": "created_at",
                      "ascending": false,
                      "sort_type": "column"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetProjectsPaginatedResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/count": {
        "post": {
          "tags": [
            "projects"
          ],
          "summary": "Get Projects Count",
          "description": "Gets total count of projects for a user with applied filters.",
          "operationId": "get_projects_count_projects_count_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCollectionParams",
                  "default": {
                    "filters": [],
                    "sort": {
                      "name": "created_at",
                      "ascending": false,
                      "sort_type": "column"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "integer",
                    "title": "Response Get Projects Count Projects Count Post"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/projects/all": {
        "get": {
          "tags": [
            "projects"
          ],
          "summary": "Get All Projects",
          "description": "Gets all public projects and all private projects that the user has access to.\n\nFor Enterprise SaaS Clusters, this will return all projects in the cluster.\n\nDEPRECATED in favor of `get_projects_paginated`.",
          "operationId": "get_all_projects_projects_all_get",
          "deprecated": true,
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "type",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ProjectType"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Type"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ProjectDBThin"
                    },
                    "title": "Response Get All Projects Projects All Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}": {
        "get": {
          "tags": [
            "projects"
          ],
          "summary": "Get Project",
          "operationId": "get_project_projects__project_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "projects"
          ],
          "summary": "Update Project",
          "operationId": "update_project_projects__project_id__put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUpdate",
                  "examples": [
                    {
                      "name": "my_updated_project"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectUpdateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "projects"
          ],
          "summary": "Delete Project",
          "description": "Deletes a project and all associated runs and objects.\n\nAny user with project access can delete a project.\nNote that `get_project_by_id` calls `user_can_access_project`.",
          "operationId": "delete_project_projects__project_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectDeleteResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/upload_file": {
        "post": {
          "tags": [
            "projects"
          ],
          "summary": "Upload File",
          "operationId": "upload_file_projects__project_id__upload_file_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Body_upload_file_projects__project_id__upload_file_post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/users": {
        "post": {
          "tags": [
            "projects"
          ],
          "summary": "Create User Project Collaborators",
          "description": "Share a project with users.",
          "operationId": "create_user_project_collaborators_projects__project_id__users_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserCollaboratorCreate"
                  },
                  "title": "Body"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UserCollaborator"
                    },
                    "title": "Response Create User Project Collaborators Projects  Project Id  Users Post"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "projects"
          ],
          "summary": "List User Project Collaborators",
          "description": "List the users with which the project has been shared.",
          "operationId": "list_user_project_collaborators_projects__project_id__users_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListUserCollaboratorsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/groups": {
        "post": {
          "tags": [
            "projects"
          ],
          "summary": "Create Group Project Collaborators",
          "description": "Share a project with groups.",
          "operationId": "create_group_project_collaborators_projects__project_id__groups_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupCollaboratorCreate"
                  },
                  "title": "Body"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GroupCollaborator"
                    },
                    "title": "Response Create Group Project Collaborators Projects  Project Id  Groups Post"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "projects"
          ],
          "summary": "List Group Project Collaborators",
          "description": "List the groups with which the project has been shared.",
          "operationId": "list_group_project_collaborators_projects__project_id__groups_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListGroupCollaboratorsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/users/{user_id}": {
        "patch": {
          "tags": [
            "projects"
          ],
          "summary": "Update User Project Collaborator",
          "description": "Update the sharing permissions of a user on a project.",
          "operationId": "update_user_project_collaborator_projects__project_id__users__user_id__patch",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "User Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollaboratorUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserCollaborator"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "projects"
          ],
          "summary": "Delete User Project Collaborator",
          "description": "Remove a user's access to a project.",
          "operationId": "delete_user_project_collaborator_projects__project_id__users__user_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "User Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/groups/{group_id}": {
        "patch": {
          "tags": [
            "projects"
          ],
          "summary": "Update Group Project Collaborator",
          "description": "Update the sharing permissions of a group on a project.",
          "operationId": "update_group_project_collaborator_projects__project_id__groups__group_id__patch",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "group_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Group Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollaboratorUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupCollaborator"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "projects"
          ],
          "summary": "Delete Group Project Collaborator",
          "description": "Remove a group's access to a project.",
          "operationId": "delete_group_project_collaborator_projects__project_id__groups__group_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "group_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Group Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/chains/ingest": {
        "post": {
          "tags": [
            "prompts",
            "chains"
          ],
          "summary": "Ingest Prompt Chain Run",
          "operationId": "ingest_prompt_chain_run_projects__project_id__runs__run_id__chains_ingest_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptChainIngestRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PromptChainIngestResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/chains/ingest/batch": {
        "post": {
          "tags": [
            "prompts",
            "chains"
          ],
          "summary": "Ingest Batch",
          "operationId": "ingest_batch_projects__project_id__runs__run_id__chains_ingest_batch_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptChainIngestBatchRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PromptChainIngestBatchResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/prompts/models/all": {
        "get": {
          "tags": [
            "prompts",
            "models",
            "integrations"
          ],
          "summary": "Get All Models",
          "operationId": "get_all_models_prompts_models_all_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "with_custom_models",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false,
                "title": "With Custom Models"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ModelInfo"
                    },
                    "title": "Response Get All Models Prompts Models All Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/prompts/rows/columnar": {
        "post": {
          "tags": [
            "data",
            "prompts",
            "rows"
          ],
          "summary": "Get Rows As Columns With Filters",
          "operationId": "get_rows_as_columns_with_filters_projects__project_id__runs__run_id__prompts_rows_columnar_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "sort_by",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "_id",
                "title": "Sort By"
              }
            },
            {
              "name": "sort_ascending",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Sort Ascending"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptFilterParams",
                  "default": {
                    "filters": []
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetPromptRowsColumnarResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/prompts/rows/{row_id}/columnar": {
        "get": {
          "tags": [
            "data",
            "prompts",
            "rows"
          ],
          "summary": "Get Row As Column",
          "operationId": "get_row_as_column_projects__project_id__runs__run_id__prompts_rows__row_id__columnar_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "row_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "title": "Row Id"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetPromptRowsColumnarResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/prompts/rows/columnar": {
        "get": {
          "tags": [
            "data",
            "prompts",
            "rows"
          ],
          "summary": "Get Multi Run Sample Ids",
          "description": "Given a list of runs with the same inputs, output the indices of each sample in each run.",
          "operationId": "get_multi_run_sample_ids_projects__project_id__runs_prompts_rows_columnar_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_ids",
              "in": "query",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "minItems": 2,
                "title": "Run Ids"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PromptSampleIDs"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "data",
            "prompts",
            "rows"
          ],
          "summary": "Get Multi Run Samples For Row Ids",
          "description": "Given run_ids with their corresponding row ids, retrieve the samples for those row_ids.",
          "operationId": "get_multi_run_samples_for_row_ids_projects__project_id__runs_prompts_rows_columnar_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer"
                  },
                  "propertyNames": {
                    "format": "uuid4"
                  },
                  "minProperties": 2,
                  "title": "Row Ids"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/GetPromptRowsColumnarResponse"
                    },
                    "propertyNames": {
                      "format": "uuid4"
                    },
                    "title": "Response Get Multi Run Samples For Row Ids Projects  Project Id  Runs Prompts Rows Columnar Post"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/prompts/rows/chains/{chain_id}/columnar": {
        "get": {
          "tags": [
            "data",
            "prompts",
            "rows"
          ],
          "summary": "Get Chain As Columns",
          "operationId": "get_chain_as_columns_projects__project_id__runs__run_id__prompts_rows_chains__chain_id__columnar_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "chain_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid",
                "title": "Chain Id"
              }
            },
            {
              "name": "root",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false,
                "title": "Root"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetPromptRowsColumnarResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/prompts/rows/groups": {
        "get": {
          "tags": [
            "data",
            "prompts",
            "rows"
          ],
          "summary": "Get Groups",
          "operationId": "get_groups_prompts_rows_groups_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/PromptGroupResponse"
                    },
                    "type": "array",
                    "title": "Response Get Groups Prompts Rows Groups Get"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/projects/{project_id}/runs/{run_id}/prompts/export_prompt_dataset": {
        "get": {
          "tags": [
            "data",
            "prompts",
            "rows"
          ],
          "summary": "Export Prompt Dataset",
          "operationId": "export_prompt_dataset_projects__project_id__runs__run_id__prompts_export_prompt_dataset_get",
          "deprecated": true,
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "export_format",
              "in": "query",
              "required": false,
              "schema": {
                "$ref": "#/components/schemas/LLMExportFormat",
                "default": "csv"
              }
            },
            {
              "name": "include_chains",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Include Chains"
              }
            },
            {
              "name": "columns",
              "in": "query",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "Columns"
              }
            },
            {
              "name": "inputs",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Inputs"
              }
            },
            {
              "name": "prompts",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Prompts"
              }
            },
            {
              "name": "responses",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Responses"
              }
            },
            {
              "name": "metrics",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Metrics"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/chains/{chain_id}": {
        "get": {
          "tags": [
            "data",
            "prompts",
            "rows"
          ],
          "summary": "Get Prompt Chain Rows",
          "operationId": "get_prompt_chain_rows_projects__project_id__runs__run_id__chains__chain_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "chain_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Chain Id"
              }
            },
            {
              "name": "task_type",
              "in": "query",
              "required": false,
              "schema": {
                "$ref": "#/components/schemas/TaskType",
                "default": 12
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetPromptRowsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/prompts/rows": {
        "get": {
          "tags": [
            "data",
            "prompts",
            "rows"
          ],
          "summary": "Get Rows",
          "operationId": "get_rows_projects__project_id__runs__run_id__prompts_rows_get",
          "deprecated": true,
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "task_type",
              "in": "query",
              "required": false,
              "schema": {
                "$ref": "#/components/schemas/TaskType",
                "default": 7
              }
            },
            {
              "name": "sort_by",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "_id",
                "title": "Sort By"
              }
            },
            {
              "name": "sort_ascending",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Sort Ascending"
              }
            },
            {
              "name": "text_column",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Text Column"
              }
            },
            {
              "name": "text_pattern",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Text Pattern"
              }
            },
            {
              "name": "regex",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false,
                "title": "Regex"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetPromptRowsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/scorers": {
        "put": {
          "tags": [
            "prompts",
            "models",
            "integrations"
          ],
          "summary": "Submit Scorers",
          "description": "Trigger jobs to recompute a metric based on recompute settings.",
          "operationId": "submit_scorers_projects__project_id__scorers_put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateComputeScoreRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/prompts/scorers/{scorer_name}": {
        "put": {
          "tags": [
            "prompts",
            "models",
            "integrations"
          ],
          "summary": "Put Score",
          "operationId": "put_score_projects__project_id__runs__run_id__prompts_scorers__scorer_name__put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "scorer_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Scorer Name"
              }
            },
            {
              "name": "monitor_batch_id",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "uuid4"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Monitor Batch Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutPromptScoreRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PutPromptScoreResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/templates": {
        "post": {
          "tags": [
            "prompts"
          ],
          "summary": "Create Prompt Template With Version",
          "description": "For a given project, create a prompt template.\n\nWe first create a prompt template version, and then create a prompt template that\npoints to that version as the selected version.\n\nParameters\n----------\nproject_id : UUID4\n    Project ID.\ncurrent_user : User, optional\n    User who sent the request, by default Depends(authentication_service.current_user)\ncreate_request : CreatePromptTemplateWithVersionRequestBody, optional\n    Request body, by default Body( ...,\n        examples=\n        [BasePromptTemplateVersion.test_data() | BasePromptTemplate.test_data()],\n    )\ndb_read : Session, optional\n    Session object to execute DB reads, by default Depends(get_db_read)\n\nReturns\n-------\nCreatePromptTemplateResponse\n    Details about the created prompt template.",
          "operationId": "create_prompt_template_with_version_projects__project_id__templates_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptTemplateWithVersionRequestBody",
                  "examples": [
                    {
                      "template": "tell me a story about {a} and {b}",
                      "name": "test_template"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BasePromptTemplateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "prompts"
          ],
          "summary": "Get Project Templates",
          "description": "Get all prompt templates for a project.\n\nParameters\n----------\nproject_id : UUID4\n    Project ID.\ndb_read : Session, optional\n    Session object to execute DB reads, by default Depends(get_db_read).\n\nReturns\n-------\nList[GetTemplateResponse]\n    List of prompt template responses.",
          "operationId": "get_project_templates_projects__project_id__templates_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/BasePromptTemplateResponse"
                    },
                    "title": "Response Get Project Templates Projects  Project Id  Templates Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/templates/versions": {
        "get": {
          "tags": [
            "prompts"
          ],
          "summary": "Get Template Version By Name",
          "description": "Get a prompt template from a project.\n\nParameters\n----------\nproject_id : UUID4\n    Prokect ID.\ntemplate_name : str\n    Prompt template name.\nversion : Optional[int]\n    Version number to fetch. defaults to selected version.\ndb_read : Session, optional\n    Session object to execute DB reads, by default Depends(get_db_read).\n\n\nReturns\n-------\nGetTemplateResponse\n    Prompt template response.",
          "operationId": "get_template_version_by_name_projects__project_id__templates_versions_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "template_name",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Template Name"
              }
            },
            {
              "name": "version",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Version"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BasePromptTemplateVersionResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/templates/{template_id}": {
        "get": {
          "tags": [
            "prompts"
          ],
          "summary": "Get Template From Project",
          "description": "Get a prompt template from a project.\n\nParameters\n----------\ntemplate_id : UUID4\n    Prompt template ID.\nproject_id : UUID4\n    Prokect ID.\ndb_read : Session, optional\n    Session object to execute DB reads, by default Depends(get_db_read).\n\nReturns\n-------\nGetTemplateResponse\n    Prompt template response.",
          "operationId": "get_template_from_project_projects__project_id__templates__template_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "template_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Template Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BasePromptTemplateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "prompts"
          ],
          "summary": "Delete Template",
          "operationId": "delete_template_projects__project_id__templates__template_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "template_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Template Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeletePromptResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/templates/{template_id}/versions": {
        "post": {
          "tags": [
            "prompts"
          ],
          "summary": "Create Prompt Template Version",
          "description": "Create a prompt template version for a given prompt template.\n\nParameters\n----------\nproject_id : UUID4\n    Project ID.\ntemplate_id : UUID4\n    Prompt template ID.\ncurrent_user : User, optional\n    Authenticated user, by default Depends(authentication_service.current_user)\nbody : dict, optional\n    Body of the request, by default Body( ...,\n        examples=[CreatePromptTemplateVersionRequest.test_data()],\n    )\ndb_read : Session, optional\n    Database session, by default Depends(get_db_read)\n\nReturns\n-------\nBasePromptTemplateVersionResponse\n    Response with details about the created prompt template version.",
          "operationId": "create_prompt_template_version_projects__project_id__templates__template_id__versions_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "template_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Template Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasePromptTemplateVersion",
                  "examples": [
                    {
                      "template": "tell me a story about {a} and {b}"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BasePromptTemplateVersionResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/templates/{template_id}/versions/{version}": {
        "get": {
          "tags": [
            "prompts"
          ],
          "summary": "Get Template Version",
          "description": "Get a specific version of a prompt template.\n\nParameters\n----------\ntemplate_id : UUID4\n    Template ID.\nversion : int\n    Version number to fetch.\ncurrent_user : User, optional\n    User who is authorized, by default Depends(authentication_service.current_user).\ndb_read : Session, optional\n    Database session, by default Depends(get_db_read)\n\nReturns\n-------\nBasePromptTemplateVersionResponse\n    Prompt template version response.",
          "operationId": "get_template_version_projects__project_id__templates__template_id__versions__version__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "template_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Template Id"
              }
            },
            {
              "name": "version",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "title": "Version"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BasePromptTemplateVersionResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "prompts"
          ],
          "summary": "Set Selected Template Version",
          "operationId": "set_selected_template_version_projects__project_id__templates__template_id__versions__version__put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "template_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Template Id"
              }
            },
            {
              "name": "version",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "title": "Version"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BasePromptTemplateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/protect/invoke": {
        "post": {
          "tags": [
            "protect"
          ],
          "summary": "Invoke",
          "operationId": "invoke_protect_invoke_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Response"
                      },
                      {
                        "$ref": "#/components/schemas/InvokeResponse"
                      }
                    ],
                    "title": "Response Invoke Protect Invoke Post"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/registered-scorers": {
        "put": {
          "tags": [
            "scorer",
            "llm"
          ],
          "summary": "Create Or Update",
          "operationId": "create_or_update_registered_scorers_put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "name",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Name"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Body_create_or_update_registered_scorers_put"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateUpdateRegisteredScorerResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "scorer",
            "llm"
          ],
          "summary": "List Scorers",
          "operationId": "list_scorers_registered_scorers_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListRegisteredScorersResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/registered-scorers/{registered_scorer_id}": {
        "delete": {
          "tags": [
            "scorer",
            "llm"
          ],
          "summary": "Delete Scorer",
          "operationId": "delete_scorer_registered_scorers__registered_scorer_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "registered_scorer_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Registered Scorer Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/scorer-settings": {
        "post": {
          "tags": [
            "run_scorer_settings"
          ],
          "summary": "Upsert Scorers Config",
          "operationId": "upsert_scorers_config_projects__project_id__runs__run_id__scorer_settings_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunScorerSettingsRequest-Input"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RunScorerSettingsRequest-Output"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "run_scorer_settings"
          ],
          "summary": "Get Settings",
          "operationId": "get_settings_projects__project_id__runs__run_id__scorer_settings_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RunScorerSettingsRequest-Output"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs": {
        "get": {
          "tags": [
            "runs"
          ],
          "summary": "Get Project Runs",
          "description": "Gets all runs for a project.\n\nIf a run_name is provided, gets the run with that name, or []",
          "operationId": "get_project_runs_projects__project_id__runs_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_name",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Run Name"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RunDB"
                    },
                    "title": "Response Get Project Runs Projects  Project Id  Runs Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "runs"
          ],
          "summary": "Create Run",
          "operationId": "create_run_projects__project_id__runs_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunCreate",
                  "examples": [
                    {
                      "name": "my_first_run"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateRunResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "runs"
          ],
          "summary": "Delete Runs",
          "description": "Deletes runs by their ids.\n\nOnly runs within the same project can be deleted.",
          "operationId": "delete_runs_projects__project_id__runs_delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteRunsRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeleteRunsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/prompts/runs": {
        "get": {
          "tags": [
            "runs"
          ],
          "summary": "Get Project Prompt Runs",
          "description": "Gets all prompt runs for a project.\n\nThis is different from get_project_runs because it adds extra details that are needed for the prompt run page.",
          "operationId": "get_project_prompt_runs_projects__project_id__prompts_runs_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "sort_by",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "id",
                "title": "Sort By"
              }
            },
            {
              "name": "sort_ascending",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Sort Ascending"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetPromptRunsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/prompts/runs/columnar": {
        "get": {
          "tags": [
            "runs"
          ],
          "summary": "Get Project Prompt Runs As Columns",
          "description": "Gets all prompt runs for a project in a columnar format.\n\nThis is different from get_project_prompt_runs because it:\n1. Returns results in a columnar format instead of a key-value pair of arrays.\n2. Includes metadata about each of the columns.\n3. Includes mappings to each column's display names and super column names.",
          "operationId": "get_project_prompt_runs_as_columns_projects__project_id__prompts_runs_columnar_get",
          "deprecated": true,
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "sort_by",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "id",
                "title": "Sort By"
              }
            },
            {
              "name": "sort_ascending",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Sort Ascending"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetPromptRunColumnsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "runs"
          ],
          "summary": "Get Project Prompt Runs As Columns With Filters",
          "description": "Gets all prompt runs for a project in a columnar format.\n\nThis is different from get_project_prompt_runs because it:\n1. Returns results in a columnar format instead of a key-value pair of arrays.\n2. Includes metadata about each of the columns.\n3. Includes mappings to each column's display names and super column names.",
          "operationId": "get_project_prompt_runs_as_columns_with_filters_projects__project_id__prompts_runs_columnar_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "sort_by",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "id",
                "title": "Sort By"
              }
            },
            {
              "name": "sort_ascending",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": true,
                "title": "Sort Ascending"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptFilterParams",
                  "default": {
                    "filters": []
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetPromptRunColumnsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}": {
        "get": {
          "tags": [
            "runs"
          ],
          "summary": "Get Run",
          "operationId": "get_run_projects__project_id__runs__run_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RunDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "runs"
          ],
          "summary": "Update Run",
          "operationId": "update_run_projects__project_id__runs__run_id__put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunUpdateRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateRunResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "runs"
          ],
          "summary": "Delete Run",
          "operationId": "delete_run_projects__project_id__runs__run_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeleteRunResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/prompts/runs/{run_id}": {
        "get": {
          "tags": [
            "runs"
          ],
          "summary": "Get Prompt Run",
          "description": "Gets a specific prompt run for the project.\n\nThis is different from get_project_runs because it adds extra details that are needed for the prompt run page.",
          "operationId": "get_prompt_run_projects__project_id__prompts_runs__run_id__get",
          "deprecated": true,
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetPromptRun"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/link": {
        "get": {
          "tags": [
            "runs"
          ],
          "summary": "Get Run Link",
          "operationId": "get_run_link_projects__project_id__runs__run_id__link_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RunLinkResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/tasks": {
        "get": {
          "tags": [
            "runs"
          ],
          "summary": "Get Run Tasks",
          "description": "Gets tasks for a given multi-label project_id/run_id.\n\nThis is for multi-label runs, otherwise it will raise an exception",
          "operationId": "get_run_tasks_projects__project_id__runs__run_id__tasks_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/labels": {
        "get": {
          "tags": [
            "runs"
          ],
          "summary": "Get Run Labels",
          "description": "Gets labels for a given project_id/run_id.\n\nSplit is not required because labels are the same across splits. If this is a multi-label run, a task is required,\notherwise it is not expected",
          "operationId": "get_run_labels_projects__project_id__runs__run_id__labels_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "task",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Task"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LabelResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/inference_names": {
        "get": {
          "tags": [
            "runs"
          ],
          "summary": "Get Run Inference Names",
          "description": "Gets logged inference names for a given project_id/run_id.\n\nIf no inference names are logged, this will return an empty list",
          "operationId": "get_run_inference_names_projects__project_id__runs__run_id__inference_names_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InferenceNamesResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/epochs": {
        "get": {
          "tags": [
            "runs"
          ],
          "summary": "Get Num Epochs For Run",
          "description": "Gets the number of training epochs for the run.",
          "operationId": "get_num_epochs_for_run_projects__project_id__runs__run_id__split__split__epochs_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "title": "Response Get Num Epochs For Run Projects  Project Id  Runs  Run Id  Split  Split  Epochs Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/splits": {
        "get": {
          "tags": [
            "runs"
          ],
          "summary": "Get Splits",
          "description": "Gets logged splits for a given project_id/run_id.",
          "operationId": "get_splits_projects__project_id__runs__run_id__splits_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetSplitsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/metrics": {
        "put": {
          "tags": [
            "runs"
          ],
          "summary": "Set Metric For Run",
          "description": "Sets or updates a metric for a run.",
          "operationId": "set_metric_for_run_projects__project_id__runs__run_id__metrics_put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunMetricCreateRequest",
                  "examples": [
                    {
                      "key": "train-acc",
                      "value": 0.8,
                      "epoch": 0,
                      "extra": {
                        "cool": "beans"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RunMetricDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "runs"
          ],
          "summary": "Get Metrics For Run",
          "description": "List metrics for a run.\n\nOptionally provide a key to narrow the search",
          "operationId": "get_metrics_for_run_projects__project_id__runs__run_id__metrics_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "key",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Key"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RunMetricDB"
                    },
                    "title": "Response Get Metrics For Run Projects  Project Id  Runs  Run Id  Metrics Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/prompts/metrics": {
        "get": {
          "tags": [
            "runs"
          ],
          "summary": "Get Prompt Aggregate Metrics As Singleton Columns",
          "operationId": "get_prompt_aggregate_metrics_as_singleton_columns_projects__project_id__runs__run_id__prompts_metrics_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetPromptRunColumnsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/tags": {
        "get": {
          "tags": [
            "runs"
          ],
          "summary": "Get Run Tags",
          "description": "Gets tags for a given project_id/run_id.",
          "operationId": "get_run_tags_projects__project_id__runs__run_id__tags_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RunTagDB"
                    },
                    "title": "Response Get Run Tags Projects  Project Id  Runs  Run Id  Tags Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "runs"
          ],
          "summary": "Set Tag For Run",
          "description": "Sets or updates a tag for a run.",
          "operationId": "set_tag_for_run_projects__project_id__runs__run_id__tags_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunTagCreateRequest",
                  "examples": [
                    {
                      "key": "Vector DB",
                      "value": "Pinecone",
                      "tag_type": "rag"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RunTagDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/tags/{tag_id}": {
        "get": {
          "tags": [
            "runs"
          ],
          "summary": "Get Run Tag",
          "description": "Gets tags for a given project_id/run_id.",
          "operationId": "get_run_tag_projects__project_id__runs__run_id__tags__tag_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "tag_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Tag Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RunTagDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "runs"
          ],
          "summary": "Update Tag For Run",
          "description": "Sets or updates a tag for a run.",
          "operationId": "update_tag_for_run_projects__project_id__runs__run_id__tags__tag_id__put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "tag_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Tag Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunTagCreateRequest",
                  "examples": [
                    {
                      "key": "Vector DB",
                      "value": "Pinecone",
                      "tag_type": "rag"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RunTagDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "runs"
          ],
          "summary": "Delete Run Tag",
          "operationId": "delete_run_tag_projects__project_id__runs__run_id__tags__tag_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "tag_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Tag Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeleteRunResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/scorers": {
        "post": {
          "tags": [
            "data",
            "prompts",
            "rows"
          ],
          "summary": "Create",
          "operationId": "create_scorers_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateScorerRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ScorerResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/scorers/{scorer_id}": {
        "patch": {
          "tags": [
            "data",
            "prompts",
            "rows"
          ],
          "summary": "Update",
          "operationId": "update_scorers__scorer_id__patch",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "scorer_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Scorer Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateScorerRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ScorerResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "data",
            "prompts",
            "rows"
          ],
          "summary": "Delete Scorer",
          "operationId": "delete_scorer_scorers__scorer_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "scorer_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Scorer Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeleteScorerResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "data",
            "prompts",
            "rows"
          ],
          "summary": "Get Scorer",
          "operationId": "get_scorer_scorers__scorer_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "scorer_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Scorer Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ScorerResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/scorers/{scorer_id}/version/llm": {
        "post": {
          "tags": [
            "data",
            "prompts",
            "rows"
          ],
          "summary": "Create Llm Scorer Version",
          "operationId": "create_llm_scorer_version_scorers__scorer_id__version_llm_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "scorer_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Scorer Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLLMScorerVersionRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseScorerVersionResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/scorers/{scorer_id}/version/code": {
        "post": {
          "tags": [
            "data",
            "prompts",
            "rows"
          ],
          "summary": "Create Code Scorer Version",
          "operationId": "create_code_scorer_version_scorers__scorer_id__version_code_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "scorer_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Scorer Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Body_create_code_scorer_version_scorers__scorer_id__version_code_post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseScorerVersionResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "data",
            "prompts",
            "rows"
          ],
          "summary": "Get Scorer Version Code",
          "operationId": "get_scorer_version_code_scorers__scorer_id__version_code_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "scorer_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Scorer Id"
              }
            },
            {
              "name": "version",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "version number, defaults to latest version",
                "title": "Version"
              },
              "description": "version number, defaults to latest version"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/scorers/list": {
        "post": {
          "tags": [
            "data",
            "prompts",
            "rows"
          ],
          "summary": "List Scorers With Filters",
          "operationId": "list_scorers_with_filters_scorers_list_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListScorersRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListScorersResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/scorers/tags": {
        "get": {
          "tags": [
            "data",
            "prompts",
            "rows"
          ],
          "summary": "List Tags",
          "operationId": "list_tags_scorers_tags_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "title": "Response List Tags Scorers Tags Get"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/scorers/{scorer_id}/version": {
        "get": {
          "tags": [
            "data",
            "prompts",
            "rows"
          ],
          "summary": "Get Scorer Version Or Latest",
          "operationId": "get_scorer_version_or_latest_scorers__scorer_id__version_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "scorer_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Scorer Id"
              }
            },
            {
              "name": "version",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "title": "Version"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseScorerVersionResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/slices": {
        "get": {
          "tags": [
            "slices"
          ],
          "summary": "Get Project Slices",
          "description": "Gets all slices in a project.\n\nIf slice_name is provided, returns the slice with that name, else []",
          "operationId": "get_project_slices_projects__project_id__slices_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "slice_name",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Slice Name"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SliceDB"
                    },
                    "title": "Response Get Project Slices Projects  Project Id  Slices Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "slices"
          ],
          "summary": "Create Slice",
          "description": "Creates a Slice.\n\nThe \"logic\" field of a slice should be dictionary that matches the fields of a ProcRequest (without the project,\nrun, or split). On request, the logic will be validated. The returned Slice's \"logic\" field should fit directly into\na ProcRequest (barring the run_id and Split. Those must be provided by the client).",
          "operationId": "create_slice_projects__project_id__slices_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SliceCreate",
                  "examples": [
                    {
                      "name": "my_first_slice",
                      "logic": {
                        "similar_to": 5,
                        "misclassified_only": true,
                        "data_error_potential_low": 0.3
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SliceCreateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/split/{split}/slices": {
        "get": {
          "tags": [
            "slices"
          ],
          "summary": "Get Slice Metrics For Run",
          "description": "Gets all slices in specific run.\n\nWe apply the logic and compute metrics for each slice.",
          "operationId": "get_slice_metrics_for_run_projects__project_id__runs__run_id__split__split__slices_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "split",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/Split"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "inference_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "default": "",
                "title": "Inference Name"
              }
            },
            {
              "name": "task",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Task"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SliceMetrics"
                    },
                    "title": "Response Get Slice Metrics For Run Projects  Project Id  Runs  Run Id  Split  Split  Slices Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/slices/{slice_id}": {
        "get": {
          "tags": [
            "slices"
          ],
          "summary": "Get Slice",
          "description": "Gets a slice.\n\nThe returned slice will have a \"logic\" field that will be directly usable in a ProcRequest (barring the run_id and\nSplit. Those must be provided by the client).",
          "operationId": "get_slice_projects__project_id__slices__slice_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "slice_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Slice Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SliceDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "slices"
          ],
          "summary": "Update Slice",
          "description": "Updates a slice.\n\nWhen updating a slice, you cannot update individual fields. You must update the ENTIRE slice. Meaning whatever is\nsent in the request will become the new slice.",
          "operationId": "update_slice_projects__project_id__slices__slice_id__put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "slice_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Slice Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SliceUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SliceUpdateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "slices"
          ],
          "summary": "Delete Slice",
          "operationId": "delete_slice_projects__project_id__slices__slice_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "slice_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Slice Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SliceDeleteResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/stages": {
        "post": {
          "tags": [
            "protect",
            "stage"
          ],
          "summary": "Create Stage",
          "operationId": "create_stage_projects__project_id__stages_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StageWithRulesets"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StageDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "protect",
            "stage"
          ],
          "summary": "Get Stage",
          "operationId": "get_stage_projects__project_id__stages_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "stage_name",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Stage Name"
              }
            },
            {
              "name": "stage_id",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "uuid4"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Stage Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StageDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/stages/{stage_id}": {
        "post": {
          "tags": [
            "protect",
            "stage"
          ],
          "summary": "Update Stage",
          "operationId": "update_stage_projects__project_id__stages__stage_id__post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "stage_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Stage Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RulesetsMixin"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StageDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "protect",
            "stage"
          ],
          "summary": "Pause Stage",
          "operationId": "pause_stage_projects__project_id__stages__stage_id__put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "stage_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Stage Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "pause",
              "in": "query",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false,
                "title": "Pause"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StageDB"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/current_system_user": {
        "get": {
          "tags": [
            "system_users"
          ],
          "summary": "Current System User",
          "operationId": "current_system_user_current_system_user_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SystemUserDB"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/current_system_user/organizations": {
        "get": {
          "tags": [
            "system_users"
          ],
          "summary": "Current System User Organizations",
          "operationId": "current_system_user_organizations_current_system_user_organizations_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListOrganizationsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/traces": {
        "post": {
          "tags": [
            "trace"
          ],
          "summary": "Log Traces",
          "operationId": "log_traces_projects__project_id__traces_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogRecordsIngestRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogRecordsIngestResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/traces/available_columns": {
        "post": {
          "tags": [
            "trace"
          ],
          "summary": "Traces Available Columns",
          "operationId": "traces_available_columns_projects__project_id__traces_available_columns_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogRecordsAvailableColumnsRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogRecordsAvailableColumnsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/spans/available_columns": {
        "post": {
          "tags": [
            "trace"
          ],
          "summary": "Spans Available Columns",
          "operationId": "spans_available_columns_projects__project_id__spans_available_columns_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogRecordsAvailableColumnsRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogRecordsAvailableColumnsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/traces/search": {
        "post": {
          "tags": [
            "trace"
          ],
          "summary": "Query Traces",
          "operationId": "query_traces_projects__project_id__traces_search_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogRecordsQueryRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogRecordsQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/spans/search": {
        "post": {
          "tags": [
            "trace"
          ],
          "summary": "Query Spans",
          "operationId": "query_spans_projects__project_id__spans_search_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogRecordsQueryRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogRecordsQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/traces/{trace_id}": {
        "get": {
          "tags": [
            "trace"
          ],
          "summary": "Get Trace",
          "operationId": "get_trace_projects__project_id__traces__trace_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "trace_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Trace Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TraceRecordWithChildren"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/spans/{span_id}": {
        "get": {
          "tags": [
            "trace"
          ],
          "summary": "Get Span",
          "operationId": "get_span_projects__project_id__spans__span_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "span_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Span Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/WorkflowSpanRecordWithChildren"
                      },
                      {
                        "$ref": "#/components/schemas/LlmSpanRecord"
                      },
                      {
                        "$ref": "#/components/schemas/ToolSpanRecord"
                      },
                      {
                        "$ref": "#/components/schemas/RetrieverSpanRecord"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type",
                      "mapping": {
                        "workflow": "#/components/schemas/WorkflowSpanRecordWithChildren",
                        "llm": "#/components/schemas/LlmSpanRecord",
                        "tool": "#/components/schemas/ToolSpanRecord",
                        "retriever": "#/components/schemas/RetrieverSpanRecord"
                      }
                    },
                    "title": "Response Get Span Projects  Project Id  Spans  Span Id  Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/models/{model_id}": {
        "get": {
          "tags": [
            "models"
          ],
          "summary": "Get Model Endpoint",
          "description": "Gets a model from the database and returns the presigned url to download it :param project_id: project id :param\nrun_id: run id :param model_id: model id :param db_read: database session :param current_user: current user.",
          "operationId": "get_model_endpoint_models__model_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "model_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Model Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TrainingModelResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/models": {
        "get": {
          "tags": [
            "models"
          ],
          "summary": "Get All Models",
          "description": "Gets all models for a run :param project_id: project id :param run_id: run id :param db_read: database session\n:param current_user: current user.",
          "operationId": "get_all_models_models_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TrainingModelResponse"
                    },
                    "title": "Response Get All Models Models Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/runs/{run_id}/model": {
        "post": {
          "tags": [
            "models"
          ],
          "summary": "Upload Model",
          "description": "Uploads a model to the object store and creates a model record in the database :param project_id: project id\n:param run_id: run id :param validation_request: model upload request.",
          "operationId": "upload_model_projects__project_id__runs__run_id__model_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadModel"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UploadModelResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "models"
          ],
          "summary": "Get Model By Run",
          "description": "Gets a model from the database and returns the presigned url to download it :param run_id: run id :param db_read:\n\ndatabase session.",
          "operationId": "get_model_by_run_projects__project_id__runs__run_id__model_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "run_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Run Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TrainingModelResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/models/all": {
        "get": {
          "tags": [
            "models"
          ],
          "summary": "Get All Models For Project",
          "description": "Gets all models for a run :param project_id: project id :param run_id: run id :param db_read: database\nsession.",
          "operationId": "get_all_models_for_project_projects__project_id__models_all_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TrainingModelResponse"
                    },
                    "title": "Response Get All Models For Project Projects  Project Id  Models All Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/projects/{project_id}/bookmark": {
        "put": {
          "tags": [
            "projects",
            "user"
          ],
          "summary": "Bookmark Project",
          "operationId": "bookmark_project_projects__project_id__bookmark_put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "projects",
            "user"
          ],
          "summary": "Unbookmark Project",
          "operationId": "unbookmark_project_projects__project_id__bookmark_delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
  
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/usage_limits": {
        "get": {
          "tags": [
            "usage_limits"
          ],
          "summary": "Get Usage Limits",
          "operationId": "get_usage_limits_usage_limits_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "starting_token",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 0,
                "title": "Starting Token"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "default": 100,
                "title": "Limit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListUsageLimitsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/usage_limits/{usage_limit_name}": {
        "patch": {
          "tags": [
            "usage_limits"
          ],
          "summary": "Update Usage Limit",
          "operationId": "update_usage_limit_usage_limits__usage_limit_name__patch",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "usage_limit_name",
              "in": "path",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/UsageLimitNames"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUsageLimitRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UsageLimit"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/healthcheck": {
        "get": {
          "tags": [
            "health"
          ],
          "summary": "Healthcheck",
          "operationId": "healthcheck_v1_healthcheck_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HealthcheckResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/token": {
        "get": {
          "tags": [
            "auth"
          ],
          "summary": "Get Token",
          "operationId": "get_token_v1_token_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "organization_id",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "uuid4"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Organization Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetTokenResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/evaluate/runs": {
        "post": {
          "tags": [
            "evaluate"
          ],
          "summary": "Create Workflows Run",
          "description": "Create a new Evaluate run with workflows.\n\nUse this endpoint to create a new Evaluate run with workflows. The request body should contain the `workflows` to be ingested and evaluated.\n\nAdditionally, specify the `project_id` or `project_name` to which the workflows should be ingested. If the project does not exist, it will be created. If the project exists, the workflows will be logged to it. If both `project_id` and `project_name` are provided, `project_id` will take precedence. The `run_name` is optional and will be auto-generated (timestamp-based) if not provided.\n\nThe body is also expected to include the configuration for the scorers to be used in the evaluation. This configuration will be used to evaluate the workflows and generate the results.",
          "operationId": "create_workflows_run_v1_evaluate_runs_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluateRunRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EvaluateRunResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/v1/evaluate/run-workflows": {
        "post": {
          "tags": [
            "evaluate"
          ],
          "summary": "Get Evaluate Run Results",
          "description": "Fetch evaluation results for a specific run including rows and aggregate information.",
          "operationId": "get_evaluate_run_results_v1_evaluate_run_workflows_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluateRunResultsRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowsReadResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/v1/observe/workflows": {
        "post": {
          "tags": [
            "observe"
          ],
          "summary": "Log Workflows",
          "description": "Log workflows to an Observe project.\n\nUse this endpoint to log workflows to an Observe project. The request body should contain the\n`workflows` to be ingested.\n\nAdditionally, specify the `project_id` or `project_name` to which the workflows should be ingested.\nIf the project does not exist, it will be created. If the project exists, the workflows will be logged to it.\nIf both `project_id` and `project_name` are provided, `project_id` will take precedence.",
          "operationId": "log_workflows_v1_observe_workflows_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowsIngestRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowsIngestResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/v1/observe/projects/{project_id}/workflows": {
        "post": {
          "tags": [
            "observe"
          ],
          "summary": "Get Workflows",
          "description": "Get workflows for a specific run in an Observe project.",
          "operationId": "get_workflows_v1_observe_projects__project_id__workflows_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            },
            {
              "name": "start_time",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Start Time"
              }
            },
            {
              "name": "end_time",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "End Time"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetObserveWorkflowsRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowsReadResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/protect/invoke": {
        "post": {
          "tags": [
            "protect"
          ],
          "summary": "Invoke",
          "operationId": "invoke_v1_protect_invoke_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Response"
                      },
                      {
                        "$ref": "#/components/schemas/InvokeResponse"
                      }
                    ],
                    "title": "Response Invoke V1 Protect Invoke Post"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ]
        }
      },
      "/v2/healthcheck": {
        "get": {
          "tags": [
            "health"
          ],
          "summary": "Healthcheck",
          "operationId": "healthcheck_v2_healthcheck_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HealthcheckResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v2/token": {
        "get": {
          "tags": [
            "auth"
          ],
          "summary": "Get Token",
          "operationId": "get_token_v2_token_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "organization_id",
              "in": "query",
              "required": false,
              "schema": {
                "anyOf": [
                  {
                    "type": "string",
                    "format": "uuid4"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Organization Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetTokenResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/v2/projects/{project_id}/traces": {
        "post": {
          "tags": [
            "trace"
          ],
          "summary": "Log Traces",
          "operationId": "log_traces_v2_projects__project_id__traces_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogRecordsIngestRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogRecordsIngestResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/v2/projects/{project_id}/traces/available_columns": {
        "post": {
          "tags": [
            "trace"
          ],
          "summary": "Traces Available Columns",
          "operationId": "traces_available_columns_v2_projects__project_id__traces_available_columns_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogRecordsAvailableColumnsRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogRecordsAvailableColumnsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/v2/projects/{project_id}/spans/available_columns": {
        "post": {
          "tags": [
            "trace"
          ],
          "summary": "Spans Available Columns",
          "operationId": "spans_available_columns_v2_projects__project_id__spans_available_columns_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogRecordsAvailableColumnsRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogRecordsAvailableColumnsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/v2/projects/{project_id}/traces/search": {
        "post": {
          "tags": [
            "trace"
          ],
          "summary": "Query Traces",
          "operationId": "query_traces_v2_projects__project_id__traces_search_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogRecordsQueryRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogRecordsQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/v2/projects/{project_id}/spans/search": {
        "post": {
          "tags": [
            "trace"
          ],
          "summary": "Query Spans",
          "operationId": "query_spans_v2_projects__project_id__spans_search_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogRecordsQueryRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogRecordsQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/v2/projects/{project_id}/traces/{trace_id}": {
        "get": {
          "tags": [
            "trace"
          ],
          "summary": "Get Trace",
          "operationId": "get_trace_v2_projects__project_id__traces__trace_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "trace_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Trace Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TraceRecordWithChildren"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/v2/projects/{project_id}/spans/{span_id}": {
        "get": {
          "tags": [
            "trace"
          ],
          "summary": "Get Span",
          "operationId": "get_span_v2_projects__project_id__spans__span_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "span_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Span Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/WorkflowSpanRecordWithChildren"
                      },
                      {
                        "$ref": "#/components/schemas/LlmSpanRecord"
                      },
                      {
                        "$ref": "#/components/schemas/ToolSpanRecord"
                      },
                      {
                        "$ref": "#/components/schemas/RetrieverSpanRecord"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type",
                      "mapping": {
                        "workflow": "#/components/schemas/WorkflowSpanRecordWithChildren",
                        "llm": "#/components/schemas/LlmSpanRecord",
                        "tool": "#/components/schemas/ToolSpanRecord",
                        "retriever": "#/components/schemas/RetrieverSpanRecord"
                      }
                    },
                    "title": "Response Get Span V2 Projects  Project Id  Spans  Span Id  Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/v2/projects/{project_id}/log_streams": {
        "post": {
          "tags": [
            "log_stream"
          ],
          "summary": "Create Log Stream",
          "description": "Create a new log stream for a project.",
          "operationId": "create_log_stream_v2_projects__project_id__log_streams_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogStreamCreateRequest",
                  "examples": [
                    {
                      "name": "my_first_log_stream"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogStreamResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "log_stream"
          ],
          "summary": "List Log Streams",
          "description": "Retrieve all log streams for a project.",
          "operationId": "list_log_streams_v2_projects__project_id__log_streams_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LogStreamResponse"
                    },
                    "title": "Response List Log Streams V2 Projects  Project Id  Log Streams Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/v2/projects/{project_id}/log_streams/{log_stream_id}": {
        "get": {
          "tags": [
            "log_stream"
          ],
          "summary": "Get Log Stream",
          "description": "Retrieve a specific log stream.",
          "operationId": "get_log_stream_v2_projects__project_id__log_streams__log_stream_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "log_stream_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Log Stream Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogStreamResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "log_stream"
          ],
          "summary": "Update Log Stream",
          "description": "Update a specific log stream.",
          "operationId": "update_log_stream_v2_projects__project_id__log_streams__log_stream_id__put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "log_stream_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Log Stream Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogStreamUpdateRequest",
                  "examples": [
                    {
                      "name": "my_first_log_stream"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogStreamResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "log_stream"
          ],
          "summary": "Delete Log Stream",
          "description": "Delete a specific log stream.",
          "operationId": "delete_log_stream_v2_projects__project_id__log_streams__log_stream_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "log_stream_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Log Stream Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Successful Response"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/v2/projects/{project_id}/experiments": {
        "post": {
          "tags": [
            "experiment"
          ],
          "summary": "Create Experiment",
          "description": "Create a new experiment for a project.",
          "operationId": "create_experiment_v2_projects__project_id__experiments_post",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperimentCreateRequest",
                  "examples": [
                    {
                      "name": "my_first_experiment"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExperimentResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "experiment"
          ],
          "summary": "List Experiments",
          "description": "Retrieve all experiments for a project.",
          "operationId": "list_experiments_v2_projects__project_id__experiments_get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExperimentResponse"
                    },
                    "title": "Response List Experiments V2 Projects  Project Id  Experiments Get"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      },
      "/v2/projects/{project_id}/experiments/{experiment_id}": {
        "get": {
          "tags": [
            "experiment"
          ],
          "summary": "Get Experiment",
          "description": "Retrieve a specific experiment.",
          "operationId": "get_experiment_v2_projects__project_id__experiments__experiment_id__get",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "experiment_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Experiment Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExperimentResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "experiment"
          ],
          "summary": "Update Experiment",
          "description": "Update a specific experiment.",
          "operationId": "update_experiment_v2_projects__project_id__experiments__experiment_id__put",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "experiment_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Experiment Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperimentUpdateRequest",
                  "examples": [
                    {
                      "name": "my_first_experiment"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExperimentResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "experiment"
          ],
          "summary": "Delete Experiment",
          "description": "Delete a specific experiment.",
          "operationId": "delete_experiment_v2_projects__project_id__experiments__experiment_id__delete",
          "security": [
            {
              "APIKeyHeader": []
            },
            {
              "OAuth2PasswordBearer": []
            },
            {
              "HTTPBasic": []
            }
          ],
          "parameters": [
            {
              "name": "experiment_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Experiment Id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid4",
                "title": "Project Id"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Successful Response"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "ActionResult": {
          "properties": {
            "type": {
              "$ref": "#/components/schemas/ActionType",
              "description": "Type of action that was taken."
            },
            "value": {
              "type": "string",
              "title": "Value",
              "description": "Value of the action that was taken."
            }
          },
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "title": "ActionResult"
        },
        "ActionType": {
          "type": "string",
          "enum": [
            "OVERRIDE",
            "PASSTHROUGH"
          ],
          "title": "ActionType"
        },
        "AgentStep": {
          "properties": {
            "type": {
              "type": "string",
              "const": "agent",
              "title": "Type",
              "description": "Type of the step. By default, it is set to agent.",
              "default": "agent"
            },
            "input": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/Document-Input"
                },
                {
                  "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                },
                {
                  "type": "object"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/Document-Input"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                }
              ],
              "title": "Input",
              "description": "Input to the step."
            },
            "output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/Document-Input"
                },
                {
                  "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                },
                {
                  "type": "object"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/Document-Input"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                }
              ],
              "title": "Output",
              "description": "Output of the step.",
              "default": ""
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at_ns": {
              "type": "integer",
              "title": "Created At Ns",
              "description": "Timestamp of the step's creation, as nanoseconds since epoch."
            },
            "duration_ns": {
              "type": "integer",
              "title": "Duration Ns",
              "description": "Duration of the step in nanoseconds.",
              "default": 0
            },
            "metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "Metadata",
              "description": "Metadata associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "ground_truth": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ground Truth",
              "description": "Ground truth expected output for the step."
            },
            "steps": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WorkflowStep"
                  },
                  {
                    "$ref": "#/components/schemas/ChainStep"
                  },
                  {
                    "$ref": "#/components/schemas/LlmStep"
                  },
                  {
                    "$ref": "#/components/schemas/RetrieverStep"
                  },
                  {
                    "$ref": "#/components/schemas/ToolStep"
                  },
                  {
                    "$ref": "#/components/schemas/AgentStep"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "agent": "#/components/schemas/AgentStep",
                    "chain": "#/components/schemas/ChainStep",
                    "llm": "#/components/schemas/LlmStep",
                    "retriever": "#/components/schemas/RetrieverStep",
                    "tool": "#/components/schemas/ToolStep",
                    "workflow": "#/components/schemas/WorkflowStep"
                  }
                }
              },
              "type": "array",
              "title": "Steps",
              "description": "Steps in the workflow."
            },
            "parent": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/StepWithChildren"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Parent node of the current node. For internal use only."
            }
          },
          "type": "object",
          "required": [
            "input"
          ],
          "title": "AgentStep"
        },
        "AgenticSessionSuccessScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "agentic_session_success",
              "title": "Name",
              "default": "agentic_session_success"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            },
            "type": {
              "type": "string",
              "const": "plus",
              "title": "Type",
              "default": "plus"
            },
            "model_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Name",
              "description": "Alias of the model to use for the scorer."
            },
            "num_judges": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 10,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Judges",
              "description": "Number of judges for the scorer."
            }
          },
          "type": "object",
          "title": "AgenticSessionSuccessScorer"
        },
        "AgenticSessionSuccessTemplate": {
          "properties": {
            "metric_system_prompt": {
              "type": "string",
              "title": "Metric System Prompt",
              "default": "You will receive the complete chat history from a chatbot application between a user and an assistant.\n\nIn the chat history, the user will ask questions, which are answered with words, or make requests that require calling tools and resolving actions. Sometimes these are given as orders; treat them as if they were questions or requests. Each assistant turn may involve several steps that combine internal reflections, planning steps, selecting tools, and calling tools, and should always end with the assistant replying back to the user.\n\nYou will analyze the entire chat history and will respond back in the following JSON format:\n```json\n{\n    \"all_user_asks\": list[string],\n    \"tasks\": list[dict],\n    \"ai_answered_all_asks\": boolean,\n    \"explanation\": string\n}\n```\nwhere I will now explain how to populate each field.\n\n# Populating: all_user_asks\n\nPopulate `all_user_asks` with a list containing every user ask from the chat history. Review the chat history and generate a list with one entry for each user question, request, order, follow-up, clarification, etc. Ensure that every user ask is a separate item, even if this requires splitting the text mid-sentence. Each item should include enough context to be understandable on its own. It is acceptable to have shared context between items and to incorporate parts of sentences as needed.\n\n# Populating: Tasks\n\nThis is the most complex field to populate. You will write a JSON array where each element is called a task and follows the schema:\n\n```json\n{\n    \"initial_user_ask\": string,\n    \"user_ask_refinements\": list[string],\n    \"final_user_ask\": string,\n    \"direct_answer\": string,\n    \"indirect_answer\": string,\n    \"tools_input_output\": list[string],\n    \"properties\" : {\n        \"coherent\": boolean,\n        \"factually_correct\": boolean,\n        \"comprehensively_answers_final_user_ask\": boolean,\n        \"does_not_contradict_tools_output\": boolean,\n        \"tools_output_summary_is_accurate\": boolean,\n    },\n    \"boolean_properties\": list[boolean],\n    \"answer_satisfies_properties\": boolean\n}\n```\n\nThe high-level goal is to list all tasks and their resolutions and to determine whether each task has been successfully accomplished.\n\n## Step 1: initial_user_ask, user_ask_refinements and final_user_ask\n\nFirst, identify the `initial_user_ask` that starts the task, as well as any `user_ask_refinements` related to the same task. To do this, first loop through the entries in `all_user_asks`. If an entry already appears in a previous task, ignore it; otherwise, consider it as the `initial_user_ask`. Next, examine the remaining entries in `all_user_asks` and fill `user_ask_refinements` with all those related to the `initial_user_ask`, meaning they either refine it or continue the same ask.\n\nFinally, create a coherent `final_user_ask` containing the most updated version of the ask by starting with the initial one and incorporating or replacing any parts with their refinements. This will be the ask that the assistant will attempt to answer.\n\n## Step 2: direct_answer and indirect_answer\n\nExtract every direct and indirect answer that responds to the `final_user_ask`.\n\nAn indirect answer is a part of the assistant's reponse that tries to respond to `final_user_ask` and satisfies any of the following:\n- it mentions limitations or the inability to complete the `final_user_ask`,\n- it references a failed attempt to complete the `final_user_ask`,\n- it suggests offering help with a different ask than the `final_user_ask`,\n- it requests further information or clarifications from the user.\nAdd any piece of the assistant's response looking like an indirect answer to `indirect_answer`.\n\nA direct answer is a part of an assistant's response that either:\n- directly responds to the `final_user_ask`,\n- confirms a successful resolution of the `final_user_ask`.\nIf there are multiple direct answers, simply concatenate them into a longer answer. If there are no direct answers satisfying the above conditions, leave the field `direct_answer` empty.\n\nNote that a piece of an answer cannot be both direct and indirect, you should pick the field in which to add it.\n\n## Step 3: tools_input_output\n\nIf `direct_answer` is empty, skip this step.\n\nExamine each assistant step and identify which tool or function output seemingly contributed to creating any part of the answer from `direct_answer`. If an assistant step immediately before or after the tool call mentions using or having used the tool for answering the `final_user_ask`, the tool call should be associated with this ask. Additionally, if any part of the answer closely aligns with the output of a tool, the tool call should also be associated with this ask.\n\nCreate a list containing the concatenated input and output of each tool used in formulating any part of the answer from `direct_answer`. The tool input is noted as an assistant step before calling the tool, and the tool output is recorded as a tool step.\n\n## Step 4: properties, boolean_properties and answer_satisfies_properties\n\nIf `direct_answer` is empty, set every boolean in `properties`, `boolean_properties` and `answer_satisfies_properties` to `false`.\n\nFor each part of the answer from `direct_answer`, evaluate the following properties one by one to determine which are satisfied and which are not:\n\n- **coherent**: The answer is coherent with itself and does not contain internal contradictions.\n- **factually_correct**: The parts of the answer that do not come from the output of a tool are factually correct.\n- **comprehensively_answers_final_user_ask**: The answer specifically responds to the `final_user_ask`, carefully addressing every aspect of the ask without deviation or omission, ensuring that no details or parts of the ask are left unanswered.\n- **does_not_contradict_tools_output**: No citation of a tool's output contradict any text from `tools_input_output`.\n- **tools_output_summary_is_accurate**: Every summary of a tool's output is accurate with the tool's output from `tools_input_output`. In particular it does not omit critical information relevant to the `final_user_ask` and does not contain made-up information.\n\nAfter assessing each of these properties, copy the resulting boolean values into the list `boolean_properties`.\n\nFinally, set `answer_satisfies_properties` to `false` if any entry in `boolean_properties` is set to `false`; otherwise, set `answer_satisfies_properties` to `true`.\n\n# Populating: ai_answered_all_asks\n\nRespond `true` if every task has `answer_satisfies_properties` set to `true`, otherwise respond `false`. If `all_user_asks` is empty, set `answer_satisfies_properties` to `true`.\n\n# Populating: explanation\n\nIf any user ask has `answer_satisfies_properties` set to `false`, explain why it didn't satisfy all the properties. Otherwise summarize in a few words each ask and the provided answer.\n\nIf `all_user_asks` is empty, mention that you did not find any user ask. If `direct_answer` is empty, mention that no resultion to the `final_user_ask` was provided.\n\nYou must respond with a valid JSON object; be sure to escape special characters."
            },
            "metric_description": {
              "type": "string",
              "title": "Metric Description",
              "default": "I have a multi-turn chatbot application where the assistant is an agent that has access to tools. I want a metric that assesses whether the session should be considered successful, in the sense that the assistant fully answered or resolved all user queries and requests."
            },
            "value_field_name": {
              "type": "string",
              "title": "Value Field Name",
              "default": "ai_answered_all_asks"
            },
            "explanation_field_name": {
              "type": "string",
              "title": "Explanation Field Name",
              "description": "Field name to look for in the chainpoll response, for the explanation.",
              "default": "explanation"
            },
            "template": {
              "type": "string",
              "title": "Template",
              "default": "Here is a the chatbot history:\n```\n{query}\n```\nNow perform the evaluation on the chat history as described in the system prompt."
            },
            "metric_few_shot_examples": {
              "items": {
                "$ref": "#/components/schemas/FewShotExample"
              },
              "type": "array",
              "title": "Metric Few Shot Examples",
              "default": [
                {
                  "generation_prompt_and_response": "Here is a the chatbot history:\n```\nuser: Can you analyze the sentiment of the sentence 'I am really excited about our new project'? Additionally, fetch a random word of type adverb from the Random Word API.\nBegin!\nassistant: I am calling the \"main_for_neuronet_nlp\" function with the argument of the sentence \"I am really excited about our new project\". By doing this, I can analyze the sentiment of the sentence and gain insights into the emotional tone expressed. Additionally, I will use the Neuronet NLP tool to tokenize, split sentences, and perform part-of-speech tagging and named entity recognition for the Azerbaijan language. This will allow me to further analyze the sentence and provide more detailed information about its structure and context.\nassistant: {'arguments': '{\\n  \"text\": \"I am really excited about our new project\"\\n}', 'name': 'main_for_neuronet_nlp'}\nfunction: {\"error\": \"\", \"response\": \"{0: {'lemma': '\\u0131', 'text': 'I', 'dep': 'nsubj', 'pos': 'NUM', 'tag': 'NUM__Number=Sing|NumForm=Roman|NumType=Ord'}, 1: {'lemma': 'a', 'text': 'am', 'dep': 'punct', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 2: {'lemma': 'really', 'text': 'really', 'dep': 'amod', 'pos': 'ADJ', 'tag': 'ADJ__Number=Sing'}, 3: {'lemma': 'excited', 'text': 'excited', 'dep': 'obj', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 4: {'lemma': 'about', 'text': 'about', 'dep': 'obj', 'pos': 'PROPN', 'tag': 'PROPN__NameType=Giv|Number=Sing'}, 5: {'lemma': 'our', 'text': 'our', 'dep': 'appos', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 6: {'lemma': 'new', 'text': 'new', 'dep': 'ROOT', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 7: {'lemma': 'project', 'text': 'project', 'dep': 'compound', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 8: {'lemma': '.', 'text': '.', 'dep': 'punct', 'pos': 'PUNCT', 'tag': 'PUNCT___'}}\"}\nassistant: The previous assistant message explains that the current API call is made to the \"v1_randomword_for_random_word_by_api_ninjas\" function. The purpose of this call is to fetch a random word of type adverb from the Random Word API. By doing this, I can provide the user with an interesting and unique adverb that can be used in their query or sentence. This will add more variety and creativity to their language, enhancing the overall user experience.\nassistant: {'arguments': '{}', 'name': 'v1_randomword_for_random_word_by_api_ninjas'}\nfunction: {\"error\": \"\", \"response\": \"{'word': 'incarnadine'}\"}\nassistant: The sentiment of the sentence 'I am really excited about our new project' is positive. The random word of type adverb is 'incarnadine'.\n```",
                  "evaluating_response": "```json\n{\n    \"all_user_asks\": [\n        \"Can you analyze the sentiment of the sentence 'I am really excited about our new project'?\",\n        \"Additionally, fetch a random word of type adverb from the Random Word API.\"\n    ],\n    \"tasks\": [\n        {\n            \"initial_user_ask\": \"Can you analyze the sentiment of the sentence 'I am really excited about our new project'?\",\n            \"user_ask_refinements\": [],\n            \"final_user_ask\": \"Can you analyze the sentiment of the sentence 'I am really excited about our new project'?\",\n            \"direct_answer\": \"The sentiment of the sentence 'I am really excited about our new project' is positive.\",\n            \"indirect_answer\": \"\",\n            \"tools_input_output\": [\n                \"{'arguments': '{\\\\n  \\\"text\\\": \\\"I am really excited about our new project\\\"\\\\n}', 'name': 'main_for_neuronet_nlp'} function: {\\\"error\\\": \\\"\\\", \\\"response\\\": \\\"{0: {'lemma': '\\\\u0131', 'text': 'I', 'dep': 'nsubj', 'pos': 'NUM', 'tag': 'NUM__Number=Sing|NumForm=Roman|NumType=Ord'}, 1: {'lemma': 'a', 'text': 'am', 'dep': 'punct', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 2: {'lemma': 'really', 'text': 'really', 'dep': 'amod', 'pos': 'ADJ', 'tag': 'ADJ__Number=Sing'}, 3: {'lemma': 'excited', 'text': 'excited', 'dep': 'obj', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 4: {'lemma': 'about', 'text': 'about', 'dep': 'obj', 'pos': 'PROPN', 'tag': 'PROPN__NameType=Giv|Number=Sing'}, 5: {'lemma': 'our', 'text': 'our', 'dep': 'appos', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 6: {'lemma': 'new', 'text': 'new', 'dep': 'ROOT', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 7: {'lemma': 'project', 'text': 'project', 'dep': 'compound', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 8: {'lemma': '.', 'text': '.', 'dep': 'punct', 'pos': 'PUNCT', 'tag': 'PUNCT___'}}\\\"}\"\n            ],\n            \"properties\": {      \n                \"coherent\": true,\n                \"factually_correct\": false,\n                \"comprehensively_answers_final_user_ask\": true,\n                \"does_not_contradict_tools_output\": true,\n                \"tools_output_summary_is_accurate\": false\n            },\n            \"boolean_properties\": [true, false, true, true, false],\n            \"answer_satisfies_properties\": false\n        },\n        {\n            \"initial_user_ask\": \"Additionally, fetch a random word of type adverb from the Random Word API.\",\n            \"user_ask_refinements\": [],\n            \"final_user_ask\": \"Additionally, fetch a random word of type adverb from the Random Word API.\",\n            \"direct_answer\": \"The random word of type adverb is 'incarnadine'.\",\n            \"indirect_answer\": \"\",\n            \"tools_input_output\": [\n                \"{'arguments': '{}', 'name': 'v1_randomword_for_random_word_by_api_ninjas'} function: {\\\"error\\\": \\\"\\\", \\\"response\\\": \\\"{'word': 'incarnadine'}\\\"}\"\n            ],\n            \"properties\": {      \n                \"coherent\": true,\n                \"factually_correct\": false,\n                \"comprehensively_answers_final_user_ask\": false,\n                \"does_not_contradict_tools_output\": false,\n                \"tools_output_summary_is_accurate\": false\n            },\n            \"boolean_properties\": [true, false, false, false, false],\n            \"answer_satisfies_properties\": false\n        }\n    ],\n    \"ai_answered_all_asks\": false,\n    \"explanation\": \"The sentiment analysis task is factually incorrect because the tool output does not provide sentiment; it outputs tagged parts of the sentence, and the summary provided does not accurately reflect this. For the task of fetching a random adverb, the answer is factually incorrect and does not comprehensively answer the ask, as the returned word 'incarnadine' is not an adverb according to the tool output.\"\n}\n```\nNow perform the evaluation on the chat history as described in the system prompt."
                },
                {
                  "generation_prompt_and_response": "Here is a the chatbot history:\n```\nuser: My friend wants to analyze their password 'qwertyuiop' and receive a report that includes the entropy, penalty for irregular entropy distribution, and the penalties for keyboard sequences, number sequences, and repeated characters. Can you output the analysis in YAML format?\nBegin!\nassistant: Based on the user's request, the current API call is made to the \"ec_for_arespass\" function with the arguments: \"password\" set to \"qwertyuiop\", and \"outputformat\" set to \"yaml\". The reason for this call is to analyze the password and generate a report in YAML format that includes the entropy, penalty for irregular entropy distribution, as well as penalties for keyboard sequences, number sequences, and repeated characters. This analysis will provide a comprehensive understanding of the password's strength and any potential vulnerabilities. By using the \"ec_for_arespass\" function with the specified arguments, I can obtain the desired report format for further analysis and discussion with the user.\nassistant: {'arguments': '{\\n  \"password\": \"qwertyuiop\",\\n  \"outputformat\": \"yaml\"\\n}', 'name': 'ec_for_arespass'}\nfunction: {\"error\": \"\", \"response\": \"---\\nEntropyResult:\\n  summary:\\n    summaryItem:\\n    - \\\"*** password:             qwertyuiop    \\\"\\n    - \\\"*** penalty param:        0.2500        \\\"\\n    - \\\"*** length:               10 characters \\\"\\n    - \\\"*** entropy:              20.0559 bits  \\\"\\n    - \\\"*** ideal entropy:        80.2237 bits  \\\"\\n    - \\\"*** efficiency:           25.00 %       \\\"\\n    - \\\"***                                     \\\"\\n    - \\\"                          q      w      e      r      t      y      u     \\\\\\n      \\\\ i      o      p      \\\"\\n    - \\\"*** entr. distribution:   10.00% 10.00% 10.00% 10.00% 10.00% 10.00% 10.00%\\\\\\n      \\\\ 10.00% 10.00% 10.00% \\\"\\n    - \\\"*** qwertyKeyboard:       0.2500 0.2500 0.2500 0.2500 0.2500 0.2500 0.2500\\\\\\n      \\\\ 0.2500 0.2500 0.2500 \\\"\\n    - \\\"*** numberSequence:       \\u00b7\\u00b7\\u00b7\\u00b7\\u00b7\\u00b7 \\u00b7\\u00b7\\u00b7\\u00b7\\u00b7\\u00b7 \\u00b7\\u00b7\\u00b7\\u00b7\\u00b7\\u00b7 \\u00b7\\u00b7\\u00b7\\u00b7\\u00b7\\u00b7 \\u00b7\\u00b7\\u00b7\\u00b7\\u00b7\\u00b7 \\u0...\nassistant: The password 'qwertyuiop' has an entropy of 20.0559 bits. The penalty for irregular entropy distribution is 0.2500. The penalties for keyboard sequences, number sequences, and repeated characters are 0.2500 each.\n```",
                  "evaluating_response": "```json\n{\n    \"all_user_asks\": [\n        \"My friend wants to analyze their password 'qwertyuiop' and receive a report that includes the entropy, penalty for irregular entropy distribution, and the penalties for keyboard sequences, number sequences, and repeated characters. Can you output the analysis in YAML format?\"\n    ],\n    \"tasks\": [\n        {\n            \"initial_user_ask\": \"My friend wants to analyze their password 'qwertyuiop' and receive a report that includes the entropy, penalty for irregular entropy distribution, and the penalties for keyboard sequences, number sequences, and repeated characters. Can you output the analysis in YAML format?\",\n            \"user_ask_refinements\": [],\n            \"final_user_ask\": \"My friend wants to analyze their password 'qwertyuiop' and receive a report that includes the entropy, penalty for irregular entropy distribution, and the penalties for keyboard sequences, number sequences, and repeated characters. Can you output the analysis in YAML format?\",\n            \"direct_answer\": \"The password 'qwertyuiop' has an entropy of 20.0559 bits. The penalty for irregular entropy distribution is 0.2500. The penalties for keyboard sequences, number sequences, and repeated characters are 0.2500 each.\",\n            \"indirect_answer\": \"\",\n            \"tools_input_output\": [\n                \"{\\\"password\\\": \\\"qwertyuiop\\\", \\\"outputformat\\\": \\\"yaml\\\"} -\u003E {\\\"error\\\": \\\"\\\", \\\"response\\\": \\\"---\\\\nEntropyResult:\\\\n  summary:\\\\n    summaryItem:\\\\n    - \\\\\\\"*** password:             qwertyuiop    \\\\\\\"\\\\n    - \\\\\\\"*** penalty param:        0.2500        \\\\\\\"\\\\n    - \\\\\\\"*** length:               10 characters \\\\\\\"\\\\n    - \\\\\\\"*** entropy:              20.0559 bits  \\\\\\\"\\\\n    - \\\\\\\"*** ideal entropy:        80.2237 bits  \\\\\\\"\\\\n    - \\\\\\\"*** efficiency:           25.00 %       \\\\\\\"\\\\n    - \\\\\\\"***                                     \\\\\\\"\\\\n    - \\\\\\\"                          q      w      e      r      t      y      u     \\\\\\\\\\\\n      \\\\\\\\ i      o      p      \\\\\\\"\\\\n    - \\\\\\\"*** entr. distribution:   10.00% 10.00% 10.00% 10.00% 10.00% 10.00% 10.00%\\\\\\\\\\\\n      \\\\\\\\ 10.00% 10.00% 10.00% \\\\\\\"\\\\n    - \\\\\\\"*** qwertyKeyboard:       0.2500 0.2500 0.2500 0.2500 0.2500 0.2500 0.2500\\\\\\\\\\\\n      \\\\\\\\ 0.2500 0.2500 0.2500 \\\\\\\"\\\\n    - \\\\\\\"*** numberSequence:       \\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7 \\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7 \\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7 \\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7 \\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7 \\\\u0...\\\"}\"\n            ],\n            \"properties\": {\n                \"coherent\": true,\n                \"factually_correct\": true,\n                \"comprehensively_answers_final_user_ask\": false,\n                \"does_not_contradict_tools_output\": true,\n                \"tools_output_summary_is_accurate\": false\n            },\n            \"boolean_properties\": [\n                true,\n                true,\n                false,\n                true,\n                false\n            ],\n            \"answer_satisfies_properties\": false\n        }\n    ],\n    \"ai_answered_all_asks\": false,\n    \"explanation\": \"The assistant did not comprehensively answer the final user ask because it did not deliver the full YAML-formatted report as requested by the user. Additionally, the summary of the tool's output was not accurate as it omitted parts of the YAML output like the ideal entropy, efficiency, entropy distribution, and so on.\"\n}\n```\nNow perform the evaluation on the chat history as described in the system prompt."
                }
              ]
            }
          },
          "type": "object",
          "title": "AgenticSessionSuccessTemplate",
          "description": "Template for the agentic session success metric,\ncontaining all the info necessary to send the agentic session success prompt."
        },
        "AgenticWorkflowSuccessScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "agentic_workflow_success",
              "title": "Name",
              "default": "agentic_workflow_success"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            },
            "type": {
              "type": "string",
              "const": "plus",
              "title": "Type",
              "default": "plus"
            },
            "model_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Name",
              "description": "Alias of the model to use for the scorer."
            },
            "num_judges": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 10,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Judges",
              "description": "Number of judges for the scorer."
            }
          },
          "type": "object",
          "title": "AgenticWorkflowSuccessScorer"
        },
        "AgenticWorkflowSuccessTemplate": {
          "properties": {
            "metric_system_prompt": {
              "type": "string",
              "title": "Metric System Prompt",
              "default": "You will receive the chat history from a chatbot application between a user and an AI. At the end of the chat history, it is AI’s turn to act.\n\nIn the chat history, the user can either ask questions, which are answered with words, or make requests that require calling tools and actions to resolve. Sometimes these are given as orders, and these should be treated as questions or requests. The AI's turn may involve several steps which are a combination of internal reflections, planning, selecting tools, calling tools, and ends with the AI replying to the user. \nYour task involves the following steps:\n\n########################\n\nStep 1: user_last_input and user_ask\n\nFirst, identify the user's last input in the chat history. From this input, create a list with one entry for each user question, request, or order. If there are no user asks in the user's last input, leave the list empty and skip ahead, considering the AI's turn successful.\n\n########################\n\nStep 2: ai_final_response and answer_or_resolution\n\nIdentify the AI's final response to the user: it is the very last step in the AI's turn.\n\nFor every user_ask, focus on ai_final_response and try to extract either an answer or a resolution using the following definitions:\n- An answer is a part of the AI's final response that directly responds to all or part of a user's question, or asks for further information or clarification.\n- A resolution is a part of the AI's final response that confirms a successful resolution, or asks for further information or clarification in order to answer a user's request.\n\nIf the AI's final response does not address the user ask, simply write \"No answer or resolution provided in the final response\". Do not shorten the answer or resolution; provide the entire relevant part.\n\n########################\n\nStep 3: tools_input_output\n\nExamine every step in the AI's turn and identify which tool/function step seemingly contributed to creating the answer or resolution. Every tool call should be linked to a user ask. If an AI step immediately before or after the tool call mentions planning or using a tool for answering a user ask, the tool call should be associated with that user ask. If the answer or resolution strongly resembles the output of a tool, the tool call should also be associated with that user ask.\n\nCreate a list containing the concatenation of the entire input and output of every tool used in formulating the answer or resolution. The tool input is listed as an AI step before calling the tool, and the tool output is listed as a tool step.\n\n########################\n\nStep 4: properties, boolean_properties and answer_successful\n\nFor every answer or resolution from Step 2, check the following properties one by one to determine which are satisfied:\n- factually_wrong: the answer contains factual errors.\n- addresses_different_ask: the answer or resolution addresses a slightly different user ask (make sure to differentiate this from asking clarifying questions related to the current ask).\n- not_adherent_to_tools_output: the answer or resolution includes citations from a tool's output, but some are wrongly copied or attributed.\n- mentions_inability: the answer or resolution mentions an inability to complete the user ask.\n- mentions_unsuccessful_attempt: the answer or resolution mentions an unsuccessful or failed attempt to complete the user ask.\n\nThen copy all the properties (only the boolean value) in the list boolean_properties.\n\nFinally, set answer_successful to `false` if any entry in boolean_properties is set to `true`, otherwise set answer_successful to `true`.\n\n########################\n\nYou must respond in the following JSON format:\n```\n{\n    \"user_last_input\": string,\n    \"ai_final_response\": string,\n    \"asks_and_answers\": list[dict],\n    \"ai_turn_is_successful\": boolean,\n    \"explanation\": string\n}\n```\n\nYour tasks are defined as follows:\n\n- **\"asks_and_answers\"**: Perform all the tasks described in the steps above. Your answer should be a list where each user ask appears as:\n\n```\n{\n    \"user_ask\": string,\n    \"answer_or_resolution\": string,\n    \"tools_input_output\": list[string],\n    \"properties\" : {\n        \"factually_wrong\": boolean,\n        \"addresses_different_ask\": boolean,\n        \"not_adherent_to_tools_output\": boolean,\n        \"mentions_inability\": boolean,\n        \"mentions_unsuccessful_attempt\": boolean\n    },\n    \"boolean_properties\": list[boolean],\n    \"answer_successful\": boolean\n}\n```\n\n- **\"ai_turn_is_successful\"**: Respond `true` if at least one answer_successful is True, otherwise respond `false`.\n\n- **\"explanation\"**: If at least one answer was considered successful, explain why. Otherwise explain why all answers were not successful.\n\nYou must respond with a valid JSON object; be sure to escape special characters."
            },
            "metric_description": {
              "type": "string",
              "title": "Metric Description",
              "default": "I have a multi-turn chatbot application where the assistant is an agent that has access to tools. An assistant workflow can involves possibly multiple tool selections steps, tool calls steps, and finally a reply to the user. I want a metric that assesses whether each assistant's workflow was thoughtfully planned and ended up helping answer the queries.\n"
            },
            "value_field_name": {
              "type": "string",
              "title": "Value Field Name",
              "default": "ai_turn_is_successful"
            },
            "explanation_field_name": {
              "type": "string",
              "title": "Explanation Field Name",
              "description": "Field name to look for in the chainpoll response, for the explanation.",
              "default": "explanation"
            },
            "template": {
              "type": "string",
              "title": "Template",
              "default": "Chatbot history:\n```\n{query}\n```\n\nAI's turn:\n```\n{response}\n```"
            },
            "metric_few_shot_examples": {
              "items": {
                "$ref": "#/components/schemas/FewShotExample"
              },
              "type": "array",
              "title": "Metric Few Shot Examples",
              "default": [
                {
                  "generation_prompt_and_response": "Chatbot history:\n```\nsystem: You are a helpful assistant, with no access to external functions.\nuser: Can you analyze the given C# code and identify any errors present? Please mention the line numbers where the errors occur, describe their nature, suggest the necessary changes to rectify them and also mention any security vulnerabilities present in the code.\n```\n\nAI's turn:\n```\nassistant: Sure, please provide the C# code so I can analyze it for errors and security vulnerabilities. \u003C|endoftext|\u003E\n```",
                  "evaluating_response": "{\"user_last_input\": \"Can you analyze the given C# code and identify any errors present? Please mention the line numbers where the errors occur, describe their nature, suggest the necessary changes to rectify them and also mention any security vulnerabilities present in the code.\", \"ai_final_response\": \"Sure, please provide the C# code so I can analyze it for errors and security vulnerabilities. \u003C|endoftext|\u003E\", \"asks_and_answers\": [{\"user_ask\": \"Can you analyze the given C# code and identify any errors present? Please mention the line numbers where the errors occur, describe their nature, suggest the necessary changes to rectify them and also mention any security vulnerabilities present in the code.\", \"answer_or_resolution\": \"Sure, please provide the C# code so I can analyze it for errors and security vulnerabilities.\", \"tools_input_output\": [], \"properties\": {\"factually_wrong\": false, \"addresses_different_ask\": false, \"not_adherent_to_tools_output\": false, \"mentions_inability\": false, \"mentions_unsuccessful_attempt\": false}, \"boolean_properties\": [false, false, false, false, false], \"answer_successful\": true}], \"ai_turn_is_successful\": true, \"explanation\": \"The answer was successful because the AI correctly requested further information (the C# code) from the user in order to fulfill the user's request. No errors or issues were present in the response.\"}"
                },
                {
                  "generation_prompt_and_response": "Chatbot history:\n```\nuser: Could you please provide me with the list of available languages for text to speech? I want to convert a text into speech in different languages and need to know which languages are supported by the API.\nBegin!\n\n```\n\nAI's turn:\n```\nassistant: I am making this API call to get the list of available languages for text to speech, as the user wants to convert text into speech in different languages. By calling the 'get_language_for_text_to_speech' function with no arguments, I can retrieve the supported languages from the API. This will provide me with the necessary information to assist the user in their query.\nassistant: {'arguments': '{}', 'name': 'get_language_for_text_to_speech'}\nfunction: {\"error\": \"\", \"response\": \"{\\\"af\\\":\\\"Afrikaans\\\",\\\"sq\\\":\\\"Albanian\\\",\\\"ar\\\":\\\"Arabic\\\",\\\"hy\\\":\\\"Armenian\\\",\\\"ca\\\":\\\"Catalan\\\",\\\"zh\\\":\\\"Chinese\\\",\\\"zh-cn\\\":\\\"Chinese (Mandarin/China)\\\",\\\"zh-tw\\\":\\\"Chinese (Mandarin/Taiwan)\\\",\\\"zh-yue\\\":\\\"Chinese (Cantonese)\\\",\\\"hr\\\":\\\"Croatian\\\",\\\"cs\\\":\\\"Czech\\\",\\\"da\\\":\\\"Danish\\\",\\\"nl\\\":\\\"Dutch\\\",\\\"en\\\":\\\"English\\\",\\\"en-au\\\":\\\"English (Australia)\\\",\\\"en-uk\\\":\\\"English (United Kingdom)\\\",\\\"en-us\\\":\\\"English (United States)\\\",\\\"eo\\\":\\\"Esperanto\\\",\\\"fi\\\":\\\"Finnish\\\",\\\"fr\\\":\\\"French\\\",\\\"de\\\":\\\"German\\\",\\\"el\\\":\\\"Greek\\\",\\\"ht\\\":\\\"Haitian Creole\\\",\\\"hi\\\":\\\"Hindi\\\",\\\"hu\\\":\\\"Hungarian\\\",\\\"is\\\":\\\"Icelandic\\\",\\\"id\\\":\\\"Indonesian\\\",\\\"it\\\":\\\"Italian\\\",\\\"ja\\\":\\\"Japanese\\\",\\\"ko\\\":\\\"Korean\\\",\\\"la\\\":\\\"Latin\\\",\\\"lv\\\":\\\"Latvian\\\",\\\"mk\\\":\\\"Macedonian\\\",\\\"no\\\":\\\"Norwegian\\\",\\\"pl\\\":\\\"Polish\\\",\\\"pt\\\":\\\"Portuguese\\\",\\\"pt-br\\\":\\\"Portuguese (Brazil)\\\",\\\"ro\\\":\\\"Romanian\\\",\\\"ru\\\":\\\"Russian\\\",\\\"sr\\\":\\\"Serbian\\\",\\\"sk\\\":\\\"Slovak\\\",\\\"es\\\":\\\"Spanish\\\",\\\"es-es\\\":\\\"Spanish (Spain)\\\",\\\"es-us\\\":\\\"Spanish (United ...\nassistant: The available languages for text to speech are Afrikaans, Albanian, Arabic, Armenian, Catalan, Chinese, Croatian, Czech, Danish, Dutch, English, Esperanto, Finnish, French, German, Greek, Haitian Creole, Hindi, Hungarian, Icelandic, Indonesian, Italian, Japanese, Korean, Latin, Latvian, Macedonian, Norwegian, Polish, Portuguese, Romanian, Russian, Serbian, Slovak, Spanish, Swedish, Turkish, and Vietnamese.\n```",
                  "evaluating_response": "{\"user_last_input\": \"Could you please provide me with the list of available languages for text to speech? I want to convert a text into speech in different languages and need to know which languages are supported by the API.\\nBegin!\", \"ai_final_response\": \"The available languages for text to speech are Afrikaans, Albanian, Arabic, Armenian, Catalan, Chinese, Croatian, Czech, Danish, Dutch, English, Esperanto, Finnish, French, German, Greek, Haitian Creole, Hindi, Hungarian, Icelandic, Indonesian, Italian, Japanese, Korean, Latin, Latvian, Macedonian, Norwegian, Polish, Portuguese, Romanian, Russian, Serbian, Slovak, Spanish, Swedish, Turkish, and Vietnamese.\", \"asks_and_answers\": [{\"user_ask\": \"Could you please provide me with the list of available languages for text to speech?\", \"answer_or_resolution\": \"The available languages for text to speech are Afrikaans, Albanian, Arabic, Armenian, Catalan, Chinese, Croatian, Czech, Danish, Dutch, English, Esperanto, Finnish, French, German, Greek, Haitian Creole, Hindi, Hungarian, Icelandic, Indonesian, Italian, Japanese, Korean, Latin, Latvian, Macedonian, Norwegian, Polish, Portuguese, Romanian, Russian, Serbian, Slovak, Spanish, Swedish, Turkish, and Vietnamese.\", \"tools_input_output\": [\"{'arguments': '{}', 'name': 'get_language_for_text_to_speech'}\", \"{\\\"error\\\": \\\"\\\", \\\"response\\\": \\\"{\\\\\\\"af\\\\\\\":\\\\\\\"Afrikaans\\\\\\\",\\\\\\\"sq\\\\\\\":\\\\\\\"Albanian\\\\\\\",\\\\\\\"ar\\\\\\\":\\\\\\\"Arabic\\\\\\\",\\\\\\\"hy\\\\\\\":\\\\\\\"Armenian\\\\\\\",\\\\\\\"ca\\\\\\\":\\\\\\\"Catalan\\\\\\\",\\\\\\\"zh\\\\\\\":\\\\\\\"Chinese\\\\\\\",\\\\\\\"zh-cn\\\\\\\":\\\\\\\"Chinese (Mandarin/China)\\\\\\\",\\\\\\\"zh-tw\\\\\\\":\\\\\\\"Chinese (Mandarin/Taiwan)\\\\\\\",\\\\\\\"zh-yue\\\\\\\":\\\\\\\"Chinese (Cantonese)\\\\\\\",\\\\\\\"hr\\\\\\\":\\\\\\\"Croatian\\\\\\\",\\\\\\\"cs\\\\\\\":\\\\\\\"Czech\\\\\\\",\\\\\\\"da\\\\\\\":\\\\\\\"Danish\\\\\\\",\\\\\\\"nl\\\\\\\":\\\\\\\"Dutch\\\\\\\",\\\\\\\"en\\\\\\\":\\\\\\\"English\\\\\\\",\\\\\\\"en-au\\\\\\\":\\\\\\\"English (Australia)\\\\\\\",\\\\\\\"en-uk\\\\\\\":\\\\\\\"English (United Kingdom)\\\\\\\",\\\\\\\"en-us\\\\\\\":\\\\\\\"English (United States)\\\\\\\",\\\\\\\"eo\\\\\\\":\\\\\\\"Esperanto\\\\\\\",\\\\\\\"fi\\\\\\\":\\\\\\\"Finnish\\\\\\\",\\\\\\\"fr\\\\\\\":\\\\\\\"French\\\\\\\",\\\\\\\"de\\\\\\\":\\\\\\\"German\\\\\\\",\\\\\\\"el\\\\\\\":\\\\\\\"Greek\\\\\\\",\\\\\\\"ht\\\\\\\":\\\\\\\"Haitian Creole\\\\\\\",\\\\\\\"hi\\\\\\\":\\\\\\\"Hindi\\\\\\\",\\\\\\\"hu\\\\\\\":\\\\\\\"Hungarian\\\\\\\",\\\\\\\"is\\\\\\\":\\\\\\\"Icelandic\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"Indonesian\\\\\\\",\\\\\\\"it\\\\\\\":\\\\\\\"Italian\\\\\\\",\\\\\\\"ja\\\\\\\":\\\\\\\"Japanese\\\\\\\",\\\\\\\"ko\\\\\\\":\\\\\\\"Korean\\\\\\\",\\\\\\\"la\\\\\\\":\\\\\\\"Latin\\\\\\\",\\\\\\\"lv\\\\\\\":\\\\\\\"Latvian\\\\\\\",\\\\\\\"mk\\\\\\\":\\\\\\\"Macedonian\\\\\\\",\\\\\\\"no\\\\\\\":\\\\\\\"Norwegian\\\\\\\",\\\\\\\"pl\\\\\\\":\\\\\\\"Polish\\\\\\\",\\\\\\\"pt\\\\\\\":\\\\\\\"Portuguese\\\\\\\",\\\\\\\"pt-br\\\\\\\":\\\\\\\"Portuguese (Brazil)\\\\\\\",\\\\\\\"ro\\\\\\\":\\\\\\\"Romanian\\\\\\\",\\\\\\\"ru\\\\\\\":\\\\\\\"Russian\\\\\\\",\\\\\\\"sr\\\\\\\":\\\\\\\"Serbian\\\\\\\",\\\\\\\"sk\\\\\\\":\\\\\\\"Slovak\\\\\\\",\\\\\\\"es\\\\\\\":\\\\\\\"Spanish\\\\\\\",\\\\\\\"es-es\\\\\\\":\\\\\\\"Spanish (Spain)\\\\\\\",\\\\\\\"es-us\\\\\\\":\\\\\\\"Spanish (United...\"], \"properties\": {\"factually_wrong\": false, \"addresses_different_ask\": false, \"not_adherent_to_tools_output\": true, \"mentions_inability\": false, \"mentions_unsuccessful_attempt\": false}, \"boolean_properties\": [false, false, true, false, false], \"answer_successful\": false}], \"ai_turn_is_successful\": false, \"explanation\": \"The provided answer was not successful because it was not adherent to the tool's output. Some languages and dialects, such as 'Chinese (Mandarin/China)', 'Chinese (Mandarin/Taiwan)', 'Chinese (Cantonese)', 'English (Australia)', 'English (United Kingdom)', 'English (United States)', 'Portuguese (Brazil)', 'Spanish (Spain)', and 'Spanish (United States)' specified in the API response were omitted in the final response to the user.\"}"
                }
              ]
            }
          },
          "type": "object",
          "title": "AgenticWorkflowSuccessTemplate",
          "description": "Template for the agentic workflow success metric,\ncontaining all the info necessary to send the agentic workflow success prompt."
        },
        "AggregateMetrics": {
          "properties": {
            "average_agentic_workflow_success": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Agentic Workflow Success"
            },
            "average_agentic_session_success": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Agentic Session Success"
            },
            "average_completeness_gpt": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Completeness Gpt"
            },
            "average_factuality": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Factuality"
            },
            "average_groundedness": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Groundedness"
            },
            "average_input_sexist": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Input Sexist"
            },
            "average_input_token_length": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Input Token Length"
            },
            "average_input_toxicity": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Input Toxicity"
            },
            "average_instruction_adherence": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Instruction Adherence"
            },
            "average_latency": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Latency"
            },
            "average_output_token_length": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Output Token Length"
            },
            "average_prompt_perplexity": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Prompt Perplexity"
            },
            "average_retriever_attribution": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Retriever Attribution"
            },
            "average_retriever_utilization": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Retriever Utilization"
            },
            "average_sexist": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Sexist"
            },
            "average_tool_selection_quality": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Tool Selection Quality"
            },
            "average_tool_error_rate": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Tool Error Rate"
            },
            "average_toxicity": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Toxicity"
            },
            "average_total_token_length": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Total Token Length"
            },
            "failures_count": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Failures Count",
              "default": 0
            },
            "requests_count": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Requests Count",
              "default": 0
            },
            "total_cost": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Total Cost",
              "default": 0
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "AggregateMetrics"
        },
        "Aggregator": {
          "type": "string",
          "enum": [
            "count",
            "sum",
            "avg",
            "max",
            "min"
          ],
          "title": "Aggregator"
        },
        "Alert": {
          "properties": {
            "alert_title": {
              "type": "string",
              "title": "Alert Title"
            },
            "alert_message": {
              "type": "string",
              "title": "Alert Message"
            }
          },
          "type": "object",
          "required": [
            "alert_title",
            "alert_message"
          ],
          "title": "Alert"
        },
        "AlertCondition": {
          "properties": {
            "field": {
              "type": "string",
              "title": "Field"
            },
            "aggregation": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Aggregator"
                },
                {
                  "type": "string"
                }
              ],
              "title": "Aggregation"
            },
            "operator": {
              "$ref": "#/components/schemas/Operator"
            },
            "value": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "title": "Value"
            },
            "filter_value": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filter Value"
            },
            "filter_operator": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Operator"
                },
                {
                  "type": "null"
                }
              ]
            },
            "window": {
              "type": "integer",
              "minimum": 900,
              "title": "Window"
            },
            "condition_type": {
              "$ref": "#/components/schemas/AlertConditionType",
              "default": "metric/numeric/1"
            }
          },
          "type": "object",
          "required": [
            "field",
            "aggregation",
            "operator",
            "value",
            "window"
          ],
          "title": "AlertCondition"
        },
        "AlertConditionType": {
          "type": "string",
          "enum": [
            "metric/numeric/1",
            "metric/string/1",
            "root/numeric/1",
            "metric/array_string/1"
          ],
          "title": "AlertConditionType"
        },
        "AlertConfigurationResponse": {
          "properties": {
            "conditions": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/AlertCondition"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Conditions"
            },
            "filters": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AlertNameFilter"
                  }
                ],
                "discriminator": {
                  "propertyName": "name",
                  "mapping": {
                    "node_name": "#/components/schemas/AlertNameFilter"
                  }
                }
              },
              "type": "array",
              "title": "Filters"
            },
            "interval": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Interval"
            },
            "active": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Active"
            },
            "processed_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Processed By"
            },
            "last_triggered": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Triggered"
            },
            "last_sent": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Sent"
            },
            "alert_sent": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Alert Sent"
            },
            "counter_since_last_sent": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Counter Since Last Sent"
            },
            "counter": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Counter"
            },
            "schema_version": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AlertMonitorType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Created By"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            }
          },
          "type": "object",
          "required": [
            "id",
            "created_by",
            "project_id",
            "created_at",
            "updated_at"
          ],
          "title": "AlertConfigurationResponse"
        },
        "AlertImportance": {
          "type": "string",
          "enum": [
            "high",
            "medium",
            "low"
          ],
          "title": "AlertImportance",
          "description": "The importance of the alert."
        },
        "AlertMonitorType": {
          "type": "string",
          "enum": [
            "multi_condition/object/1"
          ],
          "title": "AlertMonitorType"
        },
        "AlertNameFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "node_name",
              "title": "Name",
              "default": "node_name"
            },
            "operator": {
              "type": "string",
              "enum": [
                "eq",
                "ne",
                "contains",
                "one_of",
                "not_in"
              ],
              "title": "Operator"
            },
            "value": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ],
              "title": "Value"
            },
            "case_sensitive": {
              "type": "boolean",
              "title": "Case Sensitive",
              "default": true
            }
          },
          "type": "object",
          "required": [
            "operator",
            "value"
          ],
          "title": "AlertNameFilter"
        },
        "AlertStatusResponse": {
          "properties": {
            "message": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Message"
            },
            "status": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            },
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            }
          },
          "type": "object",
          "title": "AlertStatusResponse"
        },
        "AlertsConfiguration-Input": {
          "properties": {
            "emails": {
              "items": {
                "type": "string",
                "format": "email"
              },
              "type": "array",
              "title": "Emails"
            },
            "webhooks": {
              "items": {
                "$ref": "#/components/schemas/Webhook"
              },
              "type": "array",
              "title": "Webhooks"
            }
          },
          "type": "object",
          "title": "AlertsConfiguration"
        },
        "AlertsConfiguration-Output": {
          "properties": {
            "emails": {
              "items": {
                "type": "string",
                "format": "email"
              },
              "type": "array",
              "title": "Emails"
            },
            "webhooks": {
              "items": {
                "$ref": "#/components/schemas/Webhook"
              },
              "type": "array",
              "title": "Webhooks"
            }
          },
          "type": "object",
          "title": "AlertsConfiguration"
        },
        "AnthropicIntegration": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "name": {
              "type": "string",
              "const": "anthropic",
              "title": "Name",
              "default": "anthropic"
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            }
          },
          "type": "object",
          "title": "AnthropicIntegration"
        },
        "AnthropicIntegrationCreate": {
          "properties": {
            "token": {
              "type": "string",
              "title": "Token"
            }
          },
          "type": "object",
          "required": [
            "token"
          ],
          "title": "AnthropicIntegrationCreate"
        },
        "ApiKeyAction": {
          "type": "string",
          "enum": [
            "update",
            "delete"
          ],
          "title": "ApiKeyAction"
        },
        "ApiKeyDeleteResponse": {
          "properties": {
            "message": {
              "type": "string",
              "title": "Message"
            }
          },
          "type": "object",
          "required": [
            "message"
          ],
          "title": "ApiKeyDeleteResponse"
        },
        "ApiKeyLoginRequest": {
          "properties": {
            "api_key": {
              "type": "string",
              "title": "Api Key"
            }
          },
          "type": "object",
          "required": [
            "api_key"
          ],
          "title": "ApiKeyLoginRequest"
        },
        "AuthMethod": {
          "type": "string",
          "enum": [
            "email",
            "google",
            "github",
            "okta",
            "azure-ad",
            "custom"
          ],
          "title": "AuthMethod"
        },
        "AvailableIntegrations": {
          "properties": {
            "integrations": {
              "items": {
                "$ref": "#/components/schemas/IntegrationName"
              },
              "type": "array",
              "title": "Integrations"
            }
          },
          "type": "object",
          "required": [
            "integrations"
          ],
          "title": "AvailableIntegrations"
        },
        "AwsBedrockIntegration": {
          "properties": {
            "credential_type": {
              "$ref": "#/components/schemas/AwsCredentialType",
              "default": "key_secret"
            },
            "region": {
              "type": "string",
              "title": "Region",
              "default": "us-west-2"
            },
            "id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "name": {
              "type": "string",
              "const": "aws_bedrock",
              "title": "Name",
              "default": "aws_bedrock"
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            }
          },
          "type": "object",
          "title": "AwsBedrockIntegration"
        },
        "AwsCredentialType": {
          "type": "string",
          "enum": [
            "assumed_role",
            "key_secret"
          ],
          "title": "AwsCredentialType"
        },
        "AwsSageMakerIntegration": {
          "properties": {
            "credential_type": {
              "$ref": "#/components/schemas/AwsCredentialType",
              "default": "key_secret"
            },
            "region": {
              "type": "string",
              "title": "Region",
              "default": "us-west-2"
            },
            "models": {
              "items": {
                "$ref": "#/components/schemas/Model-Output"
              },
              "type": "array",
              "title": "Models"
            },
            "id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "name": {
              "type": "string",
              "const": "aws_sagemaker",
              "title": "Name",
              "default": "aws_sagemaker"
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            }
          },
          "type": "object",
          "title": "AwsSageMakerIntegration"
        },
        "AwsSageMakerIntegrationCreate": {
          "properties": {
            "models": {
              "items": {
                "$ref": "#/components/schemas/Model-Input"
              },
              "type": "array",
              "title": "Models"
            },
            "credential_type": {
              "$ref": "#/components/schemas/AwsCredentialType",
              "default": "key_secret"
            },
            "region": {
              "type": "string",
              "title": "Region",
              "default": "us-west-2"
            },
            "token": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "Token"
            }
          },
          "type": "object",
          "required": [
            "token"
          ],
          "title": "AwsSageMakerIntegrationCreate"
        },
        "AzureAuthenticationType": {
          "type": "string",
          "enum": [
            "api_key",
            "client_secret",
            "username_password"
          ],
          "title": "AzureAuthenticationType"
        },
        "AzureIntegration": {
          "properties": {
            "proxy": {
              "type": "boolean",
              "title": "Proxy",
              "default": false
            },
            "endpoint": {
              "type": "string",
              "title": "Endpoint"
            },
            "authentication_type": {
              "$ref": "#/components/schemas/AzureAuthenticationType",
              "default": "api_key"
            },
            "authentication_scope": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authentication Scope"
            },
            "headers": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Headers"
            },
            "api_version": {
              "type": "string",
              "title": "Api Version",
              "default": "2024-10-21"
            },
            "azure_deployment": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Azure Deployment"
            },
            "available_deployments": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/AzureModelDeployment"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Available Deployments",
              "description": "The available deployments for this integration. If provided, we will not try to get this list from Azure."
            },
            "id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "name": {
              "type": "string",
              "const": "azure",
              "title": "Name",
              "default": "azure"
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            }
          },
          "type": "object",
          "required": [
            "endpoint"
          ],
          "title": "AzureIntegration"
        },
        "AzureIntegrationCreate": {
          "properties": {
            "proxy": {
              "type": "boolean",
              "title": "Proxy",
              "default": false
            },
            "endpoint": {
              "type": "string",
              "title": "Endpoint"
            },
            "authentication_type": {
              "$ref": "#/components/schemas/AzureAuthenticationType",
              "default": "api_key"
            },
            "authentication_scope": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authentication Scope"
            },
            "headers": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Headers"
            },
            "api_version": {
              "type": "string",
              "title": "Api Version",
              "default": "2024-10-21"
            },
            "azure_deployment": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Azure Deployment"
            },
            "available_deployments": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/AzureModelDeployment"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Available Deployments",
              "description": "The available deployments for this integration. If provided, we will not try to get this list from Azure."
            },
            "token": {
              "type": "string",
              "title": "Token"
            }
          },
          "type": "object",
          "required": [
            "endpoint",
            "token"
          ],
          "title": "AzureIntegrationCreate"
        },
        "AzureModelDeployment": {
          "properties": {
            "model": {
              "type": "string",
              "title": "Model",
              "description": "The name of the model."
            },
            "id": {
              "type": "string",
              "title": "Id",
              "description": "The ID of the deployment."
            }
          },
          "type": "object",
          "required": [
            "model",
            "id"
          ],
          "title": "AzureModelDeployment"
        },
        "BBox": {
          "properties": {
            "id": {
              "type": "integer",
              "title": "Id"
            },
            "bbox": {
              "items": {
                "type": "number"
              },
              "type": "array",
              "title": "Bbox"
            },
            "is_active": {
              "type": "boolean",
              "title": "Is Active"
            },
            "error_type": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Error Type"
            },
            "gold": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Gold"
            },
            "pred": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Pred"
            },
            "x": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X"
            },
            "y": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Y"
            },
            "data_error_potential": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Data Error Potential"
            },
            "confidence": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Confidence"
            },
            "is_gold": {
              "type": "boolean",
              "title": "Is Gold"
            },
            "is_pred": {
              "type": "boolean",
              "title": "Is Pred"
            },
            "tide_match_id": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tide Match Id"
            }
          },
          "type": "object",
          "required": [
            "id",
            "bbox",
            "is_active",
            "is_gold",
            "is_pred"
          ],
          "title": "BBox"
        },
        "BarChart": {
          "properties": {
            "labels": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Labels"
            },
            "values": {
              "items": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "type": "array",
              "title": "Values"
            }
          },
          "type": "object",
          "required": [
            "labels",
            "values"
          ],
          "title": "BarChart",
          "description": "A class to represent a basic bar chart.\n\nlabels: List[str] the x axis labels\nvalues: List[int | float] the counts for each bar"
        },
        "BaseAwsIntegrationCreate": {
          "properties": {
            "credential_type": {
              "$ref": "#/components/schemas/AwsCredentialType",
              "default": "key_secret"
            },
            "region": {
              "type": "string",
              "title": "Region",
              "default": "us-west-2"
            },
            "token": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "Token"
            }
          },
          "type": "object",
          "required": [
            "token"
          ],
          "title": "BaseAwsIntegrationCreate"
        },
        "BaseGalileoStep": {
          "properties": {
            "type": {
              "$ref": "#/components/schemas/NodeType",
              "description": "Type of the step. By default, it is set to workflow.",
              "default": "workflow"
            },
            "input": {
              "type": "string",
              "title": "Input",
              "description": "Input to the step."
            },
            "output": {
              "type": "string",
              "title": "Output",
              "description": "Output of the step."
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at_ns": {
              "type": "integer",
              "title": "Created At Ns",
              "description": "Timestamp of the step's creation, as nanoseconds since epoch."
            },
            "duration_ns": {
              "type": "integer",
              "title": "Duration Ns",
              "description": "Duration of the step in nanoseconds.",
              "default": 0
            },
            "metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "Metadata",
              "description": "Metadata associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "ground_truth": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ground Truth",
              "description": "Ground truth expected output for the step."
            },
            "root_workflow_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Root Workflow Id"
            },
            "workflow_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Workflow Id"
            },
            "step_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Step Id"
            },
            "steps": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/BaseGalileoStep"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Steps"
            },
            "metrics": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/StepMetric"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metrics"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "input"
          ],
          "title": "BaseGalileoStep"
        },
        "BasePromptTemplateResponse": {
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "title": "Name"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "template": {
              "type": "string",
              "title": "Template"
            },
            "selected_version": {
              "$ref": "#/components/schemas/BasePromptTemplateVersionResponse"
            },
            "selected_version_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Selected Version Id"
            },
            "all_versions": {
              "items": {
                "$ref": "#/components/schemas/BasePromptTemplateVersionResponse"
              },
              "type": "array",
              "title": "All Versions"
            },
            "all_available_versions": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "All Available Versions"
            },
            "total_versions": {
              "type": "integer",
              "title": "Total Versions"
            },
            "max_version": {
              "type": "integer",
              "title": "Max Version"
            }
          },
          "type": "object",
          "required": [
            "name",
            "id",
            "template",
            "selected_version",
            "selected_version_id",
            "all_available_versions",
            "total_versions",
            "max_version"
          ],
          "title": "BasePromptTemplateResponse",
          "description": "Response from API to get a prompt template version."
        },
        "BasePromptTemplateVersion": {
          "properties": {
            "template": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "$ref": "#/components/schemas/Messages-Input"
                }
              ],
              "title": "Template"
            },
            "version": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Version"
            }
          },
          "type": "object",
          "required": [
            "template"
          ],
          "title": "BasePromptTemplateVersion"
        },
        "BasePromptTemplateVersionResponse": {
          "properties": {
            "template": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "$ref": "#/components/schemas/Messages-Output"
                }
              ],
              "title": "Template"
            },
            "version": {
              "type": "integer",
              "title": "Version"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            }
          },
          "type": "object",
          "required": [
            "template",
            "version",
            "id"
          ],
          "title": "BasePromptTemplateVersionResponse",
          "description": "Base response from API for a prompt template version."
        },
        "BaseScorer-Input": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "title": "Scorer Name",
              "default": ""
            },
            "name": {
              "type": "string",
              "title": "Name",
              "default": ""
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregate Keys"
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ChainPollTemplate"
                },
                {
                  "type": "null"
                }
              ]
            },
            "model_alias": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Alias"
            },
            "num_judges": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Judges"
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            }
          },
          "type": "object",
          "title": "BaseScorer"
        },
        "BaseScorer-Output": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "title": "Scorer Name",
              "default": ""
            },
            "name": {
              "type": "string",
              "title": "Name",
              "default": ""
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregate Keys"
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ChainPollTemplate"
                },
                {
                  "type": "null"
                }
              ]
            },
            "model_alias": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Alias"
            },
            "num_judges": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Judges"
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            }
          },
          "type": "object",
          "title": "BaseScorer"
        },
        "BaseScorerVersionResponse": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "version": {
              "type": "integer",
              "title": "Version"
            },
            "generated_scorer": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/GeneratedScorerResponse"
                },
                {
                  "type": "null"
                }
              ]
            },
            "registered_scorer": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CreateUpdateRegisteredScorerResponse"
                },
                {
                  "type": "null"
                }
              ]
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            }
          },
          "type": "object",
          "required": [
            "id",
            "version",
            "created_at",
            "updated_at"
          ],
          "title": "BaseScorerVersionResponse"
        },
        "BleuScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "bleu",
              "title": "Name",
              "default": "bleu"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            }
          },
          "type": "object",
          "title": "BleuScorer"
        },
        "Body_create_code_scorer_version_scorers__scorer_id__version_code_post": {
          "properties": {
            "file": {
              "type": "string",
              "format": "binary",
              "title": "File"
            }
          },
          "type": "object",
          "required": [
            "file"
          ],
          "title": "Body_create_code_scorer_version_scorers__scorer_id__version_code_post"
        },
        "Body_create_dataset_datasets_post": {
          "properties": {
            "draft": {
              "type": "boolean",
              "title": "Draft",
              "default": false
            },
            "file": {
              "type": "string",
              "format": "binary",
              "title": "File"
            }
          },
          "type": "object",
          "required": [
            "file"
          ],
          "title": "Body_create_dataset_datasets_post"
        },
        "Body_create_or_update_registered_scorers_put": {
          "properties": {
            "file": {
              "type": "string",
              "format": "binary",
              "title": "File"
            }
          },
          "type": "object",
          "required": [
            "file"
          ],
          "title": "Body_create_or_update_registered_scorers_put"
        },
        "Body_login_email_login_post": {
          "properties": {
            "grant_type": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^password$"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Grant Type"
            },
            "username": {
              "type": "string",
              "title": "Username"
            },
            "password": {
              "type": "string",
              "title": "Password"
            },
            "scope": {
              "type": "string",
              "title": "Scope",
              "default": ""
            },
            "client_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Client Id"
            },
            "client_secret": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Client Secret"
            }
          },
          "type": "object",
          "required": [
            "username",
            "password"
          ],
          "title": "Body_login_email_login_post"
        },
        "Body_update_prompt_dataset_projects__project_id__prompt_datasets__dataset_id__put": {
          "properties": {
            "file": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "binary"
                },
                {
                  "type": "null"
                }
              ],
              "title": "File"
            },
            "column_names": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Column Names"
            }
          },
          "type": "object",
          "title": "Body_update_prompt_dataset_projects__project_id__prompt_datasets__dataset_id__put"
        },
        "Body_upload_file_projects__project_id__upload_file_post": {
          "properties": {
            "file": {
              "type": "string",
              "format": "binary",
              "title": "File"
            },
            "upload_metadata": {
              "type": "string",
              "contentMediaType": "application/json",
              "contentSchema": {
  
              },
              "title": "Upload Metadata"
            }
          },
          "type": "object",
          "required": [
            "file",
            "upload_metadata"
          ],
          "title": "Body_upload_file_projects__project_id__upload_file_post"
        },
        "Body_upload_prompt_evaluation_dataset_projects__project_id__prompt_datasets_post": {
          "properties": {
            "file": {
              "type": "string",
              "format": "binary",
              "title": "File"
            }
          },
          "type": "object",
          "required": [
            "file"
          ],
          "title": "Body_upload_prompt_evaluation_dataset_projects__project_id__prompt_datasets_post"
        },
        "BucketedMetrics": {
          "properties": {
            "average_agentic_workflow_success": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Agentic Workflow Success"
            },
            "average_agentic_session_success": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Agentic Session Success"
            },
            "average_completeness_gpt": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Completeness Gpt"
            },
            "average_factuality": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Factuality"
            },
            "average_groundedness": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Groundedness"
            },
            "average_input_sexist": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Input Sexist"
            },
            "average_input_token_length": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Input Token Length"
            },
            "average_input_toxicity": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Input Toxicity"
            },
            "average_instruction_adherence": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Instruction Adherence"
            },
            "average_latency": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Latency"
            },
            "average_output_token_length": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Output Token Length"
            },
            "average_prompt_perplexity": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Prompt Perplexity"
            },
            "average_retriever_attribution": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Retriever Attribution"
            },
            "average_retriever_utilization": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Retriever Utilization"
            },
            "average_sexist": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Sexist"
            },
            "average_tool_selection_quality": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Tool Selection Quality"
            },
            "average_tool_error_rate": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Tool Error Rate"
            },
            "average_toxicity": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Toxicity"
            },
            "average_total_token_length": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Total Token Length"
            },
            "failures_count": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Failures Count",
              "default": 0
            },
            "requests_count": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Requests Count",
              "default": 0
            },
            "total_cost": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Total Cost",
              "default": 0
            },
            "start_bucket_time": {
              "type": "string",
              "format": "date-time",
              "title": "Start Bucket Time"
            },
            "end_bucket_time": {
              "type": "string",
              "format": "date-time",
              "title": "End Bucket Time"
            },
            "input_tone_values_count": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Input Tone Values Count"
            },
            "tone_values_count": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tone Values Count"
            },
            "pii_values_count": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Pii Values Count"
            },
            "input_pii_values_count": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Input Pii Values Count"
            },
            "prompt_injection_values_count": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Injection Values Count"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "start_bucket_time",
            "end_bucket_time"
          ],
          "title": "BucketedMetrics"
        },
        "BulkFeedbackRatingCreate": {
          "properties": {
            "explanation": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Explanation"
            },
            "rating": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LikeDislikeRating"
                },
                {
                  "$ref": "#/components/schemas/StarRating"
                },
                {
                  "$ref": "#/components/schemas/ScoreRating"
                },
                {
                  "$ref": "#/components/schemas/TagsRating"
                },
                {
                  "$ref": "#/components/schemas/TextRating"
                }
              ],
              "title": "Rating",
              "discriminator": {
                "propertyName": "feedback_type",
                "mapping": {
                  "like_dislike": "#/components/schemas/LikeDislikeRating",
                  "score": "#/components/schemas/ScoreRating",
                  "star": "#/components/schemas/StarRating",
                  "tags": "#/components/schemas/TagsRating",
                  "text": "#/components/schemas/TextRating"
                }
              }
            },
            "feedback_template_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Feedback Template Id"
            },
            "operation_type": {
              "type": "string",
              "const": "create",
              "title": "Operation Type",
              "default": "create"
            }
          },
          "type": "object",
          "required": [
            "rating",
            "feedback_template_id"
          ],
          "title": "BulkFeedbackRatingCreate"
        },
        "BulkFeedbackRatingDelete": {
          "properties": {
            "feedback_template_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Feedback Template Id"
            },
            "operation_type": {
              "type": "string",
              "const": "delete",
              "title": "Operation Type",
              "default": "delete"
            }
          },
          "type": "object",
          "required": [
            "feedback_template_id"
          ],
          "title": "BulkFeedbackRatingDelete"
        },
        "BulkFeedbackRatingStatus": {
          "properties": {
            "index": {
              "type": "integer",
              "title": "Index"
            },
            "operation": {
              "$ref": "#/components/schemas/FeedbackRatingOperationType"
            },
            "success": {
              "type": "boolean",
              "title": "Success"
            },
            "message": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Message"
            }
          },
          "type": "object",
          "required": [
            "index",
            "operation",
            "success",
            "message"
          ],
          "title": "BulkFeedbackRatingStatus"
        },
        "BulkFeedbackRequest": {
          "properties": {
            "operations": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BulkFeedbackRatingCreate"
                  },
                  {
                    "$ref": "#/components/schemas/BulkFeedbackRatingDelete"
                  }
                ],
                "discriminator": {
                  "propertyName": "operation_type",
                  "mapping": {
                    "create": "#/components/schemas/BulkFeedbackRatingCreate",
                    "delete": "#/components/schemas/BulkFeedbackRatingDelete"
                  }
                }
              },
              "type": "array",
              "title": "Operations"
            },
            "selector": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IndexSelector"
                }
              ],
              "title": "Selector",
              "discriminator": {
                "propertyName": "selector_type",
                "mapping": {
                  "indexes": "#/components/schemas/IndexSelector"
                }
              }
            }
          },
          "type": "object",
          "required": [
            "operations",
            "selector"
          ],
          "title": "BulkFeedbackRequest"
        },
        "CBOClusterRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "meta_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Cols"
            }
          },
          "type": "object",
          "title": "CBOClusterRequest"
        },
        "CBOClusterResponse": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "meta_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Cols"
            },
            "cbo_clusters": {
              "items": {
                "$ref": "#/components/schemas/CBORunCluster"
              },
              "type": "array",
              "title": "Cbo Clusters"
            }
          },
          "type": "object",
          "required": [
            "cbo_clusters"
          ],
          "title": "CBOClusterResponse"
        },
        "CBORunCluster": {
          "properties": {
            "id": {
              "type": "integer",
              "title": "Id"
            },
            "labels": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Labels"
            },
            "num_samples": {
              "type": "integer",
              "title": "Num Samples"
            },
            "score": {
              "type": "number",
              "title": "Score"
            }
          },
          "type": "object",
          "required": [
            "id",
            "labels",
            "num_samples",
            "score"
          ],
          "title": "CBORunCluster"
        },
        "CartographCluster": {
          "properties": {
            "cluster_id": {
              "type": "integer",
              "title": "Cluster Id"
            },
            "cluster_size": {
              "type": "integer",
              "title": "Cluster Size"
            },
            "cluster_description": {
              "type": "string",
              "title": "Cluster Description"
            },
            "cluster_summary": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Cluster Summary"
            },
            "cluster_topic": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Cluster Topic"
            },
            "average_dep": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Dep"
            },
            "average_f1": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average F1"
            },
            "average_confidence": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Confidence"
            }
          },
          "type": "object",
          "required": [
            "cluster_id",
            "cluster_size",
            "cluster_description"
          ],
          "title": "CartographCluster",
          "description": "Information about a Cartograph embedding cluster."
        },
        "CartographClusterResponse": {
          "properties": {
            "cartograph_clusters": {
              "items": {
                "$ref": "#/components/schemas/CartographCluster"
              },
              "type": "array",
              "title": "Cartograph Clusters"
            }
          },
          "type": "object",
          "required": [
            "cartograph_clusters"
          ],
          "title": "CartographClusterResponse"
        },
        "CategoricalPromptFilterParam": {
          "properties": {
            "column": {
              "type": "string",
              "title": "Column"
            },
            "filter_type": {
              "type": "string",
              "const": "category",
              "title": "Filter Type"
            },
            "categories": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Categories"
            },
            "operator": {
              "$ref": "#/components/schemas/CategoryFilterOperator",
              "description": "Operator to use when checking if the value is in the categories. If None, we default to 'or'.",
              "default": "any"
            }
          },
          "type": "object",
          "required": [
            "column",
            "filter_type",
            "categories"
          ],
          "title": "CategoricalPromptFilterParam"
        },
        "CategoryFilterOperator": {
          "type": "string",
          "enum": [
            "any",
            "all",
            "exact",
            "none"
          ],
          "title": "CategoryFilterOperator"
        },
        "ChainPollTemplate": {
          "properties": {
            "metric_system_prompt": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric System Prompt",
              "description": "System prompt for the metric."
            },
            "metric_description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Description",
              "description": "Description of what the metric should do."
            },
            "value_field_name": {
              "type": "string",
              "title": "Value Field Name",
              "description": "Field name to look for in the chainpoll response, for the rating.",
              "default": "rating"
            },
            "explanation_field_name": {
              "type": "string",
              "title": "Explanation Field Name",
              "description": "Field name to look for in the chainpoll response, for the explanation.",
              "default": "explanation"
            },
            "template": {
              "type": "string",
              "title": "Template",
              "description": "Chainpoll prompt template."
            },
            "metric_few_shot_examples": {
              "items": {
                "$ref": "#/components/schemas/FewShotExample"
              },
              "type": "array",
              "title": "Metric Few Shot Examples",
              "description": "Few-shot examples for the metric."
            }
          },
          "type": "object",
          "required": [
            "template"
          ],
          "title": "ChainPollTemplate",
          "description": "Template for a chainpoll metric prompt,\ncontaining all the info necessary to send a chainpoll prompt."
        },
        "ChainRow": {
          "properties": {
            "node_id": {
              "type": "string",
              "format": "uuid",
              "title": "Node Id"
            },
            "node_type": {
              "$ref": "#/components/schemas/NodeType"
            },
            "node_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Node Name"
            },
            "node_input": {
              "type": "string",
              "title": "Node Input",
              "default": ""
            },
            "node_output": {
              "type": "string",
              "title": "Node Output",
              "default": ""
            },
            "tools": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tools"
            },
            "chain_root_id": {
              "type": "string",
              "format": "uuid",
              "title": "Chain Root Id"
            },
            "chain_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Chain Id"
            },
            "step": {
              "type": "integer",
              "title": "Step",
              "default": 0
            },
            "has_children": {
              "type": "boolean",
              "title": "Has Children",
              "default": false
            },
            "inputs": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Inputs"
            },
            "prompt": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt"
            },
            "response": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Response"
            },
            "creation_timestamp": {
              "type": "integer",
              "title": "Creation Timestamp"
            },
            "finish_reason": {
              "type": "string",
              "title": "Finish Reason",
              "default": ""
            },
            "latency": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Latency"
            },
            "query_input_tokens": {
              "type": "integer",
              "title": "Query Input Tokens",
              "default": 0
            },
            "query_output_tokens": {
              "type": "integer",
              "title": "Query Output Tokens",
              "default": 0
            },
            "query_total_tokens": {
              "type": "integer",
              "title": "Query Total Tokens",
              "default": 0
            },
            "params": {
              "type": "object",
              "title": "Params"
            },
            "expected_output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Expected Output"
            }
          },
          "type": "object",
          "required": [
            "node_id",
            "node_type",
            "chain_root_id"
          ],
          "title": "ChainRow"
        },
        "ChainStep": {
          "properties": {
            "type": {
              "type": "string",
              "const": "chain",
              "title": "Type",
              "description": "Type of the step. By default, it is set to chain.",
              "default": "chain"
            },
            "input": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/Document-Input"
                },
                {
                  "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                },
                {
                  "type": "object"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/Document-Input"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                }
              ],
              "title": "Input",
              "description": "Input to the step."
            },
            "output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/Document-Input"
                },
                {
                  "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                },
                {
                  "type": "object"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/Document-Input"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                }
              ],
              "title": "Output",
              "description": "Output of the step.",
              "default": ""
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at_ns": {
              "type": "integer",
              "title": "Created At Ns",
              "description": "Timestamp of the step's creation, as nanoseconds since epoch."
            },
            "duration_ns": {
              "type": "integer",
              "title": "Duration Ns",
              "description": "Duration of the step in nanoseconds.",
              "default": 0
            },
            "metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "Metadata",
              "description": "Metadata associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "ground_truth": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ground Truth",
              "description": "Ground truth expected output for the step."
            },
            "steps": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WorkflowStep"
                  },
                  {
                    "$ref": "#/components/schemas/ChainStep"
                  },
                  {
                    "$ref": "#/components/schemas/LlmStep"
                  },
                  {
                    "$ref": "#/components/schemas/RetrieverStep"
                  },
                  {
                    "$ref": "#/components/schemas/ToolStep"
                  },
                  {
                    "$ref": "#/components/schemas/AgentStep"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "agent": "#/components/schemas/AgentStep",
                    "chain": "#/components/schemas/ChainStep",
                    "llm": "#/components/schemas/LlmStep",
                    "retriever": "#/components/schemas/RetrieverStep",
                    "tool": "#/components/schemas/ToolStep",
                    "workflow": "#/components/schemas/WorkflowStep"
                  }
                }
              },
              "type": "array",
              "title": "Steps",
              "description": "Steps in the workflow."
            },
            "parent": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/StepWithChildren"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Parent node of the current node. For internal use only."
            }
          },
          "type": "object",
          "required": [
            "input"
          ],
          "title": "ChainStep"
        },
        "Changes": {
          "properties": {
            "features": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Features"
            },
            "fixes": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Fixes"
            },
            "breaking": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Breaking"
            },
            "miscellaneous": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Miscellaneous"
            }
          },
          "type": "object",
          "title": "Changes"
        },
        "ChunkAttributionUtilizationScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "chunk_attribution_utilization",
              "title": "Name",
              "default": "chunk_attribution_utilization"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            },
            "type": {
              "type": "string",
              "enum": [
                "luna",
                "plus"
              ],
              "title": "Type",
              "default": "luna"
            },
            "model_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Name",
              "description": "Alias of the model to use for the scorer."
            }
          },
          "type": "object",
          "title": "ChunkAttributionUtilizationScorer"
        },
        "ChunkAttributionUtilizationTemplate": {
          "properties": {
            "metric_system_prompt": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric System Prompt",
              "description": "System prompt for the metric."
            },
            "metric_description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Description",
              "description": "Description of what the metric should do."
            },
            "value_field_name": {
              "type": "string",
              "title": "Value Field Name",
              "description": "Field name to look for in the chainpoll response, for the rating.",
              "default": "rating"
            },
            "explanation_field_name": {
              "type": "string",
              "title": "Explanation Field Name",
              "description": "Field name to look for in the chainpoll response, for the explanation.",
              "default": "explanation"
            },
            "template": {
              "type": "string",
              "title": "Template",
              "default": "I asked someone to answer a question based on one or more documents. You will tell me which of the documents their answer was sourced from, and which specific sentences from the documents they used.\n\nHere are the documents, with each document split up into sentences. Each sentence is given a unique key, such as '0a' for the first sentence of Document 0. You'll use these keys in your response to identify which sentences were used.\n\n```\n{chunks}\n```\n\nThe question was:\n\n```\n{question}\n```\n\nTheir response was:\n\n```\n{response}\n```\n\nRespond with a JSON object matching this schema:\n\n```\n{{\n  \"source_sentence_keys\": [string]\n}}\n```\n\nThe source_sentence_keys field is a list identifying the sentences in the documents that were used to construct the answer. Each entry MUST be a sentence key, such as '0a', that appears in the document list above. Include the key of every sentence that was used to construct the answer, even if it was not used in its entirety. Omit keys for sentences that were not used, and could have been removed from the document without affecting the answer.\n\nYou must respond with a valid JSON string."
            },
            "metric_few_shot_examples": {
              "items": {
                "$ref": "#/components/schemas/FewShotExample"
              },
              "type": "array",
              "title": "Metric Few Shot Examples",
              "description": "Few-shot examples for the metric."
            }
          },
          "type": "object",
          "title": "ChunkAttributionUtilizationTemplate"
        },
        "Circle": {
          "properties": {
            "x": {
              "type": "number",
              "title": "X"
            },
            "y": {
              "type": "number",
              "title": "Y"
            },
            "radius": {
              "type": "number",
              "title": "Radius"
            }
          },
          "type": "object",
          "required": [
            "x",
            "y",
            "radius"
          ],
          "title": "Circle"
        },
        "CollaboratorRole": {
          "type": "string",
          "enum": [
            "owner",
            "editor",
            "annotator",
            "viewer"
          ],
          "title": "CollaboratorRole"
        },
        "CollaboratorRoleInfo": {
          "properties": {
            "name": {
              "$ref": "#/components/schemas/CollaboratorRole",
              "examples": [
                "owner"
              ]
            },
            "display_name": {
              "type": "string",
              "title": "Display Name",
              "examples": [
                "Owner"
              ]
            },
            "description": {
              "type": "string",
              "title": "Description",
              "examples": [
                "Can do anything with the resource."
              ]
            }
          },
          "type": "object",
          "required": [
            "name",
            "display_name",
            "description"
          ],
          "title": "CollaboratorRoleInfo"
        },
        "CollaboratorUpdate": {
          "properties": {
            "role": {
              "$ref": "#/components/schemas/CollaboratorRole"
            }
          },
          "type": "object",
          "required": [
            "role"
          ],
          "title": "CollaboratorUpdate"
        },
        "ColumnCategory": {
          "type": "string",
          "enum": [
            "standard",
            "metric",
            "user_metadata"
          ],
          "title": "ColumnCategory"
        },
        "ColumnInfo": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id",
              "description": "Column id.  Must be universally unique."
            },
            "label": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Label",
              "description": "Display label of the column in the UI."
            },
            "category": {
              "$ref": "#/components/schemas/ColumnCategory",
              "description": "Category of the column."
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description",
              "description": "Description of the column."
            },
            "group_label": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Group Label",
              "description": "Display label of the column group."
            },
            "data_type": {
              "$ref": "#/components/schemas/DataTypeOptions",
              "description": "Data type of the column. This is used to determine how to format the data on the UI.",
              "default": "unknown"
            },
            "multi_valued": {
              "type": "boolean",
              "title": "Multi Valued",
              "description": "Whether the column is multi-valued.",
              "default": false
            },
            "allowed_values": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array",
                  "uniqueItems": true
                },
                {
                  "type": "null"
                }
              ],
              "title": "Allowed Values",
              "description": "Allowed values for this column."
            },
            "threshold": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricThreshold"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Thresholds for the column, if this is a metrics column."
            },
            "sortable": {
              "type": "boolean",
              "title": "Sortable",
              "description": "Whether the column is sortable.",
              "default": true
            },
            "filterable": {
              "type": "boolean",
              "title": "Filterable",
              "description": "Whether the column is filterable by value. Doesn't include categorical filters",
              "default": true
            },
            "applicable_types": {
              "items": {
                "$ref": "#/components/schemas/StepType"
              },
              "type": "array",
              "uniqueItems": true,
              "title": "Applicable Types",
              "description": "List of types applicable for this column."
            }
          },
          "type": "object",
          "required": [
            "id",
            "category"
          ],
          "title": "ColumnInfo"
        },
        "ColumnMapping": {
          "properties": {
            "input": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Input"
            },
            "output": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output"
            },
            "metadata": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metadata"
            }
          },
          "type": "object",
          "required": [
            "input",
            "output",
            "metadata"
          ],
          "title": "ColumnMapping"
        },
        "CommunityResponse": {
          "properties": {
            "score": {
              "type": "integer",
              "title": "Score"
            },
            "labels": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Labels"
            },
            "num_samples": {
              "type": "integer",
              "title": "Num Samples"
            }
          },
          "type": "object",
          "required": [
            "score",
            "labels",
            "num_samples"
          ],
          "title": "CommunityResponse",
          "description": "See `rungalileo.schemas.content.insights.Community` for details on Communities.\n\nBefore returning the results to the UI, we scale the continuous community score to\nan int for better interpretability for the user.\n\n0-0.03 = 1\n0.03-0.07 = 2\n0.07-0.15 = 3\n0.15-0.2=4\n0.2=5"
        },
        "CompareRunsResponse": {
          "properties": {
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "split": {
              "$ref": "#/components/schemas/Split"
            },
            "runs": {
              "items": {
                "$ref": "#/components/schemas/ProjectRunSummary"
              },
              "type": "array",
              "title": "Runs"
            }
          },
          "type": "object",
          "required": [
            "project_id",
            "split",
            "runs"
          ],
          "title": "CompareRunsResponse"
        },
        "CompletenessScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "completeness",
              "title": "Name",
              "default": "completeness"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            },
            "type": {
              "type": "string",
              "enum": [
                "luna",
                "plus"
              ],
              "title": "Type",
              "default": "luna"
            },
            "model_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Name",
              "description": "Alias of the model to use for the scorer."
            },
            "num_judges": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 10,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Judges",
              "description": "Number of judges for the scorer."
            }
          },
          "type": "object",
          "title": "CompletenessScorer"
        },
        "CompletenessTemplate": {
          "properties": {
            "metric_system_prompt": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric System Prompt",
              "description": "System prompt for the metric."
            },
            "metric_description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Description",
              "description": "Description of what the metric should do."
            },
            "value_field_name": {
              "type": "string",
              "title": "Value Field Name",
              "default": "completeness"
            },
            "explanation_field_name": {
              "type": "string",
              "title": "Explanation Field Name",
              "description": "Field name to look for in the chainpoll response, for the explanation.",
              "default": "explanation"
            },
            "template": {
              "type": "string",
              "title": "Template",
              "default": "I asked someone to answer a question based on one or more documents. On a scale of 0 to 1, tell me how well their response covered the relevant information from the documents.\n\nHere is what I said to them, as a JSON string:\n\n```\n{query_json}\n```\n\nHere is what they told me, as a JSON string:\n\n```\n{response_json}\n```\n\nRespond in the following JSON format:\n\n```\n{{\n    \"explanation\": string,\n    \"completeness\": number\n}}\n```\n\n\"explanation\": A string with your step-by-step reasoning process. List out each piece of information covered in the documents. For each one, explain why it was or was not relevant to the question, and how well the response covered it. Do *not* give an overall assessment of the response here, just think step by step about each piece of information, one at a time. Present your work in a document-by-document format, considering each document separately, ensure the value is a valid string.\n\n\"completeness\": A floating-point number rating the Completeness of the response on a scale of 0 to 1. This number should equal the amount of relevant information that was comprehensively covered in the response, divided by the total amount of relevant information in the documents.\n\nYou must respond with a valid JSON string."
            },
            "metric_few_shot_examples": {
              "items": {
                "$ref": "#/components/schemas/FewShotExample"
              },
              "type": "array",
              "title": "Metric Few Shot Examples",
              "description": "Few-shot examples for the metric."
            }
          },
          "type": "object",
          "title": "CompletenessTemplate"
        },
        "CompositeProjectSettings": {
          "properties": {
            "scorers_config": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorersConfig-Input"
                },
                {
                  "type": "null"
                }
              ]
            },
            "metric_weights_configuration": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "$ref": "#/components/schemas/MetricWeight"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Weights Configuration"
            },
            "alerts_configuration": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AlertsConfiguration-Input"
                },
                {
                  "type": "null"
                }
              ]
            },
            "scorers_configuration": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorersConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            },
            "registered_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/RegisteredScorer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorers Configuration"
            },
            "generated_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/GeneratedScorerConfig"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorers Configuration"
            },
            "customized_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/CustomizedScorer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Customized Scorers Configuration"
            }
          },
          "type": "object",
          "title": "CompositeProjectSettings"
        },
        "ContentRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "meta_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Cols"
            }
          },
          "type": "object",
          "title": "ContentRequest"
        },
        "ContextAdherenceScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "context_adherence",
              "title": "Name",
              "default": "context_adherence"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            },
            "type": {
              "type": "string",
              "enum": [
                "luna",
                "plus"
              ],
              "title": "Type",
              "default": "luna"
            },
            "model_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Name",
              "description": "Alias of the model to use for the scorer."
            },
            "num_judges": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 10,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Judges",
              "description": "Number of judges for the scorer."
            }
          },
          "type": "object",
          "title": "ContextAdherenceScorer"
        },
        "ContextRelevanceScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "context_relevance",
              "title": "Name",
              "default": "context_relevance"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            }
          },
          "type": "object",
          "title": "ContextRelevanceScorer"
        },
        "CorrectnessScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "correctness",
              "title": "Name",
              "default": "correctness"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            },
            "type": {
              "type": "string",
              "const": "plus",
              "title": "Type",
              "default": "plus"
            },
            "model_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Name",
              "description": "Alias of the model to use for the scorer."
            },
            "num_judges": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 10,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Judges",
              "description": "Number of judges for the scorer."
            }
          },
          "type": "object",
          "title": "CorrectnessScorer"
        },
        "CreateAlertConfigurationRequest": {
          "properties": {
            "conditions": {
              "items": {
                "$ref": "#/components/schemas/AlertCondition"
              },
              "type": "array",
              "title": "Conditions"
            },
            "filters": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AlertNameFilter"
                  }
                ],
                "discriminator": {
                  "propertyName": "name",
                  "mapping": {
                    "node_name": "#/components/schemas/AlertNameFilter"
                  }
                }
              },
              "type": "array",
              "title": "Filters"
            },
            "interval": {
              "type": "integer",
              "title": "Interval"
            },
            "schema_version": {
              "$ref": "#/components/schemas/AlertMonitorType",
              "default": "multi_condition/object/1"
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            }
          },
          "type": "object",
          "required": [
            "conditions",
            "interval"
          ],
          "title": "CreateAlertConfigurationRequest"
        },
        "CreateApiKeyRequest": {
          "properties": {
            "description": {
              "type": "string",
              "title": "Description"
            },
            "expires_at": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Expires At",
              "description": "Expiry date for the API key"
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            },
            "project_role": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CollaboratorRole"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "required": [
            "description"
          ],
          "title": "CreateApiKeyRequest"
        },
        "CreateApiKeyResponse": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "last_used": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Used"
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            },
            "project_role": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CollaboratorRole"
                },
                {
                  "type": "null"
                }
              ]
            },
            "description": {
              "type": "string",
              "title": "Description"
            },
            "expires_at": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Expires At",
              "description": "Expiry date for the API key"
            },
            "created_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Created By"
            },
            "truncated": {
              "type": "string",
              "title": "Truncated"
            },
            "api_key": {
              "type": "string",
              "title": "Api Key"
            }
          },
          "type": "object",
          "required": [
            "id",
            "created_at",
            "updated_at",
            "description",
            "created_by",
            "truncated",
            "api_key"
          ],
          "title": "CreateApiKeyResponse"
        },
        "CreateComputeScoreRequest": {
          "properties": {
            "scorers_config": {
              "$ref": "#/components/schemas/ScorersConfig-Input"
            },
            "recompute_settings": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/RecomputeSettingsRuns"
                },
                {
                  "$ref": "#/components/schemas/RecomputeSettingsProject"
                },
                {
                  "$ref": "#/components/schemas/promptgalileo__schemas__metric_critique__RecomputeSettingsObserve"
                }
              ],
              "title": "Recompute Settings",
              "discriminator": {
                "propertyName": "mode",
                "mapping": {
                  "observe_filters": "#/components/schemas/promptgalileo__schemas__metric_critique__RecomputeSettingsObserve",
                  "project": "#/components/schemas/RecomputeSettingsProject",
                  "runs": "#/components/schemas/RecomputeSettingsRuns"
                }
              }
            }
          },
          "type": "object",
          "required": [
            "scorers_config",
            "recompute_settings"
          ],
          "title": "CreateComputeScoreRequest"
        },
        "CreateGeneratedScorerRequest": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            },
            "instructions": {
              "type": "string",
              "title": "Instructions"
            },
            "chain_poll_template": {
              "$ref": "#/components/schemas/ChainPollTemplate"
            },
            "scoreable_node_types": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/NodeType"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scoreable Node Types"
            },
            "scorer_configuration": {
              "$ref": "#/components/schemas/GeneratedScorerConfiguration"
            }
          },
          "type": "object",
          "required": [
            "name",
            "instructions",
            "chain_poll_template"
          ],
          "title": "CreateGeneratedScorerRequest"
        },
        "CreateJobRequest": {
          "properties": {
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "job_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Job Id"
            },
            "job_name": {
              "type": "string",
              "title": "Job Name",
              "default": "default"
            },
            "should_retry": {
              "type": "boolean",
              "title": "Should Retry",
              "default": true
            },
            "user_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            },
            "task_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaskType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "labels": {
              "anyOf": [
                {
                  "items": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ],
              "title": "Labels"
            },
            "ner_labels": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ner Labels"
            },
            "tasks": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tasks"
            },
            "non_inference_logged": {
              "type": "boolean",
              "title": "Non Inference Logged",
              "default": false
            },
            "migration_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Migration Name"
            },
            "xray": {
              "type": "boolean",
              "title": "Xray",
              "default": true
            },
            "process_existing_inference_runs": {
              "type": "boolean",
              "title": "Process Existing Inference Runs",
              "default": false
            },
            "feature_names": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Feature Names"
            },
            "prompt_dataset_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Dataset Id"
            },
            "dataset_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Dataset Id"
            },
            "dataset_version_index": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Dataset Version Index"
            },
            "prompt_template_version_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Template Version Id"
            },
            "monitor_batch_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Monitor Batch Id"
            },
            "protect_trace_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Protect Trace Id"
            },
            "protect_scorer_payload": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "binary"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Protect Scorer Payload"
            },
            "prompt_settings": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PromptRunSettings-Input"
                },
                {
                  "type": "null"
                }
              ]
            },
            "scorers": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/ScorerConfig"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/AgenticWorkflowSuccessScorer"
                      },
                      {
                        "$ref": "#/components/schemas/AgenticSessionSuccessScorer"
                      },
                      {
                        "$ref": "#/components/schemas/BleuScorer"
                      },
                      {
                        "$ref": "#/components/schemas/ChunkAttributionUtilizationScorer"
                      },
                      {
                        "$ref": "#/components/schemas/CompletenessScorer"
                      },
                      {
                        "$ref": "#/components/schemas/ContextAdherenceScorer"
                      },
                      {
                        "$ref": "#/components/schemas/ContextRelevanceScorer"
                      },
                      {
                        "$ref": "#/components/schemas/CorrectnessScorer"
                      },
                      {
                        "$ref": "#/components/schemas/GroundTruthAdherenceScorer"
                      },
                      {
                        "$ref": "#/components/schemas/InputPIIScorer"
                      },
                      {
                        "$ref": "#/components/schemas/InputSexistScorer"
                      },
                      {
                        "$ref": "#/components/schemas/InputToneScorer"
                      },
                      {
                        "$ref": "#/components/schemas/InputToxicityScorer"
                      },
                      {
                        "$ref": "#/components/schemas/InstructionAdherenceScorer"
                      },
                      {
                        "$ref": "#/components/schemas/OutputPIIScorer"
                      },
                      {
                        "$ref": "#/components/schemas/OutputSexistScorer"
                      },
                      {
                        "$ref": "#/components/schemas/OutputToneScorer"
                      },
                      {
                        "$ref": "#/components/schemas/OutputToxicityScorer"
                      },
                      {
                        "$ref": "#/components/schemas/PromptInjectionScorer"
                      },
                      {
                        "$ref": "#/components/schemas/PromptPerplexityScorer"
                      },
                      {
                        "$ref": "#/components/schemas/RougeScorer"
                      },
                      {
                        "$ref": "#/components/schemas/ToolErrorRateScorer"
                      },
                      {
                        "$ref": "#/components/schemas/ToolSelectionQualityScorer"
                      },
                      {
                        "$ref": "#/components/schemas/UncertaintyScorer"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "agentic_session_success": "#/components/schemas/AgenticSessionSuccessScorer",
                        "agentic_workflow_success": "#/components/schemas/AgenticWorkflowSuccessScorer",
                        "bleu": "#/components/schemas/BleuScorer",
                        "chunk_attribution_utilization": "#/components/schemas/ChunkAttributionUtilizationScorer",
                        "completeness": "#/components/schemas/CompletenessScorer",
                        "context_adherence": "#/components/schemas/ContextAdherenceScorer",
                        "context_relevance": "#/components/schemas/ContextRelevanceScorer",
                        "correctness": "#/components/schemas/CorrectnessScorer",
                        "ground_truth_adherence": "#/components/schemas/GroundTruthAdherenceScorer",
                        "input_pii": "#/components/schemas/InputPIIScorer",
                        "input_sexist": "#/components/schemas/InputSexistScorer",
                        "input_tone": "#/components/schemas/InputToneScorer",
                        "input_toxicity": "#/components/schemas/InputToxicityScorer",
                        "instruction_adherence": "#/components/schemas/InstructionAdherenceScorer",
                        "output_pii": "#/components/schemas/OutputPIIScorer",
                        "output_sexist": "#/components/schemas/OutputSexistScorer",
                        "output_tone": "#/components/schemas/OutputToneScorer",
                        "output_toxicity": "#/components/schemas/OutputToxicityScorer",
                        "prompt_injection": "#/components/schemas/PromptInjectionScorer",
                        "prompt_perplexity": "#/components/schemas/PromptPerplexityScorer",
                        "rouge": "#/components/schemas/RougeScorer",
                        "tool_error_rate": "#/components/schemas/ToolErrorRateScorer",
                        "tool_selection_quality": "#/components/schemas/ToolSelectionQualityScorer",
                        "uncertainty": "#/components/schemas/UncertaintyScorer"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scorers",
              "description": "For G2.0 we send all scorers as ScorerConfig, for G1.0 we send preset scorers  as GalileoScorer"
            },
            "prompt_registered_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/RegisteredScorer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Registered Scorers Configuration"
            },
            "prompt_generated_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Generated Scorers Configuration"
            },
            "prompt_scorers_configuration": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorersConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            },
            "prompt_customized_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/CustomizedAgenticSessionSuccessGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedAgenticWorkflowSuccessGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedChunkAttributionUtilizationGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedCompletenessGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedFactualityGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedGroundednessGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedInstructionAdherenceGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedGroundTruthAdherenceGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedToolSelectionQualityGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedToolErrorRateGPTScorer-Input"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "scorer_name",
                      "mapping": {
                        "_customized_agentic_session_success": "#/components/schemas/CustomizedAgenticSessionSuccessGPTScorer-Input",
                        "_customized_agentic_workflow_success": "#/components/schemas/CustomizedAgenticWorkflowSuccessGPTScorer-Input",
                        "_customized_chunk_attribution_utilization_gpt": "#/components/schemas/CustomizedChunkAttributionUtilizationGPTScorer-Input",
                        "_customized_completeness_gpt": "#/components/schemas/CustomizedCompletenessGPTScorer-Input",
                        "_customized_factuality": "#/components/schemas/CustomizedFactualityGPTScorer-Input",
                        "_customized_ground_truth_adherence": "#/components/schemas/CustomizedGroundTruthAdherenceGPTScorer-Input",
                        "_customized_groundedness": "#/components/schemas/CustomizedGroundednessGPTScorer-Input",
                        "_customized_instruction_adherence": "#/components/schemas/CustomizedInstructionAdherenceGPTScorer-Input",
                        "_customized_tool_error_rate": "#/components/schemas/CustomizedToolErrorRateGPTScorer-Input",
                        "_customized_tool_selection_quality": "#/components/schemas/CustomizedToolSelectionQualityGPTScorer-Input"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Customized Scorers Configuration"
            },
            "prompt_scorer_settings": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BaseScorer-Input"
                },
                {
                  "type": "null"
                }
              ]
            },
            "scorer_config": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorerConfig"
                },
                {
                  "type": "null"
                }
              ]
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "prompt_optimization_configuration": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PromptOptimizationConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            },
            "epoch": {
              "type": "integer",
              "title": "Epoch",
              "default": 0
            },
            "metric_critique_configuration": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricCritiqueJobConfiguration-Input"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "required": [
            "project_id",
            "run_id"
          ],
          "title": "CreateJobRequest"
        },
        "CreateJobResponse": {
          "properties": {
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "job_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Job Id"
            },
            "job_name": {
              "type": "string",
              "title": "Job Name",
              "default": "default"
            },
            "should_retry": {
              "type": "boolean",
              "title": "Should Retry",
              "default": true
            },
            "user_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            },
            "task_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaskType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "labels": {
              "anyOf": [
                {
                  "items": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ],
              "title": "Labels"
            },
            "ner_labels": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ner Labels"
            },
            "tasks": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tasks"
            },
            "non_inference_logged": {
              "type": "boolean",
              "title": "Non Inference Logged",
              "default": false
            },
            "migration_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Migration Name"
            },
            "xray": {
              "type": "boolean",
              "title": "Xray",
              "default": true
            },
            "process_existing_inference_runs": {
              "type": "boolean",
              "title": "Process Existing Inference Runs",
              "default": false
            },
            "feature_names": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Feature Names"
            },
            "prompt_dataset_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Dataset Id"
            },
            "dataset_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Dataset Id"
            },
            "dataset_version_index": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Dataset Version Index"
            },
            "prompt_template_version_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Template Version Id"
            },
            "batch_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Batch Id"
            },
            "protect_trace_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Protect Trace Id"
            },
            "protect_scorer_payload": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "binary"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Protect Scorer Payload"
            },
            "prompt_settings": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PromptRunSettings-Output"
                },
                {
                  "type": "null"
                }
              ]
            },
            "scorers": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/ScorerConfig"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/AgenticWorkflowSuccessScorer"
                      },
                      {
                        "$ref": "#/components/schemas/AgenticSessionSuccessScorer"
                      },
                      {
                        "$ref": "#/components/schemas/BleuScorer"
                      },
                      {
                        "$ref": "#/components/schemas/ChunkAttributionUtilizationScorer"
                      },
                      {
                        "$ref": "#/components/schemas/CompletenessScorer"
                      },
                      {
                        "$ref": "#/components/schemas/ContextAdherenceScorer"
                      },
                      {
                        "$ref": "#/components/schemas/ContextRelevanceScorer"
                      },
                      {
                        "$ref": "#/components/schemas/CorrectnessScorer"
                      },
                      {
                        "$ref": "#/components/schemas/GroundTruthAdherenceScorer"
                      },
                      {
                        "$ref": "#/components/schemas/InputPIIScorer"
                      },
                      {
                        "$ref": "#/components/schemas/InputSexistScorer"
                      },
                      {
                        "$ref": "#/components/schemas/InputToneScorer"
                      },
                      {
                        "$ref": "#/components/schemas/InputToxicityScorer"
                      },
                      {
                        "$ref": "#/components/schemas/InstructionAdherenceScorer"
                      },
                      {
                        "$ref": "#/components/schemas/OutputPIIScorer"
                      },
                      {
                        "$ref": "#/components/schemas/OutputSexistScorer"
                      },
                      {
                        "$ref": "#/components/schemas/OutputToneScorer"
                      },
                      {
                        "$ref": "#/components/schemas/OutputToxicityScorer"
                      },
                      {
                        "$ref": "#/components/schemas/PromptInjectionScorer"
                      },
                      {
                        "$ref": "#/components/schemas/PromptPerplexityScorer"
                      },
                      {
                        "$ref": "#/components/schemas/RougeScorer"
                      },
                      {
                        "$ref": "#/components/schemas/ToolErrorRateScorer"
                      },
                      {
                        "$ref": "#/components/schemas/ToolSelectionQualityScorer"
                      },
                      {
                        "$ref": "#/components/schemas/UncertaintyScorer"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "agentic_session_success": "#/components/schemas/AgenticSessionSuccessScorer",
                        "agentic_workflow_success": "#/components/schemas/AgenticWorkflowSuccessScorer",
                        "bleu": "#/components/schemas/BleuScorer",
                        "chunk_attribution_utilization": "#/components/schemas/ChunkAttributionUtilizationScorer",
                        "completeness": "#/components/schemas/CompletenessScorer",
                        "context_adherence": "#/components/schemas/ContextAdherenceScorer",
                        "context_relevance": "#/components/schemas/ContextRelevanceScorer",
                        "correctness": "#/components/schemas/CorrectnessScorer",
                        "ground_truth_adherence": "#/components/schemas/GroundTruthAdherenceScorer",
                        "input_pii": "#/components/schemas/InputPIIScorer",
                        "input_sexist": "#/components/schemas/InputSexistScorer",
                        "input_tone": "#/components/schemas/InputToneScorer",
                        "input_toxicity": "#/components/schemas/InputToxicityScorer",
                        "instruction_adherence": "#/components/schemas/InstructionAdherenceScorer",
                        "output_pii": "#/components/schemas/OutputPIIScorer",
                        "output_sexist": "#/components/schemas/OutputSexistScorer",
                        "output_tone": "#/components/schemas/OutputToneScorer",
                        "output_toxicity": "#/components/schemas/OutputToxicityScorer",
                        "prompt_injection": "#/components/schemas/PromptInjectionScorer",
                        "prompt_perplexity": "#/components/schemas/PromptPerplexityScorer",
                        "rouge": "#/components/schemas/RougeScorer",
                        "tool_error_rate": "#/components/schemas/ToolErrorRateScorer",
                        "tool_selection_quality": "#/components/schemas/ToolSelectionQualityScorer",
                        "uncertainty": "#/components/schemas/UncertaintyScorer"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scorers",
              "description": "For G2.0 we send all scorers as ScorerConfig, for G1.0 we send preset scorers  as GalileoScorer"
            },
            "prompt_registered_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/RegisteredScorer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Registered Scorers Configuration"
            },
            "prompt_generated_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Generated Scorers Configuration"
            },
            "prompt_scorers_configuration": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorersConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            },
            "prompt_customized_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/CustomizedAgenticSessionSuccessGPTScorer-Output"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedAgenticWorkflowSuccessGPTScorer-Output"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedChunkAttributionUtilizationGPTScorer-Output"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedCompletenessGPTScorer-Output"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedFactualityGPTScorer-Output"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedGroundednessGPTScorer-Output"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedInstructionAdherenceGPTScorer-Output"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedGroundTruthAdherenceGPTScorer-Output"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedToolSelectionQualityGPTScorer-Output"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedToolErrorRateGPTScorer-Output"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "scorer_name",
                      "mapping": {
                        "_customized_agentic_session_success": "#/components/schemas/CustomizedAgenticSessionSuccessGPTScorer-Output",
                        "_customized_agentic_workflow_success": "#/components/schemas/CustomizedAgenticWorkflowSuccessGPTScorer-Output",
                        "_customized_chunk_attribution_utilization_gpt": "#/components/schemas/CustomizedChunkAttributionUtilizationGPTScorer-Output",
                        "_customized_completeness_gpt": "#/components/schemas/CustomizedCompletenessGPTScorer-Output",
                        "_customized_factuality": "#/components/schemas/CustomizedFactualityGPTScorer-Output",
                        "_customized_ground_truth_adherence": "#/components/schemas/CustomizedGroundTruthAdherenceGPTScorer-Output",
                        "_customized_groundedness": "#/components/schemas/CustomizedGroundednessGPTScorer-Output",
                        "_customized_instruction_adherence": "#/components/schemas/CustomizedInstructionAdherenceGPTScorer-Output",
                        "_customized_tool_error_rate": "#/components/schemas/CustomizedToolErrorRateGPTScorer-Output",
                        "_customized_tool_selection_quality": "#/components/schemas/CustomizedToolSelectionQualityGPTScorer-Output"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Customized Scorers Configuration"
            },
            "prompt_scorer_settings": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BaseScorer-Output"
                },
                {
                  "type": "null"
                }
              ]
            },
            "scorer_config": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorerConfig"
                },
                {
                  "type": "null"
                }
              ]
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "prompt_optimization_configuration": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PromptOptimizationConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            },
            "epoch": {
              "type": "integer",
              "title": "Epoch",
              "default": 0
            },
            "metric_critique_configuration": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricCritiqueJobConfiguration-Output"
                },
                {
                  "type": "null"
                }
              ]
            },
            "message": {
              "type": "string",
              "title": "Message"
            },
            "link": {
              "type": "string",
              "title": "Link"
            }
          },
          "type": "object",
          "required": [
            "project_id",
            "run_id",
            "message",
            "link"
          ],
          "title": "CreateJobResponse"
        },
        "CreateLLMScorerVersionRequest": {
          "properties": {
            "instructions": {
              "type": "string",
              "title": "Instructions"
            },
            "chain_poll_template": {
              "$ref": "#/components/schemas/ChainPollTemplate"
            }
          },
          "type": "object",
          "required": [
            "instructions",
            "chain_poll_template"
          ],
          "title": "CreateLLMScorerVersionRequest"
        },
        "CreateMetricCritiqueRequest": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id",
              "description": "The id of the metric critique if it's being updated. None if it's a new critique."
            },
            "run_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Run Id"
            },
            "row_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Row Id"
            },
            "critique": {
              "type": "string",
              "title": "Critique"
            },
            "intended_value": {
              "type": "boolean",
              "title": "Intended Value",
              "description": "Set to opposite of actual value for new critiques, and set as same as existing critique intended value for updates."
            }
          },
          "type": "object",
          "required": [
            "run_id",
            "row_id",
            "critique",
            "intended_value"
          ],
          "title": "CreateMetricCritiqueRequest"
        },
        "CreateMetricCritiquesRequest": {
          "properties": {
            "critiques": {
              "items": {
                "$ref": "#/components/schemas/CreateMetricCritiqueRequest"
              },
              "type": "array",
              "minItems": 1,
              "title": "Critiques"
            },
            "metric": {
              "type": "string",
              "title": "Metric"
            },
            "scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scorer Id"
            },
            "recompute_settings": {
              "anyOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/RecomputeSettingsRuns"
                    },
                    {
                      "$ref": "#/components/schemas/RecomputeSettingsProject"
                    },
                    {
                      "$ref": "#/components/schemas/api__schemas__metric_critique__RecomputeSettingsObserve"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "mode",
                    "mapping": {
                      "observe_filters": "#/components/schemas/api__schemas__metric_critique__RecomputeSettingsObserve",
                      "project": "#/components/schemas/RecomputeSettingsProject",
                      "runs": "#/components/schemas/RecomputeSettingsRuns"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Recompute Settings"
            }
          },
          "type": "object",
          "required": [
            "critiques",
            "metric"
          ],
          "title": "CreateMetricCritiquesRequest"
        },
        "CreatePromptTemplateWithVersionRequestBody": {
          "properties": {
            "template": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "$ref": "#/components/schemas/Messages-Input"
                }
              ],
              "title": "Template"
            },
            "version": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Version"
            },
            "name": {
              "type": "string",
              "minLength": 1,
              "title": "Name"
            }
          },
          "type": "object",
          "required": [
            "template",
            "name"
          ],
          "title": "CreatePromptTemplateWithVersionRequestBody",
          "description": "Body to create a new prompt template with version.\n\nThis is only used for parsing the body from the request."
        },
        "CreateRunResponse": {
          "properties": {
            "name": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            },
            "created_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Created By"
            },
            "num_samples": {
              "type": "integer",
              "title": "Num Samples"
            },
            "winner": {
              "type": "boolean",
              "title": "Winner"
            },
            "dataset_hash": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Dataset Hash"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "task_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaskType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "last_updated_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Last Updated By"
            },
            "run_tags": {
              "items": {
                "$ref": "#/components/schemas/RunTagDB"
              },
              "type": "array",
              "title": "Run Tags"
            }
          },
          "type": "object",
          "required": [
            "created_by",
            "num_samples",
            "winner",
            "id",
            "created_at",
            "updated_at",
            "last_updated_by"
          ],
          "title": "CreateRunResponse"
        },
        "CreateScorerRequest": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            },
            "description": {
              "type": "string",
              "title": "Description",
              "default": ""
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Tags"
            },
            "defaults": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorerDefaults"
                },
                {
                  "type": "null"
                }
              ]
            },
            "scorer_type": {
              "$ref": "#/components/schemas/ScorerTypes"
            }
          },
          "type": "object",
          "required": [
            "name",
            "scorer_type"
          ],
          "title": "CreateScorerRequest"
        },
        "CreateSignupLinkResponse": {
          "properties": {
            "signup_url": {
              "type": "string",
              "title": "Signup Url"
            }
          },
          "type": "object",
          "required": [
            "signup_url"
          ],
          "title": "CreateSignupLinkResponse"
        },
        "CreateUpdateRegisteredScorerResponse": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "name": {
              "type": "string",
              "title": "Name"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "created_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Created By"
            },
            "score_type": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Score Type"
            },
            "data_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/DataTypeOptions"
                },
                {
                  "type": "null"
                }
              ]
            },
            "scoreable_node_types": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scoreable Node Types"
            }
          },
          "type": "object",
          "required": [
            "id",
            "name",
            "created_at",
            "updated_at",
            "created_by",
            "score_type",
            "data_type",
            "scoreable_node_types"
          ],
          "title": "CreateUpdateRegisteredScorerResponse"
        },
        "CreateUsageLimitRequest": {
          "properties": {
            "limit": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Limit"
            }
          },
          "type": "object",
          "required": [
            "limit"
          ],
          "title": "CreateUsageLimitRequest"
        },
        "CurrentUserDB": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "permissions": {
              "items": {
                "$ref": "#/components/schemas/Permission"
              },
              "type": "array",
              "title": "Permissions",
              "default": []
            },
            "email": {
              "type": "string",
              "title": "Email"
            },
            "first_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "First Name",
              "default": ""
            },
            "last_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Name",
              "default": ""
            },
            "auth_method": {
              "$ref": "#/components/schemas/AuthMethod",
              "default": "email"
            },
            "role": {
              "$ref": "#/components/schemas/UserRole",
              "default": "read_only"
            },
            "email_is_verified": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Email Is Verified"
            },
            "organization_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Organization Id"
            },
            "organization_name": {
              "type": "string",
              "title": "Organization Name"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "generic_permissions": {
              "items": {
                "$ref": "#/components/schemas/GenericPermission"
              },
              "type": "array",
              "title": "Generic Permissions",
              "default": []
            }
          },
          "type": "object",
          "required": [
            "id",
            "email",
            "organization_id",
            "organization_name",
            "created_at",
            "updated_at"
          ],
          "title": "CurrentUserDB"
        },
        "CustomizedAgenticSessionSuccessGPTScorer-Input": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_agentic_session_success",
              "title": "Scorer Name",
              "default": "_customized_agentic_session_success"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 3
            },
            "name": {
              "type": "string",
              "const": "agentic_session_success",
              "title": "Name",
              "default": "agentic_session_success"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_agentic_session_success"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/AgenticSessionSuccessTemplate",
              "default": {
                "metric_system_prompt": "You will receive the complete chat history from a chatbot application between a user and an assistant.\n\nIn the chat history, the user will ask questions, which are answered with words, or make requests that require calling tools and resolving actions. Sometimes these are given as orders; treat them as if they were questions or requests. Each assistant turn may involve several steps that combine internal reflections, planning steps, selecting tools, and calling tools, and should always end with the assistant replying back to the user.\n\nYou will analyze the entire chat history and will respond back in the following JSON format:\n```json\n{\n    \"all_user_asks\": list[string],\n    \"tasks\": list[dict],\n    \"ai_answered_all_asks\": boolean,\n    \"explanation\": string\n}\n```\nwhere I will now explain how to populate each field.\n\n# Populating: all_user_asks\n\nPopulate `all_user_asks` with a list containing every user ask from the chat history. Review the chat history and generate a list with one entry for each user question, request, order, follow-up, clarification, etc. Ensure that every user ask is a separate item, even if this requires splitting the text mid-sentence. Each item should include enough context to be understandable on its own. It is acceptable to have shared context between items and to incorporate parts of sentences as needed.\n\n# Populating: Tasks\n\nThis is the most complex field to populate. You will write a JSON array where each element is called a task and follows the schema:\n\n```json\n{\n    \"initial_user_ask\": string,\n    \"user_ask_refinements\": list[string],\n    \"final_user_ask\": string,\n    \"direct_answer\": string,\n    \"indirect_answer\": string,\n    \"tools_input_output\": list[string],\n    \"properties\" : {\n        \"coherent\": boolean,\n        \"factually_correct\": boolean,\n        \"comprehensively_answers_final_user_ask\": boolean,\n        \"does_not_contradict_tools_output\": boolean,\n        \"tools_output_summary_is_accurate\": boolean,\n    },\n    \"boolean_properties\": list[boolean],\n    \"answer_satisfies_properties\": boolean\n}\n```\n\nThe high-level goal is to list all tasks and their resolutions and to determine whether each task has been successfully accomplished.\n\n## Step 1: initial_user_ask, user_ask_refinements and final_user_ask\n\nFirst, identify the `initial_user_ask` that starts the task, as well as any `user_ask_refinements` related to the same task. To do this, first loop through the entries in `all_user_asks`. If an entry already appears in a previous task, ignore it; otherwise, consider it as the `initial_user_ask`. Next, examine the remaining entries in `all_user_asks` and fill `user_ask_refinements` with all those related to the `initial_user_ask`, meaning they either refine it or continue the same ask.\n\nFinally, create a coherent `final_user_ask` containing the most updated version of the ask by starting with the initial one and incorporating or replacing any parts with their refinements. This will be the ask that the assistant will attempt to answer.\n\n## Step 2: direct_answer and indirect_answer\n\nExtract every direct and indirect answer that responds to the `final_user_ask`.\n\nAn indirect answer is a part of the assistant's reponse that tries to respond to `final_user_ask` and satisfies any of the following:\n- it mentions limitations or the inability to complete the `final_user_ask`,\n- it references a failed attempt to complete the `final_user_ask`,\n- it suggests offering help with a different ask than the `final_user_ask`,\n- it requests further information or clarifications from the user.\nAdd any piece of the assistant's response looking like an indirect answer to `indirect_answer`.\n\nA direct answer is a part of an assistant's response that either:\n- directly responds to the `final_user_ask`,\n- confirms a successful resolution of the `final_user_ask`.\nIf there are multiple direct answers, simply concatenate them into a longer answer. If there are no direct answers satisfying the above conditions, leave the field `direct_answer` empty.\n\nNote that a piece of an answer cannot be both direct and indirect, you should pick the field in which to add it.\n\n## Step 3: tools_input_output\n\nIf `direct_answer` is empty, skip this step.\n\nExamine each assistant step and identify which tool or function output seemingly contributed to creating any part of the answer from `direct_answer`. If an assistant step immediately before or after the tool call mentions using or having used the tool for answering the `final_user_ask`, the tool call should be associated with this ask. Additionally, if any part of the answer closely aligns with the output of a tool, the tool call should also be associated with this ask.\n\nCreate a list containing the concatenated input and output of each tool used in formulating any part of the answer from `direct_answer`. The tool input is noted as an assistant step before calling the tool, and the tool output is recorded as a tool step.\n\n## Step 4: properties, boolean_properties and answer_satisfies_properties\n\nIf `direct_answer` is empty, set every boolean in `properties`, `boolean_properties` and `answer_satisfies_properties` to `false`.\n\nFor each part of the answer from `direct_answer`, evaluate the following properties one by one to determine which are satisfied and which are not:\n\n- **coherent**: The answer is coherent with itself and does not contain internal contradictions.\n- **factually_correct**: The parts of the answer that do not come from the output of a tool are factually correct.\n- **comprehensively_answers_final_user_ask**: The answer specifically responds to the `final_user_ask`, carefully addressing every aspect of the ask without deviation or omission, ensuring that no details or parts of the ask are left unanswered.\n- **does_not_contradict_tools_output**: No citation of a tool's output contradict any text from `tools_input_output`.\n- **tools_output_summary_is_accurate**: Every summary of a tool's output is accurate with the tool's output from `tools_input_output`. In particular it does not omit critical information relevant to the `final_user_ask` and does not contain made-up information.\n\nAfter assessing each of these properties, copy the resulting boolean values into the list `boolean_properties`.\n\nFinally, set `answer_satisfies_properties` to `false` if any entry in `boolean_properties` is set to `false`; otherwise, set `answer_satisfies_properties` to `true`.\n\n# Populating: ai_answered_all_asks\n\nRespond `true` if every task has `answer_satisfies_properties` set to `true`, otherwise respond `false`. If `all_user_asks` is empty, set `answer_satisfies_properties` to `true`.\n\n# Populating: explanation\n\nIf any user ask has `answer_satisfies_properties` set to `false`, explain why it didn't satisfy all the properties. Otherwise summarize in a few words each ask and the provided answer.\n\nIf `all_user_asks` is empty, mention that you did not find any user ask. If `direct_answer` is empty, mention that no resultion to the `final_user_ask` was provided.\n\nYou must respond with a valid JSON object; be sure to escape special characters.",
                "metric_description": "I have a multi-turn chatbot application where the assistant is an agent that has access to tools. I want a metric that assesses whether the session should be considered successful, in the sense that the assistant fully answered or resolved all user queries and requests.",
                "value_field_name": "ai_answered_all_asks",
                "explanation_field_name": "explanation",
                "template": "Here is a the chatbot history:\n```\n{query}\n```\nNow perform the evaluation on the chat history as described in the system prompt.",
                "metric_few_shot_examples": [
                  {
                    "evaluating_response": "```json\n{\n    \"all_user_asks\": [\n        \"Can you analyze the sentiment of the sentence 'I am really excited about our new project'?\",\n        \"Additionally, fetch a random word of type adverb from the Random Word API.\"\n    ],\n    \"tasks\": [\n        {\n            \"initial_user_ask\": \"Can you analyze the sentiment of the sentence 'I am really excited about our new project'?\",\n            \"user_ask_refinements\": [],\n            \"final_user_ask\": \"Can you analyze the sentiment of the sentence 'I am really excited about our new project'?\",\n            \"direct_answer\": \"The sentiment of the sentence 'I am really excited about our new project' is positive.\",\n            \"indirect_answer\": \"\",\n            \"tools_input_output\": [\n                \"{'arguments': '{\\\\n  \\\"text\\\": \\\"I am really excited about our new project\\\"\\\\n}', 'name': 'main_for_neuronet_nlp'} function: {\\\"error\\\": \\\"\\\", \\\"response\\\": \\\"{0: {'lemma': '\\\\u0131', 'text': 'I', 'dep': 'nsubj', 'pos': 'NUM', 'tag': 'NUM__Number=Sing|NumForm=Roman|NumType=Ord'}, 1: {'lemma': 'a', 'text': 'am', 'dep': 'punct', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 2: {'lemma': 'really', 'text': 'really', 'dep': 'amod', 'pos': 'ADJ', 'tag': 'ADJ__Number=Sing'}, 3: {'lemma': 'excited', 'text': 'excited', 'dep': 'obj', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 4: {'lemma': 'about', 'text': 'about', 'dep': 'obj', 'pos': 'PROPN', 'tag': 'PROPN__NameType=Giv|Number=Sing'}, 5: {'lemma': 'our', 'text': 'our', 'dep': 'appos', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 6: {'lemma': 'new', 'text': 'new', 'dep': 'ROOT', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 7: {'lemma': 'project', 'text': 'project', 'dep': 'compound', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 8: {'lemma': '.', 'text': '.', 'dep': 'punct', 'pos': 'PUNCT', 'tag': 'PUNCT___'}}\\\"}\"\n            ],\n            \"properties\": {      \n                \"coherent\": true,\n                \"factually_correct\": false,\n                \"comprehensively_answers_final_user_ask\": true,\n                \"does_not_contradict_tools_output\": true,\n                \"tools_output_summary_is_accurate\": false\n            },\n            \"boolean_properties\": [true, false, true, true, false],\n            \"answer_satisfies_properties\": false\n        },\n        {\n            \"initial_user_ask\": \"Additionally, fetch a random word of type adverb from the Random Word API.\",\n            \"user_ask_refinements\": [],\n            \"final_user_ask\": \"Additionally, fetch a random word of type adverb from the Random Word API.\",\n            \"direct_answer\": \"The random word of type adverb is 'incarnadine'.\",\n            \"indirect_answer\": \"\",\n            \"tools_input_output\": [\n                \"{'arguments': '{}', 'name': 'v1_randomword_for_random_word_by_api_ninjas'} function: {\\\"error\\\": \\\"\\\", \\\"response\\\": \\\"{'word': 'incarnadine'}\\\"}\"\n            ],\n            \"properties\": {      \n                \"coherent\": true,\n                \"factually_correct\": false,\n                \"comprehensively_answers_final_user_ask\": false,\n                \"does_not_contradict_tools_output\": false,\n                \"tools_output_summary_is_accurate\": false\n            },\n            \"boolean_properties\": [true, false, false, false, false],\n            \"answer_satisfies_properties\": false\n        }\n    ],\n    \"ai_answered_all_asks\": false,\n    \"explanation\": \"The sentiment analysis task is factually incorrect because the tool output does not provide sentiment; it outputs tagged parts of the sentence, and the summary provided does not accurately reflect this. For the task of fetching a random adverb, the answer is factually incorrect and does not comprehensively answer the ask, as the returned word 'incarnadine' is not an adverb according to the tool output.\"\n}\n```\nNow perform the evaluation on the chat history as described in the system prompt.",
                    "generation_prompt_and_response": "Here is a the chatbot history:\n```\nuser: Can you analyze the sentiment of the sentence 'I am really excited about our new project'? Additionally, fetch a random word of type adverb from the Random Word API.\nBegin!\nassistant: I am calling the \"main_for_neuronet_nlp\" function with the argument of the sentence \"I am really excited about our new project\". By doing this, I can analyze the sentiment of the sentence and gain insights into the emotional tone expressed. Additionally, I will use the Neuronet NLP tool to tokenize, split sentences, and perform part-of-speech tagging and named entity recognition for the Azerbaijan language. This will allow me to further analyze the sentence and provide more detailed information about its structure and context.\nassistant: {'arguments': '{\\n  \"text\": \"I am really excited about our new project\"\\n}', 'name': 'main_for_neuronet_nlp'}\nfunction: {\"error\": \"\", \"response\": \"{0: {'lemma': '\\u0131', 'text': 'I', 'dep': 'nsubj', 'pos': 'NUM', 'tag': 'NUM__Number=Sing|NumForm=Roman|NumType=Ord'}, 1: {'lemma': 'a', 'text': 'am', 'dep': 'punct', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 2: {'lemma': 'really', 'text': 'really', 'dep': 'amod', 'pos': 'ADJ', 'tag': 'ADJ__Number=Sing'}, 3: {'lemma': 'excited', 'text': 'excited', 'dep': 'obj', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 4: {'lemma': 'about', 'text': 'about', 'dep': 'obj', 'pos': 'PROPN', 'tag': 'PROPN__NameType=Giv|Number=Sing'}, 5: {'lemma': 'our', 'text': 'our', 'dep': 'appos', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 6: {'lemma': 'new', 'text': 'new', 'dep': 'ROOT', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 7: {'lemma': 'project', 'text': 'project', 'dep': 'compound', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 8: {'lemma': '.', 'text': '.', 'dep': 'punct', 'pos': 'PUNCT', 'tag': 'PUNCT___'}}\"}\nassistant: The previous assistant message explains that the current API call is made to the \"v1_randomword_for_random_word_by_api_ninjas\" function. The purpose of this call is to fetch a random word of type adverb from the Random Word API. By doing this, I can provide the user with an interesting and unique adverb that can be used in their query or sentence. This will add more variety and creativity to their language, enhancing the overall user experience.\nassistant: {'arguments': '{}', 'name': 'v1_randomword_for_random_word_by_api_ninjas'}\nfunction: {\"error\": \"\", \"response\": \"{'word': 'incarnadine'}\"}\nassistant: The sentiment of the sentence 'I am really excited about our new project' is positive. The random word of type adverb is 'incarnadine'.\n```"
                  },
                  {
                    "evaluating_response": "```json\n{\n    \"all_user_asks\": [\n        \"My friend wants to analyze their password 'qwertyuiop' and receive a report that includes the entropy, penalty for irregular entropy distribution, and the penalties for keyboard sequences, number sequences, and repeated characters. Can you output the analysis in YAML format?\"\n    ],\n    \"tasks\": [\n        {\n            \"initial_user_ask\": \"My friend wants to analyze their password 'qwertyuiop' and receive a report that includes the entropy, penalty for irregular entropy distribution, and the penalties for keyboard sequences, number sequences, and repeated characters. Can you output the analysis in YAML format?\",\n            \"user_ask_refinements\": [],\n            \"final_user_ask\": \"My friend wants to analyze their password 'qwertyuiop' and receive a report that includes the entropy, penalty for irregular entropy distribution, and the penalties for keyboard sequences, number sequences, and repeated characters. Can you output the analysis in YAML format?\",\n            \"direct_answer\": \"The password 'qwertyuiop' has an entropy of 20.0559 bits. The penalty for irregular entropy distribution is 0.2500. The penalties for keyboard sequences, number sequences, and repeated characters are 0.2500 each.\",\n            \"indirect_answer\": \"\",\n            \"tools_input_output\": [\n                \"{\\\"password\\\": \\\"qwertyuiop\\\", \\\"outputformat\\\": \\\"yaml\\\"} -\u003E {\\\"error\\\": \\\"\\\", \\\"response\\\": \\\"---\\\\nEntropyResult:\\\\n  summary:\\\\n    summaryItem:\\\\n    - \\\\\\\"*** password:             qwertyuiop    \\\\\\\"\\\\n    - \\\\\\\"*** penalty param:        0.2500        \\\\\\\"\\\\n    - \\\\\\\"*** length:               10 characters \\\\\\\"\\\\n    - \\\\\\\"*** entropy:              20.0559 bits  \\\\\\\"\\\\n    - \\\\\\\"*** ideal entropy:        80.2237 bits  \\\\\\\"\\\\n    - \\\\\\\"*** efficiency:           25.00 %       \\\\\\\"\\\\n    - \\\\\\\"***                                     \\\\\\\"\\\\n    - \\\\\\\"                          q      w      e      r      t      y      u     \\\\\\\\\\\\n      \\\\\\\\ i      o      p      \\\\\\\"\\\\n    - \\\\\\\"*** entr. distribution:   10.00% 10.00% 10.00% 10.00% 10.00% 10.00% 10.00%\\\\\\\\\\\\n      \\\\\\\\ 10.00% 10.00% 10.00% \\\\\\\"\\\\n    - \\\\\\\"*** qwertyKeyboard:       0.2500 0.2500 0.2500 0.2500 0.2500 0.2500 0.2500\\\\\\\\\\\\n      \\\\\\\\ 0.2500 0.2500 0.2500 \\\\\\\"\\\\n    - \\\\\\\"*** numberSequence:       \\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7 \\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7 \\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7 \\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7 \\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7 \\\\u0...\\\"}\"\n            ],\n            \"properties\": {\n                \"coherent\": true,\n                \"factually_correct\": true,\n                \"comprehensively_answers_final_user_ask\": false,\n                \"does_not_contradict_tools_output\": true,\n                \"tools_output_summary_is_accurate\": false\n            },\n            \"boolean_properties\": [\n                true,\n                true,\n                false,\n                true,\n                false\n            ],\n            \"answer_satisfies_properties\": false\n        }\n    ],\n    \"ai_answered_all_asks\": false,\n    \"explanation\": \"The assistant did not comprehensively answer the final user ask because it did not deliver the full YAML-formatted report as requested by the user. Additionally, the summary of the tool's output was not accurate as it omitted parts of the YAML output like the ideal entropy, efficiency, entropy distribution, and so on.\"\n}\n```\nNow perform the evaluation on the chat history as described in the system prompt.",
                    "generation_prompt_and_response": "Here is a the chatbot history:\n```\nuser: My friend wants to analyze their password 'qwertyuiop' and receive a report that includes the entropy, penalty for irregular entropy distribution, and the penalties for keyboard sequences, number sequences, and repeated characters. Can you output the analysis in YAML format?\nBegin!\nassistant: Based on the user's request, the current API call is made to the \"ec_for_arespass\" function with the arguments: \"password\" set to \"qwertyuiop\", and \"outputformat\" set to \"yaml\". The reason for this call is to analyze the password and generate a report in YAML format that includes the entropy, penalty for irregular entropy distribution, as well as penalties for keyboard sequences, number sequences, and repeated characters. This analysis will provide a comprehensive understanding of the password's strength and any potential vulnerabilities. By using the \"ec_for_arespass\" function with the specified arguments, I can obtain the desired report format for further analysis and discussion with the user.\nassistant: {'arguments': '{\\n  \"password\": \"qwertyuiop\",\\n  \"outputformat\": \"yaml\"\\n}', 'name': 'ec_for_arespass'}\nfunction: {\"error\": \"\", \"response\": \"---\\nEntropyResult:\\n  summary:\\n    summaryItem:\\n    - \\\"*** password:             qwertyuiop    \\\"\\n    - \\\"*** penalty param:        0.2500        \\\"\\n    - \\\"*** length:               10 characters \\\"\\n    - \\\"*** entropy:              20.0559 bits  \\\"\\n    - \\\"*** ideal entropy:        80.2237 bits  \\\"\\n    - \\\"*** efficiency:           25.00 %       \\\"\\n    - \\\"***                                     \\\"\\n    - \\\"                          q      w      e      r      t      y      u     \\\\\\n      \\\\ i      o      p      \\\"\\n    - \\\"*** entr. distribution:   10.00% 10.00% 10.00% 10.00% 10.00% 10.00% 10.00%\\\\\\n      \\\\ 10.00% 10.00% 10.00% \\\"\\n    - \\\"*** qwertyKeyboard:       0.2500 0.2500 0.2500 0.2500 0.2500 0.2500 0.2500\\\\\\n      \\\\ 0.2500 0.2500 0.2500 \\\"\\n    - \\\"*** numberSequence:       \\u00b7\\u00b7\\u00b7\\u00b7\\u00b7\\u00b7 \\u00b7\\u00b7\\u00b7\\u00b7\\u00b7\\u00b7 \\u00b7\\u00b7\\u00b7\\u00b7\\u00b7\\u00b7 \\u00b7\\u00b7\\u00b7\\u00b7\\u00b7\\u00b7 \\u00b7\\u00b7\\u00b7\\u00b7\\u00b7\\u00b7 \\u0...\nassistant: The password 'qwertyuiop' has an entropy of 20.0559 bits. The penalty for irregular entropy distribution is 0.2500. The penalties for keyboard sequences, number sequences, and repeated characters are 0.2500 each.\n```"
                  }
                ]
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            }
          },
          "type": "object",
          "title": "CustomizedAgenticSessionSuccessGPTScorer"
        },
        "CustomizedAgenticSessionSuccessGPTScorer-Output": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_agentic_session_success",
              "title": "Scorer Name",
              "default": "_customized_agentic_session_success"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 3
            },
            "name": {
              "type": "string",
              "const": "agentic_session_success",
              "title": "Name",
              "default": "agentic_session_success"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_agentic_session_success"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/AgenticSessionSuccessTemplate",
              "default": {
                "metric_system_prompt": "You will receive the complete chat history from a chatbot application between a user and an assistant.\n\nIn the chat history, the user will ask questions, which are answered with words, or make requests that require calling tools and resolving actions. Sometimes these are given as orders; treat them as if they were questions or requests. Each assistant turn may involve several steps that combine internal reflections, planning steps, selecting tools, and calling tools, and should always end with the assistant replying back to the user.\n\nYou will analyze the entire chat history and will respond back in the following JSON format:\n```json\n{\n    \"all_user_asks\": list[string],\n    \"tasks\": list[dict],\n    \"ai_answered_all_asks\": boolean,\n    \"explanation\": string\n}\n```\nwhere I will now explain how to populate each field.\n\n# Populating: all_user_asks\n\nPopulate `all_user_asks` with a list containing every user ask from the chat history. Review the chat history and generate a list with one entry for each user question, request, order, follow-up, clarification, etc. Ensure that every user ask is a separate item, even if this requires splitting the text mid-sentence. Each item should include enough context to be understandable on its own. It is acceptable to have shared context between items and to incorporate parts of sentences as needed.\n\n# Populating: Tasks\n\nThis is the most complex field to populate. You will write a JSON array where each element is called a task and follows the schema:\n\n```json\n{\n    \"initial_user_ask\": string,\n    \"user_ask_refinements\": list[string],\n    \"final_user_ask\": string,\n    \"direct_answer\": string,\n    \"indirect_answer\": string,\n    \"tools_input_output\": list[string],\n    \"properties\" : {\n        \"coherent\": boolean,\n        \"factually_correct\": boolean,\n        \"comprehensively_answers_final_user_ask\": boolean,\n        \"does_not_contradict_tools_output\": boolean,\n        \"tools_output_summary_is_accurate\": boolean,\n    },\n    \"boolean_properties\": list[boolean],\n    \"answer_satisfies_properties\": boolean\n}\n```\n\nThe high-level goal is to list all tasks and their resolutions and to determine whether each task has been successfully accomplished.\n\n## Step 1: initial_user_ask, user_ask_refinements and final_user_ask\n\nFirst, identify the `initial_user_ask` that starts the task, as well as any `user_ask_refinements` related to the same task. To do this, first loop through the entries in `all_user_asks`. If an entry already appears in a previous task, ignore it; otherwise, consider it as the `initial_user_ask`. Next, examine the remaining entries in `all_user_asks` and fill `user_ask_refinements` with all those related to the `initial_user_ask`, meaning they either refine it or continue the same ask.\n\nFinally, create a coherent `final_user_ask` containing the most updated version of the ask by starting with the initial one and incorporating or replacing any parts with their refinements. This will be the ask that the assistant will attempt to answer.\n\n## Step 2: direct_answer and indirect_answer\n\nExtract every direct and indirect answer that responds to the `final_user_ask`.\n\nAn indirect answer is a part of the assistant's reponse that tries to respond to `final_user_ask` and satisfies any of the following:\n- it mentions limitations or the inability to complete the `final_user_ask`,\n- it references a failed attempt to complete the `final_user_ask`,\n- it suggests offering help with a different ask than the `final_user_ask`,\n- it requests further information or clarifications from the user.\nAdd any piece of the assistant's response looking like an indirect answer to `indirect_answer`.\n\nA direct answer is a part of an assistant's response that either:\n- directly responds to the `final_user_ask`,\n- confirms a successful resolution of the `final_user_ask`.\nIf there are multiple direct answers, simply concatenate them into a longer answer. If there are no direct answers satisfying the above conditions, leave the field `direct_answer` empty.\n\nNote that a piece of an answer cannot be both direct and indirect, you should pick the field in which to add it.\n\n## Step 3: tools_input_output\n\nIf `direct_answer` is empty, skip this step.\n\nExamine each assistant step and identify which tool or function output seemingly contributed to creating any part of the answer from `direct_answer`. If an assistant step immediately before or after the tool call mentions using or having used the tool for answering the `final_user_ask`, the tool call should be associated with this ask. Additionally, if any part of the answer closely aligns with the output of a tool, the tool call should also be associated with this ask.\n\nCreate a list containing the concatenated input and output of each tool used in formulating any part of the answer from `direct_answer`. The tool input is noted as an assistant step before calling the tool, and the tool output is recorded as a tool step.\n\n## Step 4: properties, boolean_properties and answer_satisfies_properties\n\nIf `direct_answer` is empty, set every boolean in `properties`, `boolean_properties` and `answer_satisfies_properties` to `false`.\n\nFor each part of the answer from `direct_answer`, evaluate the following properties one by one to determine which are satisfied and which are not:\n\n- **coherent**: The answer is coherent with itself and does not contain internal contradictions.\n- **factually_correct**: The parts of the answer that do not come from the output of a tool are factually correct.\n- **comprehensively_answers_final_user_ask**: The answer specifically responds to the `final_user_ask`, carefully addressing every aspect of the ask without deviation or omission, ensuring that no details or parts of the ask are left unanswered.\n- **does_not_contradict_tools_output**: No citation of a tool's output contradict any text from `tools_input_output`.\n- **tools_output_summary_is_accurate**: Every summary of a tool's output is accurate with the tool's output from `tools_input_output`. In particular it does not omit critical information relevant to the `final_user_ask` and does not contain made-up information.\n\nAfter assessing each of these properties, copy the resulting boolean values into the list `boolean_properties`.\n\nFinally, set `answer_satisfies_properties` to `false` if any entry in `boolean_properties` is set to `false`; otherwise, set `answer_satisfies_properties` to `true`.\n\n# Populating: ai_answered_all_asks\n\nRespond `true` if every task has `answer_satisfies_properties` set to `true`, otherwise respond `false`. If `all_user_asks` is empty, set `answer_satisfies_properties` to `true`.\n\n# Populating: explanation\n\nIf any user ask has `answer_satisfies_properties` set to `false`, explain why it didn't satisfy all the properties. Otherwise summarize in a few words each ask and the provided answer.\n\nIf `all_user_asks` is empty, mention that you did not find any user ask. If `direct_answer` is empty, mention that no resultion to the `final_user_ask` was provided.\n\nYou must respond with a valid JSON object; be sure to escape special characters.",
                "metric_description": "I have a multi-turn chatbot application where the assistant is an agent that has access to tools. I want a metric that assesses whether the session should be considered successful, in the sense that the assistant fully answered or resolved all user queries and requests.",
                "value_field_name": "ai_answered_all_asks",
                "explanation_field_name": "explanation",
                "template": "Here is a the chatbot history:\n```\n{query}\n```\nNow perform the evaluation on the chat history as described in the system prompt.",
                "metric_few_shot_examples": [
                  {
                    "evaluating_response": "```json\n{\n    \"all_user_asks\": [\n        \"Can you analyze the sentiment of the sentence 'I am really excited about our new project'?\",\n        \"Additionally, fetch a random word of type adverb from the Random Word API.\"\n    ],\n    \"tasks\": [\n        {\n            \"initial_user_ask\": \"Can you analyze the sentiment of the sentence 'I am really excited about our new project'?\",\n            \"user_ask_refinements\": [],\n            \"final_user_ask\": \"Can you analyze the sentiment of the sentence 'I am really excited about our new project'?\",\n            \"direct_answer\": \"The sentiment of the sentence 'I am really excited about our new project' is positive.\",\n            \"indirect_answer\": \"\",\n            \"tools_input_output\": [\n                \"{'arguments': '{\\\\n  \\\"text\\\": \\\"I am really excited about our new project\\\"\\\\n}', 'name': 'main_for_neuronet_nlp'} function: {\\\"error\\\": \\\"\\\", \\\"response\\\": \\\"{0: {'lemma': '\\\\u0131', 'text': 'I', 'dep': 'nsubj', 'pos': 'NUM', 'tag': 'NUM__Number=Sing|NumForm=Roman|NumType=Ord'}, 1: {'lemma': 'a', 'text': 'am', 'dep': 'punct', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 2: {'lemma': 'really', 'text': 'really', 'dep': 'amod', 'pos': 'ADJ', 'tag': 'ADJ__Number=Sing'}, 3: {'lemma': 'excited', 'text': 'excited', 'dep': 'obj', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 4: {'lemma': 'about', 'text': 'about', 'dep': 'obj', 'pos': 'PROPN', 'tag': 'PROPN__NameType=Giv|Number=Sing'}, 5: {'lemma': 'our', 'text': 'our', 'dep': 'appos', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 6: {'lemma': 'new', 'text': 'new', 'dep': 'ROOT', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 7: {'lemma': 'project', 'text': 'project', 'dep': 'compound', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 8: {'lemma': '.', 'text': '.', 'dep': 'punct', 'pos': 'PUNCT', 'tag': 'PUNCT___'}}\\\"}\"\n            ],\n            \"properties\": {      \n                \"coherent\": true,\n                \"factually_correct\": false,\n                \"comprehensively_answers_final_user_ask\": true,\n                \"does_not_contradict_tools_output\": true,\n                \"tools_output_summary_is_accurate\": false\n            },\n            \"boolean_properties\": [true, false, true, true, false],\n            \"answer_satisfies_properties\": false\n        },\n        {\n            \"initial_user_ask\": \"Additionally, fetch a random word of type adverb from the Random Word API.\",\n            \"user_ask_refinements\": [],\n            \"final_user_ask\": \"Additionally, fetch a random word of type adverb from the Random Word API.\",\n            \"direct_answer\": \"The random word of type adverb is 'incarnadine'.\",\n            \"indirect_answer\": \"\",\n            \"tools_input_output\": [\n                \"{'arguments': '{}', 'name': 'v1_randomword_for_random_word_by_api_ninjas'} function: {\\\"error\\\": \\\"\\\", \\\"response\\\": \\\"{'word': 'incarnadine'}\\\"}\"\n            ],\n            \"properties\": {      \n                \"coherent\": true,\n                \"factually_correct\": false,\n                \"comprehensively_answers_final_user_ask\": false,\n                \"does_not_contradict_tools_output\": false,\n                \"tools_output_summary_is_accurate\": false\n            },\n            \"boolean_properties\": [true, false, false, false, false],\n            \"answer_satisfies_properties\": false\n        }\n    ],\n    \"ai_answered_all_asks\": false,\n    \"explanation\": \"The sentiment analysis task is factually incorrect because the tool output does not provide sentiment; it outputs tagged parts of the sentence, and the summary provided does not accurately reflect this. For the task of fetching a random adverb, the answer is factually incorrect and does not comprehensively answer the ask, as the returned word 'incarnadine' is not an adverb according to the tool output.\"\n}\n```\nNow perform the evaluation on the chat history as described in the system prompt.",
                    "generation_prompt_and_response": "Here is a the chatbot history:\n```\nuser: Can you analyze the sentiment of the sentence 'I am really excited about our new project'? Additionally, fetch a random word of type adverb from the Random Word API.\nBegin!\nassistant: I am calling the \"main_for_neuronet_nlp\" function with the argument of the sentence \"I am really excited about our new project\". By doing this, I can analyze the sentiment of the sentence and gain insights into the emotional tone expressed. Additionally, I will use the Neuronet NLP tool to tokenize, split sentences, and perform part-of-speech tagging and named entity recognition for the Azerbaijan language. This will allow me to further analyze the sentence and provide more detailed information about its structure and context.\nassistant: {'arguments': '{\\n  \"text\": \"I am really excited about our new project\"\\n}', 'name': 'main_for_neuronet_nlp'}\nfunction: {\"error\": \"\", \"response\": \"{0: {'lemma': '\\u0131', 'text': 'I', 'dep': 'nsubj', 'pos': 'NUM', 'tag': 'NUM__Number=Sing|NumForm=Roman|NumType=Ord'}, 1: {'lemma': 'a', 'text': 'am', 'dep': 'punct', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 2: {'lemma': 'really', 'text': 'really', 'dep': 'amod', 'pos': 'ADJ', 'tag': 'ADJ__Number=Sing'}, 3: {'lemma': 'excited', 'text': 'excited', 'dep': 'obj', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 4: {'lemma': 'about', 'text': 'about', 'dep': 'obj', 'pos': 'PROPN', 'tag': 'PROPN__NameType=Giv|Number=Sing'}, 5: {'lemma': 'our', 'text': 'our', 'dep': 'appos', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 6: {'lemma': 'new', 'text': 'new', 'dep': 'ROOT', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 7: {'lemma': 'project', 'text': 'project', 'dep': 'compound', 'pos': 'NOUN', 'tag': 'NOUN__Number=Sing'}, 8: {'lemma': '.', 'text': '.', 'dep': 'punct', 'pos': 'PUNCT', 'tag': 'PUNCT___'}}\"}\nassistant: The previous assistant message explains that the current API call is made to the \"v1_randomword_for_random_word_by_api_ninjas\" function. The purpose of this call is to fetch a random word of type adverb from the Random Word API. By doing this, I can provide the user with an interesting and unique adverb that can be used in their query or sentence. This will add more variety and creativity to their language, enhancing the overall user experience.\nassistant: {'arguments': '{}', 'name': 'v1_randomword_for_random_word_by_api_ninjas'}\nfunction: {\"error\": \"\", \"response\": \"{'word': 'incarnadine'}\"}\nassistant: The sentiment of the sentence 'I am really excited about our new project' is positive. The random word of type adverb is 'incarnadine'.\n```"
                  },
                  {
                    "evaluating_response": "```json\n{\n    \"all_user_asks\": [\n        \"My friend wants to analyze their password 'qwertyuiop' and receive a report that includes the entropy, penalty for irregular entropy distribution, and the penalties for keyboard sequences, number sequences, and repeated characters. Can you output the analysis in YAML format?\"\n    ],\n    \"tasks\": [\n        {\n            \"initial_user_ask\": \"My friend wants to analyze their password 'qwertyuiop' and receive a report that includes the entropy, penalty for irregular entropy distribution, and the penalties for keyboard sequences, number sequences, and repeated characters. Can you output the analysis in YAML format?\",\n            \"user_ask_refinements\": [],\n            \"final_user_ask\": \"My friend wants to analyze their password 'qwertyuiop' and receive a report that includes the entropy, penalty for irregular entropy distribution, and the penalties for keyboard sequences, number sequences, and repeated characters. Can you output the analysis in YAML format?\",\n            \"direct_answer\": \"The password 'qwertyuiop' has an entropy of 20.0559 bits. The penalty for irregular entropy distribution is 0.2500. The penalties for keyboard sequences, number sequences, and repeated characters are 0.2500 each.\",\n            \"indirect_answer\": \"\",\n            \"tools_input_output\": [\n                \"{\\\"password\\\": \\\"qwertyuiop\\\", \\\"outputformat\\\": \\\"yaml\\\"} -\u003E {\\\"error\\\": \\\"\\\", \\\"response\\\": \\\"---\\\\nEntropyResult:\\\\n  summary:\\\\n    summaryItem:\\\\n    - \\\\\\\"*** password:             qwertyuiop    \\\\\\\"\\\\n    - \\\\\\\"*** penalty param:        0.2500        \\\\\\\"\\\\n    - \\\\\\\"*** length:               10 characters \\\\\\\"\\\\n    - \\\\\\\"*** entropy:              20.0559 bits  \\\\\\\"\\\\n    - \\\\\\\"*** ideal entropy:        80.2237 bits  \\\\\\\"\\\\n    - \\\\\\\"*** efficiency:           25.00 %       \\\\\\\"\\\\n    - \\\\\\\"***                                     \\\\\\\"\\\\n    - \\\\\\\"                          q      w      e      r      t      y      u     \\\\\\\\\\\\n      \\\\\\\\ i      o      p      \\\\\\\"\\\\n    - \\\\\\\"*** entr. distribution:   10.00% 10.00% 10.00% 10.00% 10.00% 10.00% 10.00%\\\\\\\\\\\\n      \\\\\\\\ 10.00% 10.00% 10.00% \\\\\\\"\\\\n    - \\\\\\\"*** qwertyKeyboard:       0.2500 0.2500 0.2500 0.2500 0.2500 0.2500 0.2500\\\\\\\\\\\\n      \\\\\\\\ 0.2500 0.2500 0.2500 \\\\\\\"\\\\n    - \\\\\\\"*** numberSequence:       \\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7 \\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7 \\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7 \\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7 \\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7\\\\u00b7 \\\\u0...\\\"}\"\n            ],\n            \"properties\": {\n                \"coherent\": true,\n                \"factually_correct\": true,\n                \"comprehensively_answers_final_user_ask\": false,\n                \"does_not_contradict_tools_output\": true,\n                \"tools_output_summary_is_accurate\": false\n            },\n            \"boolean_properties\": [\n                true,\n                true,\n                false,\n                true,\n                false\n            ],\n            \"answer_satisfies_properties\": false\n        }\n    ],\n    \"ai_answered_all_asks\": false,\n    \"explanation\": \"The assistant did not comprehensively answer the final user ask because it did not deliver the full YAML-formatted report as requested by the user. Additionally, the summary of the tool's output was not accurate as it omitted parts of the YAML output like the ideal entropy, efficiency, entropy distribution, and so on.\"\n}\n```\nNow perform the evaluation on the chat history as described in the system prompt.",
                    "generation_prompt_and_response": "Here is a the chatbot history:\n```\nuser: My friend wants to analyze their password 'qwertyuiop' and receive a report that includes the entropy, penalty for irregular entropy distribution, and the penalties for keyboard sequences, number sequences, and repeated characters. Can you output the analysis in YAML format?\nBegin!\nassistant: Based on the user's request, the current API call is made to the \"ec_for_arespass\" function with the arguments: \"password\" set to \"qwertyuiop\", and \"outputformat\" set to \"yaml\". The reason for this call is to analyze the password and generate a report in YAML format that includes the entropy, penalty for irregular entropy distribution, as well as penalties for keyboard sequences, number sequences, and repeated characters. This analysis will provide a comprehensive understanding of the password's strength and any potential vulnerabilities. By using the \"ec_for_arespass\" function with the specified arguments, I can obtain the desired report format for further analysis and discussion with the user.\nassistant: {'arguments': '{\\n  \"password\": \"qwertyuiop\",\\n  \"outputformat\": \"yaml\"\\n}', 'name': 'ec_for_arespass'}\nfunction: {\"error\": \"\", \"response\": \"---\\nEntropyResult:\\n  summary:\\n    summaryItem:\\n    - \\\"*** password:             qwertyuiop    \\\"\\n    - \\\"*** penalty param:        0.2500        \\\"\\n    - \\\"*** length:               10 characters \\\"\\n    - \\\"*** entropy:              20.0559 bits  \\\"\\n    - \\\"*** ideal entropy:        80.2237 bits  \\\"\\n    - \\\"*** efficiency:           25.00 %       \\\"\\n    - \\\"***                                     \\\"\\n    - \\\"                          q      w      e      r      t      y      u     \\\\\\n      \\\\ i      o      p      \\\"\\n    - \\\"*** entr. distribution:   10.00% 10.00% 10.00% 10.00% 10.00% 10.00% 10.00%\\\\\\n      \\\\ 10.00% 10.00% 10.00% \\\"\\n    - \\\"*** qwertyKeyboard:       0.2500 0.2500 0.2500 0.2500 0.2500 0.2500 0.2500\\\\\\n      \\\\ 0.2500 0.2500 0.2500 \\\"\\n    - \\\"*** numberSequence:       \\u00b7\\u00b7\\u00b7\\u00b7\\u00b7\\u00b7 \\u00b7\\u00b7\\u00b7\\u00b7\\u00b7\\u00b7 \\u00b7\\u00b7\\u00b7\\u00b7\\u00b7\\u00b7 \\u00b7\\u00b7\\u00b7\\u00b7\\u00b7\\u00b7 \\u00b7\\u00b7\\u00b7\\u00b7\\u00b7\\u00b7 \\u0...\nassistant: The password 'qwertyuiop' has an entropy of 20.0559 bits. The penalty for irregular entropy distribution is 0.2500. The penalties for keyboard sequences, number sequences, and repeated characters are 0.2500 each.\n```"
                  }
                ]
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            }
          },
          "type": "object",
          "title": "CustomizedAgenticSessionSuccessGPTScorer"
        },
        "CustomizedAgenticWorkflowSuccessGPTScorer-Input": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_agentic_workflow_success",
              "title": "Scorer Name",
              "default": "_customized_agentic_workflow_success"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 5
            },
            "name": {
              "type": "string",
              "const": "agentic_workflow_success",
              "title": "Name",
              "default": "agentic_workflow_success"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_agentic_workflow_success"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/AgenticWorkflowSuccessTemplate",
              "default": {
                "metric_system_prompt": "You will receive the chat history from a chatbot application between a user and an AI. At the end of the chat history, it is AI’s turn to act.\n\nIn the chat history, the user can either ask questions, which are answered with words, or make requests that require calling tools and actions to resolve. Sometimes these are given as orders, and these should be treated as questions or requests. The AI's turn may involve several steps which are a combination of internal reflections, planning, selecting tools, calling tools, and ends with the AI replying to the user. \nYour task involves the following steps:\n\n########################\n\nStep 1: user_last_input and user_ask\n\nFirst, identify the user's last input in the chat history. From this input, create a list with one entry for each user question, request, or order. If there are no user asks in the user's last input, leave the list empty and skip ahead, considering the AI's turn successful.\n\n########################\n\nStep 2: ai_final_response and answer_or_resolution\n\nIdentify the AI's final response to the user: it is the very last step in the AI's turn.\n\nFor every user_ask, focus on ai_final_response and try to extract either an answer or a resolution using the following definitions:\n- An answer is a part of the AI's final response that directly responds to all or part of a user's question, or asks for further information or clarification.\n- A resolution is a part of the AI's final response that confirms a successful resolution, or asks for further information or clarification in order to answer a user's request.\n\nIf the AI's final response does not address the user ask, simply write \"No answer or resolution provided in the final response\". Do not shorten the answer or resolution; provide the entire relevant part.\n\n########################\n\nStep 3: tools_input_output\n\nExamine every step in the AI's turn and identify which tool/function step seemingly contributed to creating the answer or resolution. Every tool call should be linked to a user ask. If an AI step immediately before or after the tool call mentions planning or using a tool for answering a user ask, the tool call should be associated with that user ask. If the answer or resolution strongly resembles the output of a tool, the tool call should also be associated with that user ask.\n\nCreate a list containing the concatenation of the entire input and output of every tool used in formulating the answer or resolution. The tool input is listed as an AI step before calling the tool, and the tool output is listed as a tool step.\n\n########################\n\nStep 4: properties, boolean_properties and answer_successful\n\nFor every answer or resolution from Step 2, check the following properties one by one to determine which are satisfied:\n- factually_wrong: the answer contains factual errors.\n- addresses_different_ask: the answer or resolution addresses a slightly different user ask (make sure to differentiate this from asking clarifying questions related to the current ask).\n- not_adherent_to_tools_output: the answer or resolution includes citations from a tool's output, but some are wrongly copied or attributed.\n- mentions_inability: the answer or resolution mentions an inability to complete the user ask.\n- mentions_unsuccessful_attempt: the answer or resolution mentions an unsuccessful or failed attempt to complete the user ask.\n\nThen copy all the properties (only the boolean value) in the list boolean_properties.\n\nFinally, set answer_successful to `false` if any entry in boolean_properties is set to `true`, otherwise set answer_successful to `true`.\n\n########################\n\nYou must respond in the following JSON format:\n```\n{\n    \"user_last_input\": string,\n    \"ai_final_response\": string,\n    \"asks_and_answers\": list[dict],\n    \"ai_turn_is_successful\": boolean,\n    \"explanation\": string\n}\n```\n\nYour tasks are defined as follows:\n\n- **\"asks_and_answers\"**: Perform all the tasks described in the steps above. Your answer should be a list where each user ask appears as:\n\n```\n{\n    \"user_ask\": string,\n    \"answer_or_resolution\": string,\n    \"tools_input_output\": list[string],\n    \"properties\" : {\n        \"factually_wrong\": boolean,\n        \"addresses_different_ask\": boolean,\n        \"not_adherent_to_tools_output\": boolean,\n        \"mentions_inability\": boolean,\n        \"mentions_unsuccessful_attempt\": boolean\n    },\n    \"boolean_properties\": list[boolean],\n    \"answer_successful\": boolean\n}\n```\n\n- **\"ai_turn_is_successful\"**: Respond `true` if at least one answer_successful is True, otherwise respond `false`.\n\n- **\"explanation\"**: If at least one answer was considered successful, explain why. Otherwise explain why all answers were not successful.\n\nYou must respond with a valid JSON object; be sure to escape special characters.",
                "metric_description": "I have a multi-turn chatbot application where the assistant is an agent that has access to tools. An assistant workflow can involves possibly multiple tool selections steps, tool calls steps, and finally a reply to the user. I want a metric that assesses whether each assistant's workflow was thoughtfully planned and ended up helping answer the queries.\n",
                "value_field_name": "ai_turn_is_successful",
                "explanation_field_name": "explanation",
                "template": "Chatbot history:\n```\n{query}\n```\n\nAI's turn:\n```\n{response}\n```",
                "metric_few_shot_examples": [
                  {
                    "evaluating_response": "{\"user_last_input\": \"Can you analyze the given C# code and identify any errors present? Please mention the line numbers where the errors occur, describe their nature, suggest the necessary changes to rectify them and also mention any security vulnerabilities present in the code.\", \"ai_final_response\": \"Sure, please provide the C# code so I can analyze it for errors and security vulnerabilities. \u003C|endoftext|\u003E\", \"asks_and_answers\": [{\"user_ask\": \"Can you analyze the given C# code and identify any errors present? Please mention the line numbers where the errors occur, describe their nature, suggest the necessary changes to rectify them and also mention any security vulnerabilities present in the code.\", \"answer_or_resolution\": \"Sure, please provide the C# code so I can analyze it for errors and security vulnerabilities.\", \"tools_input_output\": [], \"properties\": {\"factually_wrong\": false, \"addresses_different_ask\": false, \"not_adherent_to_tools_output\": false, \"mentions_inability\": false, \"mentions_unsuccessful_attempt\": false}, \"boolean_properties\": [false, false, false, false, false], \"answer_successful\": true}], \"ai_turn_is_successful\": true, \"explanation\": \"The answer was successful because the AI correctly requested further information (the C# code) from the user in order to fulfill the user's request. No errors or issues were present in the response.\"}",
                    "generation_prompt_and_response": "Chatbot history:\n```\nsystem: You are a helpful assistant, with no access to external functions.\nuser: Can you analyze the given C# code and identify any errors present? Please mention the line numbers where the errors occur, describe their nature, suggest the necessary changes to rectify them and also mention any security vulnerabilities present in the code.\n```\n\nAI's turn:\n```\nassistant: Sure, please provide the C# code so I can analyze it for errors and security vulnerabilities. \u003C|endoftext|\u003E\n```"
                  },
                  {
                    "evaluating_response": "{\"user_last_input\": \"Could you please provide me with the list of available languages for text to speech? I want to convert a text into speech in different languages and need to know which languages are supported by the API.\\nBegin!\", \"ai_final_response\": \"The available languages for text to speech are Afrikaans, Albanian, Arabic, Armenian, Catalan, Chinese, Croatian, Czech, Danish, Dutch, English, Esperanto, Finnish, French, German, Greek, Haitian Creole, Hindi, Hungarian, Icelandic, Indonesian, Italian, Japanese, Korean, Latin, Latvian, Macedonian, Norwegian, Polish, Portuguese, Romanian, Russian, Serbian, Slovak, Spanish, Swedish, Turkish, and Vietnamese.\", \"asks_and_answers\": [{\"user_ask\": \"Could you please provide me with the list of available languages for text to speech?\", \"answer_or_resolution\": \"The available languages for text to speech are Afrikaans, Albanian, Arabic, Armenian, Catalan, Chinese, Croatian, Czech, Danish, Dutch, English, Esperanto, Finnish, French, German, Greek, Haitian Creole, Hindi, Hungarian, Icelandic, Indonesian, Italian, Japanese, Korean, Latin, Latvian, Macedonian, Norwegian, Polish, Portuguese, Romanian, Russian, Serbian, Slovak, Spanish, Swedish, Turkish, and Vietnamese.\", \"tools_input_output\": [\"{'arguments': '{}', 'name': 'get_language_for_text_to_speech'}\", \"{\\\"error\\\": \\\"\\\", \\\"response\\\": \\\"{\\\\\\\"af\\\\\\\":\\\\\\\"Afrikaans\\\\\\\",\\\\\\\"sq\\\\\\\":\\\\\\\"Albanian\\\\\\\",\\\\\\\"ar\\\\\\\":\\\\\\\"Arabic\\\\\\\",\\\\\\\"hy\\\\\\\":\\\\\\\"Armenian\\\\\\\",\\\\\\\"ca\\\\\\\":\\\\\\\"Catalan\\\\\\\",\\\\\\\"zh\\\\\\\":\\\\\\\"Chinese\\\\\\\",\\\\\\\"zh-cn\\\\\\\":\\\\\\\"Chinese (Mandarin/China)\\\\\\\",\\\\\\\"zh-tw\\\\\\\":\\\\\\\"Chinese (Mandarin/Taiwan)\\\\\\\",\\\\\\\"zh-yue\\\\\\\":\\\\\\\"Chinese (Cantonese)\\\\\\\",\\\\\\\"hr\\\\\\\":\\\\\\\"Croatian\\\\\\\",\\\\\\\"cs\\\\\\\":\\\\\\\"Czech\\\\\\\",\\\\\\\"da\\\\\\\":\\\\\\\"Danish\\\\\\\",\\\\\\\"nl\\\\\\\":\\\\\\\"Dutch\\\\\\\",\\\\\\\"en\\\\\\\":\\\\\\\"English\\\\\\\",\\\\\\\"en-au\\\\\\\":\\\\\\\"English (Australia)\\\\\\\",\\\\\\\"en-uk\\\\\\\":\\\\\\\"English (United Kingdom)\\\\\\\",\\\\\\\"en-us\\\\\\\":\\\\\\\"English (United States)\\\\\\\",\\\\\\\"eo\\\\\\\":\\\\\\\"Esperanto\\\\\\\",\\\\\\\"fi\\\\\\\":\\\\\\\"Finnish\\\\\\\",\\\\\\\"fr\\\\\\\":\\\\\\\"French\\\\\\\",\\\\\\\"de\\\\\\\":\\\\\\\"German\\\\\\\",\\\\\\\"el\\\\\\\":\\\\\\\"Greek\\\\\\\",\\\\\\\"ht\\\\\\\":\\\\\\\"Haitian Creole\\\\\\\",\\\\\\\"hi\\\\\\\":\\\\\\\"Hindi\\\\\\\",\\\\\\\"hu\\\\\\\":\\\\\\\"Hungarian\\\\\\\",\\\\\\\"is\\\\\\\":\\\\\\\"Icelandic\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"Indonesian\\\\\\\",\\\\\\\"it\\\\\\\":\\\\\\\"Italian\\\\\\\",\\\\\\\"ja\\\\\\\":\\\\\\\"Japanese\\\\\\\",\\\\\\\"ko\\\\\\\":\\\\\\\"Korean\\\\\\\",\\\\\\\"la\\\\\\\":\\\\\\\"Latin\\\\\\\",\\\\\\\"lv\\\\\\\":\\\\\\\"Latvian\\\\\\\",\\\\\\\"mk\\\\\\\":\\\\\\\"Macedonian\\\\\\\",\\\\\\\"no\\\\\\\":\\\\\\\"Norwegian\\\\\\\",\\\\\\\"pl\\\\\\\":\\\\\\\"Polish\\\\\\\",\\\\\\\"pt\\\\\\\":\\\\\\\"Portuguese\\\\\\\",\\\\\\\"pt-br\\\\\\\":\\\\\\\"Portuguese (Brazil)\\\\\\\",\\\\\\\"ro\\\\\\\":\\\\\\\"Romanian\\\\\\\",\\\\\\\"ru\\\\\\\":\\\\\\\"Russian\\\\\\\",\\\\\\\"sr\\\\\\\":\\\\\\\"Serbian\\\\\\\",\\\\\\\"sk\\\\\\\":\\\\\\\"Slovak\\\\\\\",\\\\\\\"es\\\\\\\":\\\\\\\"Spanish\\\\\\\",\\\\\\\"es-es\\\\\\\":\\\\\\\"Spanish (Spain)\\\\\\\",\\\\\\\"es-us\\\\\\\":\\\\\\\"Spanish (United...\"], \"properties\": {\"factually_wrong\": false, \"addresses_different_ask\": false, \"not_adherent_to_tools_output\": true, \"mentions_inability\": false, \"mentions_unsuccessful_attempt\": false}, \"boolean_properties\": [false, false, true, false, false], \"answer_successful\": false}], \"ai_turn_is_successful\": false, \"explanation\": \"The provided answer was not successful because it was not adherent to the tool's output. Some languages and dialects, such as 'Chinese (Mandarin/China)', 'Chinese (Mandarin/Taiwan)', 'Chinese (Cantonese)', 'English (Australia)', 'English (United Kingdom)', 'English (United States)', 'Portuguese (Brazil)', 'Spanish (Spain)', and 'Spanish (United States)' specified in the API response were omitted in the final response to the user.\"}",
                    "generation_prompt_and_response": "Chatbot history:\n```\nuser: Could you please provide me with the list of available languages for text to speech? I want to convert a text into speech in different languages and need to know which languages are supported by the API.\nBegin!\n\n```\n\nAI's turn:\n```\nassistant: I am making this API call to get the list of available languages for text to speech, as the user wants to convert text into speech in different languages. By calling the 'get_language_for_text_to_speech' function with no arguments, I can retrieve the supported languages from the API. This will provide me with the necessary information to assist the user in their query.\nassistant: {'arguments': '{}', 'name': 'get_language_for_text_to_speech'}\nfunction: {\"error\": \"\", \"response\": \"{\\\"af\\\":\\\"Afrikaans\\\",\\\"sq\\\":\\\"Albanian\\\",\\\"ar\\\":\\\"Arabic\\\",\\\"hy\\\":\\\"Armenian\\\",\\\"ca\\\":\\\"Catalan\\\",\\\"zh\\\":\\\"Chinese\\\",\\\"zh-cn\\\":\\\"Chinese (Mandarin/China)\\\",\\\"zh-tw\\\":\\\"Chinese (Mandarin/Taiwan)\\\",\\\"zh-yue\\\":\\\"Chinese (Cantonese)\\\",\\\"hr\\\":\\\"Croatian\\\",\\\"cs\\\":\\\"Czech\\\",\\\"da\\\":\\\"Danish\\\",\\\"nl\\\":\\\"Dutch\\\",\\\"en\\\":\\\"English\\\",\\\"en-au\\\":\\\"English (Australia)\\\",\\\"en-uk\\\":\\\"English (United Kingdom)\\\",\\\"en-us\\\":\\\"English (United States)\\\",\\\"eo\\\":\\\"Esperanto\\\",\\\"fi\\\":\\\"Finnish\\\",\\\"fr\\\":\\\"French\\\",\\\"de\\\":\\\"German\\\",\\\"el\\\":\\\"Greek\\\",\\\"ht\\\":\\\"Haitian Creole\\\",\\\"hi\\\":\\\"Hindi\\\",\\\"hu\\\":\\\"Hungarian\\\",\\\"is\\\":\\\"Icelandic\\\",\\\"id\\\":\\\"Indonesian\\\",\\\"it\\\":\\\"Italian\\\",\\\"ja\\\":\\\"Japanese\\\",\\\"ko\\\":\\\"Korean\\\",\\\"la\\\":\\\"Latin\\\",\\\"lv\\\":\\\"Latvian\\\",\\\"mk\\\":\\\"Macedonian\\\",\\\"no\\\":\\\"Norwegian\\\",\\\"pl\\\":\\\"Polish\\\",\\\"pt\\\":\\\"Portuguese\\\",\\\"pt-br\\\":\\\"Portuguese (Brazil)\\\",\\\"ro\\\":\\\"Romanian\\\",\\\"ru\\\":\\\"Russian\\\",\\\"sr\\\":\\\"Serbian\\\",\\\"sk\\\":\\\"Slovak\\\",\\\"es\\\":\\\"Spanish\\\",\\\"es-es\\\":\\\"Spanish (Spain)\\\",\\\"es-us\\\":\\\"Spanish (United ...\nassistant: The available languages for text to speech are Afrikaans, Albanian, Arabic, Armenian, Catalan, Chinese, Croatian, Czech, Danish, Dutch, English, Esperanto, Finnish, French, German, Greek, Haitian Creole, Hindi, Hungarian, Icelandic, Indonesian, Italian, Japanese, Korean, Latin, Latvian, Macedonian, Norwegian, Polish, Portuguese, Romanian, Russian, Serbian, Slovak, Spanish, Swedish, Turkish, and Vietnamese.\n```"
                  }
                ]
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            }
          },
          "type": "object",
          "title": "CustomizedAgenticWorkflowSuccessGPTScorer"
        },
        "CustomizedAgenticWorkflowSuccessGPTScorer-Output": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_agentic_workflow_success",
              "title": "Scorer Name",
              "default": "_customized_agentic_workflow_success"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 5
            },
            "name": {
              "type": "string",
              "const": "agentic_workflow_success",
              "title": "Name",
              "default": "agentic_workflow_success"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_agentic_workflow_success"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/AgenticWorkflowSuccessTemplate",
              "default": {
                "metric_system_prompt": "You will receive the chat history from a chatbot application between a user and an AI. At the end of the chat history, it is AI’s turn to act.\n\nIn the chat history, the user can either ask questions, which are answered with words, or make requests that require calling tools and actions to resolve. Sometimes these are given as orders, and these should be treated as questions or requests. The AI's turn may involve several steps which are a combination of internal reflections, planning, selecting tools, calling tools, and ends with the AI replying to the user. \nYour task involves the following steps:\n\n########################\n\nStep 1: user_last_input and user_ask\n\nFirst, identify the user's last input in the chat history. From this input, create a list with one entry for each user question, request, or order. If there are no user asks in the user's last input, leave the list empty and skip ahead, considering the AI's turn successful.\n\n########################\n\nStep 2: ai_final_response and answer_or_resolution\n\nIdentify the AI's final response to the user: it is the very last step in the AI's turn.\n\nFor every user_ask, focus on ai_final_response and try to extract either an answer or a resolution using the following definitions:\n- An answer is a part of the AI's final response that directly responds to all or part of a user's question, or asks for further information or clarification.\n- A resolution is a part of the AI's final response that confirms a successful resolution, or asks for further information or clarification in order to answer a user's request.\n\nIf the AI's final response does not address the user ask, simply write \"No answer or resolution provided in the final response\". Do not shorten the answer or resolution; provide the entire relevant part.\n\n########################\n\nStep 3: tools_input_output\n\nExamine every step in the AI's turn and identify which tool/function step seemingly contributed to creating the answer or resolution. Every tool call should be linked to a user ask. If an AI step immediately before or after the tool call mentions planning or using a tool for answering a user ask, the tool call should be associated with that user ask. If the answer or resolution strongly resembles the output of a tool, the tool call should also be associated with that user ask.\n\nCreate a list containing the concatenation of the entire input and output of every tool used in formulating the answer or resolution. The tool input is listed as an AI step before calling the tool, and the tool output is listed as a tool step.\n\n########################\n\nStep 4: properties, boolean_properties and answer_successful\n\nFor every answer or resolution from Step 2, check the following properties one by one to determine which are satisfied:\n- factually_wrong: the answer contains factual errors.\n- addresses_different_ask: the answer or resolution addresses a slightly different user ask (make sure to differentiate this from asking clarifying questions related to the current ask).\n- not_adherent_to_tools_output: the answer or resolution includes citations from a tool's output, but some are wrongly copied or attributed.\n- mentions_inability: the answer or resolution mentions an inability to complete the user ask.\n- mentions_unsuccessful_attempt: the answer or resolution mentions an unsuccessful or failed attempt to complete the user ask.\n\nThen copy all the properties (only the boolean value) in the list boolean_properties.\n\nFinally, set answer_successful to `false` if any entry in boolean_properties is set to `true`, otherwise set answer_successful to `true`.\n\n########################\n\nYou must respond in the following JSON format:\n```\n{\n    \"user_last_input\": string,\n    \"ai_final_response\": string,\n    \"asks_and_answers\": list[dict],\n    \"ai_turn_is_successful\": boolean,\n    \"explanation\": string\n}\n```\n\nYour tasks are defined as follows:\n\n- **\"asks_and_answers\"**: Perform all the tasks described in the steps above. Your answer should be a list where each user ask appears as:\n\n```\n{\n    \"user_ask\": string,\n    \"answer_or_resolution\": string,\n    \"tools_input_output\": list[string],\n    \"properties\" : {\n        \"factually_wrong\": boolean,\n        \"addresses_different_ask\": boolean,\n        \"not_adherent_to_tools_output\": boolean,\n        \"mentions_inability\": boolean,\n        \"mentions_unsuccessful_attempt\": boolean\n    },\n    \"boolean_properties\": list[boolean],\n    \"answer_successful\": boolean\n}\n```\n\n- **\"ai_turn_is_successful\"**: Respond `true` if at least one answer_successful is True, otherwise respond `false`.\n\n- **\"explanation\"**: If at least one answer was considered successful, explain why. Otherwise explain why all answers were not successful.\n\nYou must respond with a valid JSON object; be sure to escape special characters.",
                "metric_description": "I have a multi-turn chatbot application where the assistant is an agent that has access to tools. An assistant workflow can involves possibly multiple tool selections steps, tool calls steps, and finally a reply to the user. I want a metric that assesses whether each assistant's workflow was thoughtfully planned and ended up helping answer the queries.\n",
                "value_field_name": "ai_turn_is_successful",
                "explanation_field_name": "explanation",
                "template": "Chatbot history:\n```\n{query}\n```\n\nAI's turn:\n```\n{response}\n```",
                "metric_few_shot_examples": [
                  {
                    "evaluating_response": "{\"user_last_input\": \"Can you analyze the given C# code and identify any errors present? Please mention the line numbers where the errors occur, describe their nature, suggest the necessary changes to rectify them and also mention any security vulnerabilities present in the code.\", \"ai_final_response\": \"Sure, please provide the C# code so I can analyze it for errors and security vulnerabilities. \u003C|endoftext|\u003E\", \"asks_and_answers\": [{\"user_ask\": \"Can you analyze the given C# code and identify any errors present? Please mention the line numbers where the errors occur, describe their nature, suggest the necessary changes to rectify them and also mention any security vulnerabilities present in the code.\", \"answer_or_resolution\": \"Sure, please provide the C# code so I can analyze it for errors and security vulnerabilities.\", \"tools_input_output\": [], \"properties\": {\"factually_wrong\": false, \"addresses_different_ask\": false, \"not_adherent_to_tools_output\": false, \"mentions_inability\": false, \"mentions_unsuccessful_attempt\": false}, \"boolean_properties\": [false, false, false, false, false], \"answer_successful\": true}], \"ai_turn_is_successful\": true, \"explanation\": \"The answer was successful because the AI correctly requested further information (the C# code) from the user in order to fulfill the user's request. No errors or issues were present in the response.\"}",
                    "generation_prompt_and_response": "Chatbot history:\n```\nsystem: You are a helpful assistant, with no access to external functions.\nuser: Can you analyze the given C# code and identify any errors present? Please mention the line numbers where the errors occur, describe their nature, suggest the necessary changes to rectify them and also mention any security vulnerabilities present in the code.\n```\n\nAI's turn:\n```\nassistant: Sure, please provide the C# code so I can analyze it for errors and security vulnerabilities. \u003C|endoftext|\u003E\n```"
                  },
                  {
                    "evaluating_response": "{\"user_last_input\": \"Could you please provide me with the list of available languages for text to speech? I want to convert a text into speech in different languages and need to know which languages are supported by the API.\\nBegin!\", \"ai_final_response\": \"The available languages for text to speech are Afrikaans, Albanian, Arabic, Armenian, Catalan, Chinese, Croatian, Czech, Danish, Dutch, English, Esperanto, Finnish, French, German, Greek, Haitian Creole, Hindi, Hungarian, Icelandic, Indonesian, Italian, Japanese, Korean, Latin, Latvian, Macedonian, Norwegian, Polish, Portuguese, Romanian, Russian, Serbian, Slovak, Spanish, Swedish, Turkish, and Vietnamese.\", \"asks_and_answers\": [{\"user_ask\": \"Could you please provide me with the list of available languages for text to speech?\", \"answer_or_resolution\": \"The available languages for text to speech are Afrikaans, Albanian, Arabic, Armenian, Catalan, Chinese, Croatian, Czech, Danish, Dutch, English, Esperanto, Finnish, French, German, Greek, Haitian Creole, Hindi, Hungarian, Icelandic, Indonesian, Italian, Japanese, Korean, Latin, Latvian, Macedonian, Norwegian, Polish, Portuguese, Romanian, Russian, Serbian, Slovak, Spanish, Swedish, Turkish, and Vietnamese.\", \"tools_input_output\": [\"{'arguments': '{}', 'name': 'get_language_for_text_to_speech'}\", \"{\\\"error\\\": \\\"\\\", \\\"response\\\": \\\"{\\\\\\\"af\\\\\\\":\\\\\\\"Afrikaans\\\\\\\",\\\\\\\"sq\\\\\\\":\\\\\\\"Albanian\\\\\\\",\\\\\\\"ar\\\\\\\":\\\\\\\"Arabic\\\\\\\",\\\\\\\"hy\\\\\\\":\\\\\\\"Armenian\\\\\\\",\\\\\\\"ca\\\\\\\":\\\\\\\"Catalan\\\\\\\",\\\\\\\"zh\\\\\\\":\\\\\\\"Chinese\\\\\\\",\\\\\\\"zh-cn\\\\\\\":\\\\\\\"Chinese (Mandarin/China)\\\\\\\",\\\\\\\"zh-tw\\\\\\\":\\\\\\\"Chinese (Mandarin/Taiwan)\\\\\\\",\\\\\\\"zh-yue\\\\\\\":\\\\\\\"Chinese (Cantonese)\\\\\\\",\\\\\\\"hr\\\\\\\":\\\\\\\"Croatian\\\\\\\",\\\\\\\"cs\\\\\\\":\\\\\\\"Czech\\\\\\\",\\\\\\\"da\\\\\\\":\\\\\\\"Danish\\\\\\\",\\\\\\\"nl\\\\\\\":\\\\\\\"Dutch\\\\\\\",\\\\\\\"en\\\\\\\":\\\\\\\"English\\\\\\\",\\\\\\\"en-au\\\\\\\":\\\\\\\"English (Australia)\\\\\\\",\\\\\\\"en-uk\\\\\\\":\\\\\\\"English (United Kingdom)\\\\\\\",\\\\\\\"en-us\\\\\\\":\\\\\\\"English (United States)\\\\\\\",\\\\\\\"eo\\\\\\\":\\\\\\\"Esperanto\\\\\\\",\\\\\\\"fi\\\\\\\":\\\\\\\"Finnish\\\\\\\",\\\\\\\"fr\\\\\\\":\\\\\\\"French\\\\\\\",\\\\\\\"de\\\\\\\":\\\\\\\"German\\\\\\\",\\\\\\\"el\\\\\\\":\\\\\\\"Greek\\\\\\\",\\\\\\\"ht\\\\\\\":\\\\\\\"Haitian Creole\\\\\\\",\\\\\\\"hi\\\\\\\":\\\\\\\"Hindi\\\\\\\",\\\\\\\"hu\\\\\\\":\\\\\\\"Hungarian\\\\\\\",\\\\\\\"is\\\\\\\":\\\\\\\"Icelandic\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"Indonesian\\\\\\\",\\\\\\\"it\\\\\\\":\\\\\\\"Italian\\\\\\\",\\\\\\\"ja\\\\\\\":\\\\\\\"Japanese\\\\\\\",\\\\\\\"ko\\\\\\\":\\\\\\\"Korean\\\\\\\",\\\\\\\"la\\\\\\\":\\\\\\\"Latin\\\\\\\",\\\\\\\"lv\\\\\\\":\\\\\\\"Latvian\\\\\\\",\\\\\\\"mk\\\\\\\":\\\\\\\"Macedonian\\\\\\\",\\\\\\\"no\\\\\\\":\\\\\\\"Norwegian\\\\\\\",\\\\\\\"pl\\\\\\\":\\\\\\\"Polish\\\\\\\",\\\\\\\"pt\\\\\\\":\\\\\\\"Portuguese\\\\\\\",\\\\\\\"pt-br\\\\\\\":\\\\\\\"Portuguese (Brazil)\\\\\\\",\\\\\\\"ro\\\\\\\":\\\\\\\"Romanian\\\\\\\",\\\\\\\"ru\\\\\\\":\\\\\\\"Russian\\\\\\\",\\\\\\\"sr\\\\\\\":\\\\\\\"Serbian\\\\\\\",\\\\\\\"sk\\\\\\\":\\\\\\\"Slovak\\\\\\\",\\\\\\\"es\\\\\\\":\\\\\\\"Spanish\\\\\\\",\\\\\\\"es-es\\\\\\\":\\\\\\\"Spanish (Spain)\\\\\\\",\\\\\\\"es-us\\\\\\\":\\\\\\\"Spanish (United...\"], \"properties\": {\"factually_wrong\": false, \"addresses_different_ask\": false, \"not_adherent_to_tools_output\": true, \"mentions_inability\": false, \"mentions_unsuccessful_attempt\": false}, \"boolean_properties\": [false, false, true, false, false], \"answer_successful\": false}], \"ai_turn_is_successful\": false, \"explanation\": \"The provided answer was not successful because it was not adherent to the tool's output. Some languages and dialects, such as 'Chinese (Mandarin/China)', 'Chinese (Mandarin/Taiwan)', 'Chinese (Cantonese)', 'English (Australia)', 'English (United Kingdom)', 'English (United States)', 'Portuguese (Brazil)', 'Spanish (Spain)', and 'Spanish (United States)' specified in the API response were omitted in the final response to the user.\"}",
                    "generation_prompt_and_response": "Chatbot history:\n```\nuser: Could you please provide me with the list of available languages for text to speech? I want to convert a text into speech in different languages and need to know which languages are supported by the API.\nBegin!\n\n```\n\nAI's turn:\n```\nassistant: I am making this API call to get the list of available languages for text to speech, as the user wants to convert text into speech in different languages. By calling the 'get_language_for_text_to_speech' function with no arguments, I can retrieve the supported languages from the API. This will provide me with the necessary information to assist the user in their query.\nassistant: {'arguments': '{}', 'name': 'get_language_for_text_to_speech'}\nfunction: {\"error\": \"\", \"response\": \"{\\\"af\\\":\\\"Afrikaans\\\",\\\"sq\\\":\\\"Albanian\\\",\\\"ar\\\":\\\"Arabic\\\",\\\"hy\\\":\\\"Armenian\\\",\\\"ca\\\":\\\"Catalan\\\",\\\"zh\\\":\\\"Chinese\\\",\\\"zh-cn\\\":\\\"Chinese (Mandarin/China)\\\",\\\"zh-tw\\\":\\\"Chinese (Mandarin/Taiwan)\\\",\\\"zh-yue\\\":\\\"Chinese (Cantonese)\\\",\\\"hr\\\":\\\"Croatian\\\",\\\"cs\\\":\\\"Czech\\\",\\\"da\\\":\\\"Danish\\\",\\\"nl\\\":\\\"Dutch\\\",\\\"en\\\":\\\"English\\\",\\\"en-au\\\":\\\"English (Australia)\\\",\\\"en-uk\\\":\\\"English (United Kingdom)\\\",\\\"en-us\\\":\\\"English (United States)\\\",\\\"eo\\\":\\\"Esperanto\\\",\\\"fi\\\":\\\"Finnish\\\",\\\"fr\\\":\\\"French\\\",\\\"de\\\":\\\"German\\\",\\\"el\\\":\\\"Greek\\\",\\\"ht\\\":\\\"Haitian Creole\\\",\\\"hi\\\":\\\"Hindi\\\",\\\"hu\\\":\\\"Hungarian\\\",\\\"is\\\":\\\"Icelandic\\\",\\\"id\\\":\\\"Indonesian\\\",\\\"it\\\":\\\"Italian\\\",\\\"ja\\\":\\\"Japanese\\\",\\\"ko\\\":\\\"Korean\\\",\\\"la\\\":\\\"Latin\\\",\\\"lv\\\":\\\"Latvian\\\",\\\"mk\\\":\\\"Macedonian\\\",\\\"no\\\":\\\"Norwegian\\\",\\\"pl\\\":\\\"Polish\\\",\\\"pt\\\":\\\"Portuguese\\\",\\\"pt-br\\\":\\\"Portuguese (Brazil)\\\",\\\"ro\\\":\\\"Romanian\\\",\\\"ru\\\":\\\"Russian\\\",\\\"sr\\\":\\\"Serbian\\\",\\\"sk\\\":\\\"Slovak\\\",\\\"es\\\":\\\"Spanish\\\",\\\"es-es\\\":\\\"Spanish (Spain)\\\",\\\"es-us\\\":\\\"Spanish (United ...\nassistant: The available languages for text to speech are Afrikaans, Albanian, Arabic, Armenian, Catalan, Chinese, Croatian, Czech, Danish, Dutch, English, Esperanto, Finnish, French, German, Greek, Haitian Creole, Hindi, Hungarian, Icelandic, Indonesian, Italian, Japanese, Korean, Latin, Latvian, Macedonian, Norwegian, Polish, Portuguese, Romanian, Russian, Serbian, Slovak, Spanish, Swedish, Turkish, and Vietnamese.\n```"
                  }
                ]
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            }
          },
          "type": "object",
          "title": "CustomizedAgenticWorkflowSuccessGPTScorer"
        },
        "CustomizedChunkAttributionUtilizationGPTScorer-Input": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_chunk_attribution_utilization_gpt",
              "title": "Scorer Name",
              "default": "_customized_chunk_attribution_utilization_gpt"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o mini"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 1
            },
            "name": {
              "type": "string",
              "const": "chunk_attribution_utilization",
              "title": "Name",
              "default": "chunk_attribution_utilization"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_chunk_attribution",
                "average_chunk_utilization"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/ChunkAttributionUtilizationTemplate",
              "default": {
                "value_field_name": "rating",
                "explanation_field_name": "explanation",
                "template": "I asked someone to answer a question based on one or more documents. You will tell me which of the documents their answer was sourced from, and which specific sentences from the documents they used.\n\nHere are the documents, with each document split up into sentences. Each sentence is given a unique key, such as '0a' for the first sentence of Document 0. You'll use these keys in your response to identify which sentences were used.\n\n```\n{chunks}\n```\n\nThe question was:\n\n```\n{question}\n```\n\nTheir response was:\n\n```\n{response}\n```\n\nRespond with a JSON object matching this schema:\n\n```\n{{\n  \"source_sentence_keys\": [string]\n}}\n```\n\nThe source_sentence_keys field is a list identifying the sentences in the documents that were used to construct the answer. Each entry MUST be a sentence key, such as '0a', that appears in the document list above. Include the key of every sentence that was used to construct the answer, even if it was not used in its entirety. Omit keys for sentences that were not used, and could have been removed from the document without affecting the answer.\n\nYou must respond with a valid JSON string.",
                "metric_few_shot_examples": []
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            }
          },
          "type": "object",
          "title": "CustomizedChunkAttributionUtilizationGPTScorer"
        },
        "CustomizedChunkAttributionUtilizationGPTScorer-Output": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_chunk_attribution_utilization_gpt",
              "title": "Scorer Name",
              "default": "_customized_chunk_attribution_utilization_gpt"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o mini"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 1
            },
            "name": {
              "type": "string",
              "const": "chunk_attribution_utilization",
              "title": "Name",
              "default": "chunk_attribution_utilization"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_chunk_attribution",
                "average_chunk_utilization"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/ChunkAttributionUtilizationTemplate",
              "default": {
                "value_field_name": "rating",
                "explanation_field_name": "explanation",
                "template": "I asked someone to answer a question based on one or more documents. You will tell me which of the documents their answer was sourced from, and which specific sentences from the documents they used.\n\nHere are the documents, with each document split up into sentences. Each sentence is given a unique key, such as '0a' for the first sentence of Document 0. You'll use these keys in your response to identify which sentences were used.\n\n```\n{chunks}\n```\n\nThe question was:\n\n```\n{question}\n```\n\nTheir response was:\n\n```\n{response}\n```\n\nRespond with a JSON object matching this schema:\n\n```\n{{\n  \"source_sentence_keys\": [string]\n}}\n```\n\nThe source_sentence_keys field is a list identifying the sentences in the documents that were used to construct the answer. Each entry MUST be a sentence key, such as '0a', that appears in the document list above. Include the key of every sentence that was used to construct the answer, even if it was not used in its entirety. Omit keys for sentences that were not used, and could have been removed from the document without affecting the answer.\n\nYou must respond with a valid JSON string.",
                "metric_few_shot_examples": []
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            }
          },
          "type": "object",
          "title": "CustomizedChunkAttributionUtilizationGPTScorer"
        },
        "CustomizedCompletenessGPTScorer-Input": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_completeness_gpt",
              "title": "Scorer Name",
              "default": "_customized_completeness_gpt"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o mini"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 3
            },
            "name": {
              "type": "string",
              "const": "completeness",
              "title": "Name",
              "default": "completeness"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_completeness_gpt"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/CompletenessTemplate",
              "default": {
                "value_field_name": "completeness",
                "explanation_field_name": "explanation",
                "template": "I asked someone to answer a question based on one or more documents. On a scale of 0 to 1, tell me how well their response covered the relevant information from the documents.\n\nHere is what I said to them, as a JSON string:\n\n```\n{query_json}\n```\n\nHere is what they told me, as a JSON string:\n\n```\n{response_json}\n```\n\nRespond in the following JSON format:\n\n```\n{{\n    \"explanation\": string,\n    \"completeness\": number\n}}\n```\n\n\"explanation\": A string with your step-by-step reasoning process. List out each piece of information covered in the documents. For each one, explain why it was or was not relevant to the question, and how well the response covered it. Do *not* give an overall assessment of the response here, just think step by step about each piece of information, one at a time. Present your work in a document-by-document format, considering each document separately, ensure the value is a valid string.\n\n\"completeness\": A floating-point number rating the Completeness of the response on a scale of 0 to 1. This number should equal the amount of relevant information that was comprehensively covered in the response, divided by the total amount of relevant information in the documents.\n\nYou must respond with a valid JSON string.",
                "metric_few_shot_examples": []
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            }
          },
          "type": "object",
          "title": "CustomizedCompletenessGPTScorer"
        },
        "CustomizedCompletenessGPTScorer-Output": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_completeness_gpt",
              "title": "Scorer Name",
              "default": "_customized_completeness_gpt"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o mini"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 3
            },
            "name": {
              "type": "string",
              "const": "completeness",
              "title": "Name",
              "default": "completeness"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_completeness_gpt"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/CompletenessTemplate",
              "default": {
                "value_field_name": "completeness",
                "explanation_field_name": "explanation",
                "template": "I asked someone to answer a question based on one or more documents. On a scale of 0 to 1, tell me how well their response covered the relevant information from the documents.\n\nHere is what I said to them, as a JSON string:\n\n```\n{query_json}\n```\n\nHere is what they told me, as a JSON string:\n\n```\n{response_json}\n```\n\nRespond in the following JSON format:\n\n```\n{{\n    \"explanation\": string,\n    \"completeness\": number\n}}\n```\n\n\"explanation\": A string with your step-by-step reasoning process. List out each piece of information covered in the documents. For each one, explain why it was or was not relevant to the question, and how well the response covered it. Do *not* give an overall assessment of the response here, just think step by step about each piece of information, one at a time. Present your work in a document-by-document format, considering each document separately, ensure the value is a valid string.\n\n\"completeness\": A floating-point number rating the Completeness of the response on a scale of 0 to 1. This number should equal the amount of relevant information that was comprehensively covered in the response, divided by the total amount of relevant information in the documents.\n\nYou must respond with a valid JSON string.",
                "metric_few_shot_examples": []
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            }
          },
          "type": "object",
          "title": "CustomizedCompletenessGPTScorer"
        },
        "CustomizedFactualityGPTScorer-Input": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_factuality",
              "title": "Scorer Name",
              "default": "_customized_factuality"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o mini"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 3
            },
            "name": {
              "type": "string",
              "const": "correctness",
              "title": "Name",
              "default": "correctness"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_factuality"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/FactualityTemplate",
              "default": {
                "metric_system_prompt": "# Task\n\nYou will be given a prompt that was sent to a large language model (LLM), and the LLM's response. Your task is to assess whether the response is factually correct.\n\n## Task output format\n\nYou must respond in the following JSON format:\n\n```\n{\n    \"explanation\": string\n    \"was_factual\": boolean\n}\n```\n\n\"explanation\": Your step-by-step reasoning process. List out the claims made in the response, and for each claim, provide a detailed explanation of why that claim is or is not factual.\n\n\"was_factual\": `true` if the response was completely factually correct according to the instructions above, `false` otherwise.\n\nYou must respond with a valid JSON string.\n\n## Task guidelines\n\n### Input format\n\nIn some cases, the prompt may include multiple messages of chat history. If so, each message will begin with one of the following prefixes:\n\n- \"System: \"\n- \"Human: \"\n- \"AI: \"\n\n### How to determine the value of `was_factual`\n\n- was_factual should be false if anything in the response is factually incorrect, and true otherwise.\n- If the response omits some useful information, but does not include any falsehoods, was_factual should be true.\n- The prompt itself may contain false information. If the response repeats this false information, was_factual should be false. In other words, do not assume that the prompt is factually correct when evaluating the response.\n- If the prompt and response involve a domain where the concept of \"factual accuracy\" doesn't strictly apply, assess whatever quality of the response is most intuitively similar to factual accuracy. For example, if the prompt asks the LLM to write code, assess whether the code is free of syntax errors and implements the intended logic.\n\n### Writing the explanation\n\n- As stated above, a typical explanation should list out the claims made in the response, and for each claim, provide a detailed explanation of why that claim is or is not factual.\n- If the response doesn't make claims per se, break down the response into constituent parts in the most natural way given its content. For example, in code generation tasks, you might break down the response into individual functions or lines of code.\n- Work step by step, and do not give an overall assessment of the response until the end of your explanation.",
                "value_field_name": "was_factual",
                "explanation_field_name": "explanation",
                "template": "The prompt was:\n\n```\n{query}\n```\n\nThe response was:\n\n```\n{response}\n```\n\nRespond with a JSON object having two fields: `explanation` (string) and `was_factual` (boolean). Everything in your response should be valid JSON.\n\nREMEMBER: if the prompt asks the LLM to compose an answer on the basis of a \"context\" or other reference text or texts, you MUST IGNORE these texts when evaluating the response. Evaluate the response as though the reference texts were NOT provided. Do NOT refer to these texts in your evaluation.",
                "metric_few_shot_examples": [
                  {
                    "evaluating_response": "{\n    \"explanation\": \"The response makes several claims about the meaning of \\\"en passant\\\" in chess, then provides an illustrative example. Let's evaluate the claims first, then the example.\\n\\n# Claims\\n\\n1. The response claims that 'en passant' is a special rule in chess that allows a pawn to capture an enemy pawn that has moved two squares forward from its initial position, as if it had only moved one square forward. This claim is factually correct, as 'en passant' indeed allows for such a capture under specified conditions.\\n\\n2. The response also claims that this capture can only be done on the ensuing move and only if the capturing pawn was on its fifth rank at the time. This is also factually correct, as one of the requirements for the 'en passant' capture is that the capturing pawn must be on the fifth rank when the opponent's pawn moves two squares forward.\\n\\n# Illustrative Example\\n\\nFor the purposes of this metric, we'll say that a chess example like this one is \\\"correct\\\" if\\n\\n- All the moves are valid according to the rules of chess\\n- The example demonstrates what it is intended to demonstrate (in this case, the en passant rule)\\n\\nTo check these conditions, let's waslk through the example one move at a time, with a clear description of the board state after each move.\\n\\n### Initial Position\\nThe game starts with the standard initial setup of the chessboard.\\n\\n### Move 1\\n**1. e4 e5**\\n\\n- **White moves pawn from e2 to e4.**\\n  This opens lines for the bishop and queen and controls the center.\\n- **Black moves pawn from e7 to e5.**\\n  This mirrors White's move, also controlling the center.\\n\\n**Board State:**\\n```\\nr n b q k b n r\\np p p     p p p\\n\\n        P\\n        p\\n\\nP P P     P P P\\nR N B Q K B N R\\n```\\n\\n### Move 2\\n**2. d4 d5**\\n\\n- **White moves pawn from d2 to d4.**\\n  Now, White controls more central space and threatens the pawn on e5.\\n- **Black moves pawn from d7 to d5.**\\n  Black counters by challenging the center with another pawn.\\n\\n**Board State:**\\n```\\nr n b q k b n r\\np p   p   p p p\\n\\n        P\\n  p P p P\\n\\nP   P     P P P\\nR N B Q K B N R\\n```\\n\\n### Move 3\\n**3. exd5 exd4**\\n\\n- **White captures the pawn on d5 with the pawn from e4 (exd5).**\\n  Now White has a pawn on d5.\\n- **Black incorrectly moves to exd4.**\\n  According to the rules of chess, this is an illegal move because the pawn on e5 cannot capture a pawn on d4 directly. The pawn on d4 does not exist; the move should capture diagonally if there is a piece or pawn on d4.\\n\\nSince there is an error in Move 3, the illustrative example is not factually correct according to the criteria listed above. Therefore, the example as a whole is not entirely factually correct.\",\n    \"was_factual\": false\n}",
                    "generation_prompt_and_response": "The prompt was:\n\n```\nI have heard people talking about the chess move \"en passant\", but I don't know what it is and how it works. Could you explain it to me?\n```\n\nThe response was:\n\n```\nCertainly! \"En passant\" is a special rule in chess that allows a pawn to capture an enemy pawn that has moved two squares forward from its initial position, as if it had only moved one square forward. This can only be done on the ensuing move, and only if the capturing pawn was on its fifth rank at the time the enemy pawn made its double-move. Here's an example to illustrate:\n\n1. e4 e5\n2. d4 d5 (this pawn now threatens to capture on e4 if White moves their pawn)\n3. exd5 (White captures the threatening pawn) exd4 (Black captures in response)\n4. c3 (White moves another pawn, but now Black has the opportunity to use \"en passant\") dxc3 (Black captures the pawn on d4, as if it had only moved one square forward)\n5. Nxc3\n\nI hope that helps!\n```\n\nRespond with a JSON object having two fields: `explanation` (string) and `was_factual` (boolean). Everything in your response should be valid JSON."
                  },
                  {
                    "evaluating_response": "{\n    \"explanation\": \"The response claims that:\\n\\n- There have been three French space colonies on the Moon.\\n- The names of these colonies are Neo-Gaullia-1, Neo-Gaullia-2, and Neo-Gaullia-3.\\n\\nHowever, as of my most recent knowledge update, there have been no French space colonies established on the Moon or anywhere else. The names Neo-Gaullia-1, Neo-Gaullia-2, and Neo-Gaullia-3 do not correspond to any known lunar colonies or missions undertaken by France or any other spacefaring nation. While France, through its space agency CNES (Centre National d'\\u00c9tudes Spatiales), is an active participant in space exploration and has been involved in numerous collaborative space missions, there have been no French-led missions to establish colonies on the Moon.\",\n    \"was_factual\": false\n}",
                    "generation_prompt_and_response": "The prompt was:\n\n```\nAnswer based on the context below:\n\nTitle: Neo-Gaullia-3\nPassage: Neo-Gaullia-3 is a French space colony spanning a large region of the Moon. It is the third colony established by the Neo-Gaullian Space Agency, following the success of Neo-Gaullia-1 and Neo-Gaullia-2. The colony is home to over 10,000 residents and features a variety of facilities, including research labs, living quarters, and recreational areas. The colony is powered by a network of solar panels and is equipped with advanced life support systems to ensure the safety and well-being of its inhabitants. Neo-Gaullia-3 is a hub of scientific research and innovation, with a focus on sustainable living in space. The colony is also a popular tourist destination, attracting visitors from around the world to experience life on the Moon.\n\nQuestion: How many French space colonies have existed on the Moon?\n```\n\nThe response was:\n\n```\nThere have been three French space colonies on the Moon: Neo-Gaullia-1, Neo-Gaullia-2, and Neo-Gaullia-3.\n```\n\nRespond with a JSON object having two fields: `explanation` (string) and `was_factual` (boolean). Everything in your response should be valid JSON."
                  }
                ]
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            },
            "function_explanation_param_name": {
              "type": "string",
              "title": "Function Explanation Param Name",
              "default": "explanation"
            }
          },
          "type": "object",
          "title": "CustomizedFactualityGPTScorer"
        },
        "CustomizedFactualityGPTScorer-Output": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_factuality",
              "title": "Scorer Name",
              "default": "_customized_factuality"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o mini"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 3
            },
            "name": {
              "type": "string",
              "const": "correctness",
              "title": "Name",
              "default": "correctness"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_factuality"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/FactualityTemplate",
              "default": {
                "metric_system_prompt": "# Task\n\nYou will be given a prompt that was sent to a large language model (LLM), and the LLM's response. Your task is to assess whether the response is factually correct.\n\n## Task output format\n\nYou must respond in the following JSON format:\n\n```\n{\n    \"explanation\": string\n    \"was_factual\": boolean\n}\n```\n\n\"explanation\": Your step-by-step reasoning process. List out the claims made in the response, and for each claim, provide a detailed explanation of why that claim is or is not factual.\n\n\"was_factual\": `true` if the response was completely factually correct according to the instructions above, `false` otherwise.\n\nYou must respond with a valid JSON string.\n\n## Task guidelines\n\n### Input format\n\nIn some cases, the prompt may include multiple messages of chat history. If so, each message will begin with one of the following prefixes:\n\n- \"System: \"\n- \"Human: \"\n- \"AI: \"\n\n### How to determine the value of `was_factual`\n\n- was_factual should be false if anything in the response is factually incorrect, and true otherwise.\n- If the response omits some useful information, but does not include any falsehoods, was_factual should be true.\n- The prompt itself may contain false information. If the response repeats this false information, was_factual should be false. In other words, do not assume that the prompt is factually correct when evaluating the response.\n- If the prompt and response involve a domain where the concept of \"factual accuracy\" doesn't strictly apply, assess whatever quality of the response is most intuitively similar to factual accuracy. For example, if the prompt asks the LLM to write code, assess whether the code is free of syntax errors and implements the intended logic.\n\n### Writing the explanation\n\n- As stated above, a typical explanation should list out the claims made in the response, and for each claim, provide a detailed explanation of why that claim is or is not factual.\n- If the response doesn't make claims per se, break down the response into constituent parts in the most natural way given its content. For example, in code generation tasks, you might break down the response into individual functions or lines of code.\n- Work step by step, and do not give an overall assessment of the response until the end of your explanation.",
                "value_field_name": "was_factual",
                "explanation_field_name": "explanation",
                "template": "The prompt was:\n\n```\n{query}\n```\n\nThe response was:\n\n```\n{response}\n```\n\nRespond with a JSON object having two fields: `explanation` (string) and `was_factual` (boolean). Everything in your response should be valid JSON.\n\nREMEMBER: if the prompt asks the LLM to compose an answer on the basis of a \"context\" or other reference text or texts, you MUST IGNORE these texts when evaluating the response. Evaluate the response as though the reference texts were NOT provided. Do NOT refer to these texts in your evaluation.",
                "metric_few_shot_examples": [
                  {
                    "evaluating_response": "{\n    \"explanation\": \"The response makes several claims about the meaning of \\\"en passant\\\" in chess, then provides an illustrative example. Let's evaluate the claims first, then the example.\\n\\n# Claims\\n\\n1. The response claims that 'en passant' is a special rule in chess that allows a pawn to capture an enemy pawn that has moved two squares forward from its initial position, as if it had only moved one square forward. This claim is factually correct, as 'en passant' indeed allows for such a capture under specified conditions.\\n\\n2. The response also claims that this capture can only be done on the ensuing move and only if the capturing pawn was on its fifth rank at the time. This is also factually correct, as one of the requirements for the 'en passant' capture is that the capturing pawn must be on the fifth rank when the opponent's pawn moves two squares forward.\\n\\n# Illustrative Example\\n\\nFor the purposes of this metric, we'll say that a chess example like this one is \\\"correct\\\" if\\n\\n- All the moves are valid according to the rules of chess\\n- The example demonstrates what it is intended to demonstrate (in this case, the en passant rule)\\n\\nTo check these conditions, let's waslk through the example one move at a time, with a clear description of the board state after each move.\\n\\n### Initial Position\\nThe game starts with the standard initial setup of the chessboard.\\n\\n### Move 1\\n**1. e4 e5**\\n\\n- **White moves pawn from e2 to e4.**\\n  This opens lines for the bishop and queen and controls the center.\\n- **Black moves pawn from e7 to e5.**\\n  This mirrors White's move, also controlling the center.\\n\\n**Board State:**\\n```\\nr n b q k b n r\\np p p     p p p\\n\\n        P\\n        p\\n\\nP P P     P P P\\nR N B Q K B N R\\n```\\n\\n### Move 2\\n**2. d4 d5**\\n\\n- **White moves pawn from d2 to d4.**\\n  Now, White controls more central space and threatens the pawn on e5.\\n- **Black moves pawn from d7 to d5.**\\n  Black counters by challenging the center with another pawn.\\n\\n**Board State:**\\n```\\nr n b q k b n r\\np p   p   p p p\\n\\n        P\\n  p P p P\\n\\nP   P     P P P\\nR N B Q K B N R\\n```\\n\\n### Move 3\\n**3. exd5 exd4**\\n\\n- **White captures the pawn on d5 with the pawn from e4 (exd5).**\\n  Now White has a pawn on d5.\\n- **Black incorrectly moves to exd4.**\\n  According to the rules of chess, this is an illegal move because the pawn on e5 cannot capture a pawn on d4 directly. The pawn on d4 does not exist; the move should capture diagonally if there is a piece or pawn on d4.\\n\\nSince there is an error in Move 3, the illustrative example is not factually correct according to the criteria listed above. Therefore, the example as a whole is not entirely factually correct.\",\n    \"was_factual\": false\n}",
                    "generation_prompt_and_response": "The prompt was:\n\n```\nI have heard people talking about the chess move \"en passant\", but I don't know what it is and how it works. Could you explain it to me?\n```\n\nThe response was:\n\n```\nCertainly! \"En passant\" is a special rule in chess that allows a pawn to capture an enemy pawn that has moved two squares forward from its initial position, as if it had only moved one square forward. This can only be done on the ensuing move, and only if the capturing pawn was on its fifth rank at the time the enemy pawn made its double-move. Here's an example to illustrate:\n\n1. e4 e5\n2. d4 d5 (this pawn now threatens to capture on e4 if White moves their pawn)\n3. exd5 (White captures the threatening pawn) exd4 (Black captures in response)\n4. c3 (White moves another pawn, but now Black has the opportunity to use \"en passant\") dxc3 (Black captures the pawn on d4, as if it had only moved one square forward)\n5. Nxc3\n\nI hope that helps!\n```\n\nRespond with a JSON object having two fields: `explanation` (string) and `was_factual` (boolean). Everything in your response should be valid JSON."
                  },
                  {
                    "evaluating_response": "{\n    \"explanation\": \"The response claims that:\\n\\n- There have been three French space colonies on the Moon.\\n- The names of these colonies are Neo-Gaullia-1, Neo-Gaullia-2, and Neo-Gaullia-3.\\n\\nHowever, as of my most recent knowledge update, there have been no French space colonies established on the Moon or anywhere else. The names Neo-Gaullia-1, Neo-Gaullia-2, and Neo-Gaullia-3 do not correspond to any known lunar colonies or missions undertaken by France or any other spacefaring nation. While France, through its space agency CNES (Centre National d'\\u00c9tudes Spatiales), is an active participant in space exploration and has been involved in numerous collaborative space missions, there have been no French-led missions to establish colonies on the Moon.\",\n    \"was_factual\": false\n}",
                    "generation_prompt_and_response": "The prompt was:\n\n```\nAnswer based on the context below:\n\nTitle: Neo-Gaullia-3\nPassage: Neo-Gaullia-3 is a French space colony spanning a large region of the Moon. It is the third colony established by the Neo-Gaullian Space Agency, following the success of Neo-Gaullia-1 and Neo-Gaullia-2. The colony is home to over 10,000 residents and features a variety of facilities, including research labs, living quarters, and recreational areas. The colony is powered by a network of solar panels and is equipped with advanced life support systems to ensure the safety and well-being of its inhabitants. Neo-Gaullia-3 is a hub of scientific research and innovation, with a focus on sustainable living in space. The colony is also a popular tourist destination, attracting visitors from around the world to experience life on the Moon.\n\nQuestion: How many French space colonies have existed on the Moon?\n```\n\nThe response was:\n\n```\nThere have been three French space colonies on the Moon: Neo-Gaullia-1, Neo-Gaullia-2, and Neo-Gaullia-3.\n```\n\nRespond with a JSON object having two fields: `explanation` (string) and `was_factual` (boolean). Everything in your response should be valid JSON."
                  }
                ]
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            },
            "function_explanation_param_name": {
              "type": "string",
              "title": "Function Explanation Param Name",
              "default": "explanation"
            }
          },
          "type": "object",
          "title": "CustomizedFactualityGPTScorer"
        },
        "CustomizedGroundTruthAdherenceGPTScorer-Input": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_ground_truth_adherence",
              "title": "Scorer Name",
              "default": "_customized_ground_truth_adherence"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o mini"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 3
            },
            "name": {
              "type": "string",
              "const": "ground_truth_adherence",
              "title": "Name",
              "default": "ground_truth_adherence"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_ground_truth_adherence"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/GroundTruthAdherenceTemplate",
              "default": {
                "metric_system_prompt": "I will give you two different texts, called the \"ground truth\" and the \"response.\"\n\nRead both texts, then tell me whether they are \"equivalent,\" in the sense that they basically mean the same thing.\n\nKeep the following guidelines in mind.\n\n- Two texts can be equivalent if they use different phrasing, as long as the phrasing doesn't affect meaning.\n- Two texts can be equivalent if there are _slight_ differences in meaning that wouldn't affect the conclusions that a reasonable reader would draw upon reading them.\n- Imagine that you are grading a free-response exam.  The ground truth given in the answer key for an exam question, and the response is a student's answer to the same question. If you would give the student full marks for this question, that means the two texts are equivalent. If you wouldn't, that means the two texts are not equivalent.\n\nRespond in the following JSON format:\n\n```\n{{\n    \"explanation\": string,\n    \"equivalent\": boolean\n}}\n```\n\n\"explanation\": A step-by-step breakdown of the similarities and differences between the text. For each difference you note (if any), consider why the difference might or might not make the texts non-equivalent, note down your reasoning clearly and explicitly, and ultimately draw a conclusion about whether that difference makes the text non-equivalent.\n\n\"equivalent\": `true` if the texts are equivalent in the sense given above, `false` if they are non-equivalent.\n\nYou must respond with valid JSON.",
                "metric_description": "This metric computes whether a response from a large language model matches a provided ground truth text.",
                "value_field_name": "equivalent",
                "explanation_field_name": "explanation",
                "template": "Ground truth:\n\n```\n{ground_truth}\n```\n\nResponse:\n\n```\n{response}\n```",
                "metric_few_shot_examples": []
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            }
          },
          "type": "object",
          "title": "CustomizedGroundTruthAdherenceGPTScorer"
        },
        "CustomizedGroundTruthAdherenceGPTScorer-Output": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_ground_truth_adherence",
              "title": "Scorer Name",
              "default": "_customized_ground_truth_adherence"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o mini"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 3
            },
            "name": {
              "type": "string",
              "const": "ground_truth_adherence",
              "title": "Name",
              "default": "ground_truth_adherence"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_ground_truth_adherence"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/GroundTruthAdherenceTemplate",
              "default": {
                "metric_system_prompt": "I will give you two different texts, called the \"ground truth\" and the \"response.\"\n\nRead both texts, then tell me whether they are \"equivalent,\" in the sense that they basically mean the same thing.\n\nKeep the following guidelines in mind.\n\n- Two texts can be equivalent if they use different phrasing, as long as the phrasing doesn't affect meaning.\n- Two texts can be equivalent if there are _slight_ differences in meaning that wouldn't affect the conclusions that a reasonable reader would draw upon reading them.\n- Imagine that you are grading a free-response exam.  The ground truth given in the answer key for an exam question, and the response is a student's answer to the same question. If you would give the student full marks for this question, that means the two texts are equivalent. If you wouldn't, that means the two texts are not equivalent.\n\nRespond in the following JSON format:\n\n```\n{{\n    \"explanation\": string,\n    \"equivalent\": boolean\n}}\n```\n\n\"explanation\": A step-by-step breakdown of the similarities and differences between the text. For each difference you note (if any), consider why the difference might or might not make the texts non-equivalent, note down your reasoning clearly and explicitly, and ultimately draw a conclusion about whether that difference makes the text non-equivalent.\n\n\"equivalent\": `true` if the texts are equivalent in the sense given above, `false` if they are non-equivalent.\n\nYou must respond with valid JSON.",
                "metric_description": "This metric computes whether a response from a large language model matches a provided ground truth text.",
                "value_field_name": "equivalent",
                "explanation_field_name": "explanation",
                "template": "Ground truth:\n\n```\n{ground_truth}\n```\n\nResponse:\n\n```\n{response}\n```",
                "metric_few_shot_examples": []
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            }
          },
          "type": "object",
          "title": "CustomizedGroundTruthAdherenceGPTScorer"
        },
        "CustomizedGroundednessGPTScorer-Input": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_groundedness",
              "title": "Scorer Name",
              "default": "_customized_groundedness"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o mini"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 3
            },
            "name": {
              "type": "string",
              "const": "context_adherence",
              "title": "Name",
              "default": "context_adherence"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_groundedness"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/GroundednessTemplate",
              "default": {
                "metric_system_prompt": "The user will provide you with a prompt that was sent to an automatic question-answering system, and that system's response. Both will be provided as JSON strings.\n\nThe prompt will contain one or more documents intended as context which the question-answering system was given as reference material.\n\nYour task is to determine whether the answer was supported by the documents.\n\nThink step by step, and explain your reasoning carefully.\nState your observations first, before drawing any conclusions.\n\nRespond in the following JSON format:\n\n```\n{\n    \"explanation\": string,\n    \"was_supported\": boolean\n}\n```\n\n\"explanation\": Your step-by-step reasoning process. List out the claims made in the response, and for each claim, provide a detailed explanation of why that claim is or is not supported by the documents.\n\n\"was_supported\": `true` if the response was supported by the documents, `false` otherwise.\n\nYou must respond with valid JSON.",
                "metric_description": "I have a RAG (retrieval-augmented generation) system that generates text based on one or more documents that I always include in my prompts. I want a metric that checks whether the generated text was supported by information in the documents. The metric should exhaustively check each claim in the response against the documents, one by one, listing them out explicitly.",
                "value_field_name": "was_supported",
                "explanation_field_name": "explanation",
                "template": "Prompt JSON:\n\n```\n{query_json}\n```\n\nResponse JSON:\n\n```\n{response_json}\n```",
                "metric_few_shot_examples": [
                  {
                    "evaluating_response": "{\n    \"explanation\": \"This response makes a single claim: that 90.4% of the population is not 65 years of age or older.\\n\\nAccording to the provided document, 9.6% of the population is 65 years of age or older. To find the percentage of people who are not 65 years of age or older, we subtract this percentage from 100%:\\n100% - 9.6% = 90.4%\\n\\nThis matches the percentage in the claim, so the claim is supported.\\n\\nSince this is the only claim made in the response, and it was supported, the response is supported as a whole.\",\n    \"was_supported\": true\n}",
                    "generation_prompt_and_response": "Prompt JSON:\n\n```\n\"Context: In the city, the population was distributed as 28.3% under the age of 18, 11.3% from 18 to 24, 32.7% from 25 to 44, 18.2% from 45 to 64, and 9.6% who were 65 years of age or older. The median age was 31 years. For every 100 females, there were 97.3 males. For every 100 females age 18 and over, there were 94.5 males.\\n\\nQuestion: How many in percent weren't 65 years of age or older?\"\n```\n\nResponse JSON:\n\n```\n\"90.4%\"\n```"
                  }
                ]
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            }
          },
          "type": "object",
          "title": "CustomizedGroundednessGPTScorer"
        },
        "CustomizedGroundednessGPTScorer-Output": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_groundedness",
              "title": "Scorer Name",
              "default": "_customized_groundedness"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o mini"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 3
            },
            "name": {
              "type": "string",
              "const": "context_adherence",
              "title": "Name",
              "default": "context_adherence"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_groundedness"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/GroundednessTemplate",
              "default": {
                "metric_system_prompt": "The user will provide you with a prompt that was sent to an automatic question-answering system, and that system's response. Both will be provided as JSON strings.\n\nThe prompt will contain one or more documents intended as context which the question-answering system was given as reference material.\n\nYour task is to determine whether the answer was supported by the documents.\n\nThink step by step, and explain your reasoning carefully.\nState your observations first, before drawing any conclusions.\n\nRespond in the following JSON format:\n\n```\n{\n    \"explanation\": string,\n    \"was_supported\": boolean\n}\n```\n\n\"explanation\": Your step-by-step reasoning process. List out the claims made in the response, and for each claim, provide a detailed explanation of why that claim is or is not supported by the documents.\n\n\"was_supported\": `true` if the response was supported by the documents, `false` otherwise.\n\nYou must respond with valid JSON.",
                "metric_description": "I have a RAG (retrieval-augmented generation) system that generates text based on one or more documents that I always include in my prompts. I want a metric that checks whether the generated text was supported by information in the documents. The metric should exhaustively check each claim in the response against the documents, one by one, listing them out explicitly.",
                "value_field_name": "was_supported",
                "explanation_field_name": "explanation",
                "template": "Prompt JSON:\n\n```\n{query_json}\n```\n\nResponse JSON:\n\n```\n{response_json}\n```",
                "metric_few_shot_examples": [
                  {
                    "evaluating_response": "{\n    \"explanation\": \"This response makes a single claim: that 90.4% of the population is not 65 years of age or older.\\n\\nAccording to the provided document, 9.6% of the population is 65 years of age or older. To find the percentage of people who are not 65 years of age or older, we subtract this percentage from 100%:\\n100% - 9.6% = 90.4%\\n\\nThis matches the percentage in the claim, so the claim is supported.\\n\\nSince this is the only claim made in the response, and it was supported, the response is supported as a whole.\",\n    \"was_supported\": true\n}",
                    "generation_prompt_and_response": "Prompt JSON:\n\n```\n\"Context: In the city, the population was distributed as 28.3% under the age of 18, 11.3% from 18 to 24, 32.7% from 25 to 44, 18.2% from 45 to 64, and 9.6% who were 65 years of age or older. The median age was 31 years. For every 100 females, there were 97.3 males. For every 100 females age 18 and over, there were 94.5 males.\\n\\nQuestion: How many in percent weren't 65 years of age or older?\"\n```\n\nResponse JSON:\n\n```\n\"90.4%\"\n```"
                  }
                ]
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            }
          },
          "type": "object",
          "title": "CustomizedGroundednessGPTScorer"
        },
        "CustomizedInstructionAdherenceGPTScorer-Input": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_instruction_adherence",
              "title": "Scorer Name",
              "default": "_customized_instruction_adherence"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o mini"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 3
            },
            "name": {
              "type": "string",
              "const": "instruction_adherence",
              "title": "Name",
              "default": "instruction_adherence"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_instruction_adherence"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/InstructionAdherenceTemplate",
              "default": {
                "metric_system_prompt": "The user will provide you with a prompt that was sent to a chatbot system, and the chatbot's latest response. Both will be provided as JSON strings.\n\nIn some cases, the prompt may be split up into multiple messages. If so, each message will begin with one of the following prefixes:\n\n- \"System: \"\n- \"Human: \"\n- \"AI: \"\n\nIf you see these prefixes, pay attention to them because they indicate where messages begin and end. Messages prefixed with \"System: \" contain system instructions which the chatbot should follow. Messages prefixed with \"Human: \" are user input. Messages prefixed with \"AI: \" are system responses to user input.\nIf you do not see these prefixes, treat the prompt as though it was a single user input message prefixed with \"Human: \".\n\nYour task is to determine whether the latest response from the chatbot is consistent with the instructions provided in the system prompt (if there is one) or in the first user message (if there is no system prompt).\n\nFocus only on the latest response and the instructions. Do not consider the chat history or any previous messages from the chatbot.\n\nThink step by step, and explain your reasoning carefully.\nState your observations first, before drawing any conclusions.\n\nRespond in the following JSON format:\n\n```\n{\n    \"explanation\": string,\n    \"is_consistent\": boolean\n}\n```\n\n\"explanation\": Your step-by-step reasoning process. List out the relevant instructions and explain whether the latest response adheres to each of them.\n\n\"is_consistent\": `true` if the latest response is consistent with the instructions, `false` otherwise.\n\nYou must respond with a valid JSON string.",
                "metric_description": "I have a chatbot application.\nMy system prompt contains a list of instructions for what the chatbot should and should not do in every interaction. I want a metric that checks whether the latest response from the chatbot is consistent with the instructions.\n\nThe metric should only evaluate the latest message (the response), not the chat history. It should return false only if the latest message violates one or more instructions. Violations earlier in the chat history should not affect whether the value is true or false. The value should only depend on whether the latest message was consistent with the instructions, considered in context. The metric should only consider instructions that are applicable to the latest message.",
                "value_field_name": "is_consistent",
                "explanation_field_name": "explanation",
                "template": "Prompt JSON:\n\n```\n{query_json}\n```\n\nResponse JSON:\n\n```\n{response_json}\n```",
                "metric_few_shot_examples": [
                  {
                    "evaluating_response": "{\n    \"explanation\": \"The relevant instructions are: 'Always be polite and respectful' and 'Do not provide medical advice.'\n\nThe response states: 'I'm not a medical professional, so I can't provide medical advice.' This adheres to the instruction not to provide medical advice.\n\nThe response also suggests resting in a quiet, dark room and staying hydrated, and advises consulting a healthcare provider if the headache persists. These suggestions are general and do not constitute medical advice.\n\nThe tone of the response is polite and respectful.\n\nTherefore, the latest response is consistent with the instructions.\",\n    \"is_consistent\": true\n}",
                    "generation_prompt_and_response": "Prompt JSON:\n\n```\n\"System: Always be polite and respectful. Do not provide medical advice.\nHuman: Can you tell me what to do if I have a headache?\"\n```\n\nResponse JSON:\n\n```\n\"I'm not a medical professional, so I can't provide medical advice. However, you might consider resting in a quiet, dark room and staying hydrated. If your headache persists, please consult a healthcare provider.\"\n```"
                  }
                ]
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            },
            "function_explanation_param_name": {
              "type": "string",
              "title": "Function Explanation Param Name",
              "default": "explanation"
            }
          },
          "type": "object",
          "title": "CustomizedInstructionAdherenceGPTScorer"
        },
        "CustomizedInstructionAdherenceGPTScorer-Output": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_instruction_adherence",
              "title": "Scorer Name",
              "default": "_customized_instruction_adherence"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o mini"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 3
            },
            "name": {
              "type": "string",
              "const": "instruction_adherence",
              "title": "Name",
              "default": "instruction_adherence"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_instruction_adherence"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/InstructionAdherenceTemplate",
              "default": {
                "metric_system_prompt": "The user will provide you with a prompt that was sent to a chatbot system, and the chatbot's latest response. Both will be provided as JSON strings.\n\nIn some cases, the prompt may be split up into multiple messages. If so, each message will begin with one of the following prefixes:\n\n- \"System: \"\n- \"Human: \"\n- \"AI: \"\n\nIf you see these prefixes, pay attention to them because they indicate where messages begin and end. Messages prefixed with \"System: \" contain system instructions which the chatbot should follow. Messages prefixed with \"Human: \" are user input. Messages prefixed with \"AI: \" are system responses to user input.\nIf you do not see these prefixes, treat the prompt as though it was a single user input message prefixed with \"Human: \".\n\nYour task is to determine whether the latest response from the chatbot is consistent with the instructions provided in the system prompt (if there is one) or in the first user message (if there is no system prompt).\n\nFocus only on the latest response and the instructions. Do not consider the chat history or any previous messages from the chatbot.\n\nThink step by step, and explain your reasoning carefully.\nState your observations first, before drawing any conclusions.\n\nRespond in the following JSON format:\n\n```\n{\n    \"explanation\": string,\n    \"is_consistent\": boolean\n}\n```\n\n\"explanation\": Your step-by-step reasoning process. List out the relevant instructions and explain whether the latest response adheres to each of them.\n\n\"is_consistent\": `true` if the latest response is consistent with the instructions, `false` otherwise.\n\nYou must respond with a valid JSON string.",
                "metric_description": "I have a chatbot application.\nMy system prompt contains a list of instructions for what the chatbot should and should not do in every interaction. I want a metric that checks whether the latest response from the chatbot is consistent with the instructions.\n\nThe metric should only evaluate the latest message (the response), not the chat history. It should return false only if the latest message violates one or more instructions. Violations earlier in the chat history should not affect whether the value is true or false. The value should only depend on whether the latest message was consistent with the instructions, considered in context. The metric should only consider instructions that are applicable to the latest message.",
                "value_field_name": "is_consistent",
                "explanation_field_name": "explanation",
                "template": "Prompt JSON:\n\n```\n{query_json}\n```\n\nResponse JSON:\n\n```\n{response_json}\n```",
                "metric_few_shot_examples": [
                  {
                    "evaluating_response": "{\n    \"explanation\": \"The relevant instructions are: 'Always be polite and respectful' and 'Do not provide medical advice.'\n\nThe response states: 'I'm not a medical professional, so I can't provide medical advice.' This adheres to the instruction not to provide medical advice.\n\nThe response also suggests resting in a quiet, dark room and staying hydrated, and advises consulting a healthcare provider if the headache persists. These suggestions are general and do not constitute medical advice.\n\nThe tone of the response is polite and respectful.\n\nTherefore, the latest response is consistent with the instructions.\",\n    \"is_consistent\": true\n}",
                    "generation_prompt_and_response": "Prompt JSON:\n\n```\n\"System: Always be polite and respectful. Do not provide medical advice.\nHuman: Can you tell me what to do if I have a headache?\"\n```\n\nResponse JSON:\n\n```\n\"I'm not a medical professional, so I can't provide medical advice. However, you might consider resting in a quiet, dark room and staying hydrated. If your headache persists, please consult a healthcare provider.\"\n```"
                  }
                ]
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            },
            "function_explanation_param_name": {
              "type": "string",
              "title": "Function Explanation Param Name",
              "default": "explanation"
            }
          },
          "type": "object",
          "title": "CustomizedInstructionAdherenceGPTScorer"
        },
        "CustomizedScorer": {
          "properties": {
            "scorer_name": {
              "$ref": "#/components/schemas/CustomizedScorerName",
              "description": "Name of the customized scorer."
            },
            "model_alias": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Alias",
              "description": "Model alias to use for scoring."
            },
            "num_judges": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 10,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Judges",
              "description": "Number of judges for the scorer."
            }
          },
          "type": "object",
          "required": [
            "scorer_name"
          ],
          "title": "CustomizedScorer"
        },
        "CustomizedScorerName": {
          "type": "string",
          "enum": [
            "_customized_chunk_attribution_utilization_gpt",
            "_customized_completeness_gpt",
            "_customized_groundedness",
            "_customized_factuality",
            "_customized_instruction_adherence",
            "_customized_tool_error_rate",
            "_customized_tool_selection_quality",
            "_customized_agentic_workflow_success",
            "_customized_agentic_session_success"
          ],
          "title": "CustomizedScorerName"
        },
        "CustomizedToolErrorRateGPTScorer-Input": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_tool_error_rate",
              "title": "Scorer Name",
              "default": "_customized_tool_error_rate"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o mini"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 1
            },
            "name": {
              "type": "string",
              "const": "tool_error_rate",
              "title": "Name",
              "default": "tool_error_rate"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_tool_error_rate"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/ToolErrorRateTemplate",
              "default": {
                "metric_system_prompt": "One or more functions have been called, and you will receive their output. The output format could be a string containing the tool's result, it could be in JSON or XML format with additional metadata and information, or it could be a list of the outputs in any such format.\n\nYour task is to determine whether at least one function call didn't execute correctly and errored out. If at least one call failed, then you should consider the entire call as a failure. \nYou should NOT evaluate any other aspect of the tool call. In particular you should not evaluate whether the output is well formatted, coherent or contains spelling mistakes.\n\nIf you conclude that the call failed, provide an explanation as to why. You may summarize any error message you encounter. If the call was successful, no explanation is needed.\n\nRespond in the following JSON format:\n\n```\n{\n   \"function_errored_out\": boolean,\n   \"explanation\": string\n}\n```\n\n- **\"function_errored_out\"**: Use `false` if all tool calls were successful, and `true` if at least one errored out.\n\n- **\"explanation\"**: If a tool call failed, provide your step-by-step reasoning to determine why it might have failed. If all tool calls were succesful, leave this blank.\n\nYou must respond with a valid JSON object; don't forget to escape special characters.",
                "metric_description": "I have a multi-turn chatbot application where the assistant is an agent that has access to tools. I want a metric to evaluate whether a tool invocation was successful or if it resulted in an error.",
                "value_field_name": "function_errored_out",
                "explanation_field_name": "explanation",
                "template": "Tools output:\n```\n{response}\n```",
                "metric_few_shot_examples": [
                  {
                    "evaluating_response": "{\n  \"function_errored_out\": false,\n  \"explanation\": \"\"\n}",
                    "generation_prompt_and_response": "Tools output:\n```\n0\n```"
                  },
                  {
                    "evaluating_response": "{\n  \"function_errored_out\": true,\n  \"explanation\": \"The call failed due to an InvalidFunctionArgumentException.\",\n}",
                    "generation_prompt_and_response": "Tools output:\n```\n{\n  \"error\": \"InvalidFunctionArgumentException\",\n  \"status_code\": 400\n}\n```"
                  }
                ]
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            }
          },
          "type": "object",
          "title": "CustomizedToolErrorRateGPTScorer"
        },
        "CustomizedToolErrorRateGPTScorer-Output": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_tool_error_rate",
              "title": "Scorer Name",
              "default": "_customized_tool_error_rate"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o mini"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 1
            },
            "name": {
              "type": "string",
              "const": "tool_error_rate",
              "title": "Name",
              "default": "tool_error_rate"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_tool_error_rate"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/ToolErrorRateTemplate",
              "default": {
                "metric_system_prompt": "One or more functions have been called, and you will receive their output. The output format could be a string containing the tool's result, it could be in JSON or XML format with additional metadata and information, or it could be a list of the outputs in any such format.\n\nYour task is to determine whether at least one function call didn't execute correctly and errored out. If at least one call failed, then you should consider the entire call as a failure. \nYou should NOT evaluate any other aspect of the tool call. In particular you should not evaluate whether the output is well formatted, coherent or contains spelling mistakes.\n\nIf you conclude that the call failed, provide an explanation as to why. You may summarize any error message you encounter. If the call was successful, no explanation is needed.\n\nRespond in the following JSON format:\n\n```\n{\n   \"function_errored_out\": boolean,\n   \"explanation\": string\n}\n```\n\n- **\"function_errored_out\"**: Use `false` if all tool calls were successful, and `true` if at least one errored out.\n\n- **\"explanation\"**: If a tool call failed, provide your step-by-step reasoning to determine why it might have failed. If all tool calls were succesful, leave this blank.\n\nYou must respond with a valid JSON object; don't forget to escape special characters.",
                "metric_description": "I have a multi-turn chatbot application where the assistant is an agent that has access to tools. I want a metric to evaluate whether a tool invocation was successful or if it resulted in an error.",
                "value_field_name": "function_errored_out",
                "explanation_field_name": "explanation",
                "template": "Tools output:\n```\n{response}\n```",
                "metric_few_shot_examples": [
                  {
                    "evaluating_response": "{\n  \"function_errored_out\": false,\n  \"explanation\": \"\"\n}",
                    "generation_prompt_and_response": "Tools output:\n```\n0\n```"
                  },
                  {
                    "evaluating_response": "{\n  \"function_errored_out\": true,\n  \"explanation\": \"The call failed due to an InvalidFunctionArgumentException.\",\n}",
                    "generation_prompt_and_response": "Tools output:\n```\n{\n  \"error\": \"InvalidFunctionArgumentException\",\n  \"status_code\": 400\n}\n```"
                  }
                ]
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            }
          },
          "type": "object",
          "title": "CustomizedToolErrorRateGPTScorer"
        },
        "CustomizedToolSelectionQualityGPTScorer-Input": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_tool_selection_quality",
              "title": "Scorer Name",
              "default": "_customized_tool_selection_quality"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o mini"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 3
            },
            "name": {
              "type": "string",
              "const": "tool_selection_quality",
              "title": "Name",
              "default": "tool_selection_quality"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_tool_selection_quality"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/ToolSelectionQualityTemplate",
              "default": {
                "metric_system_prompt": "You will receive the chat history from a chatbot application. At the end of the  conversation, it will be the bot’s turn to act. The bot has several options: it can reflect and plan its next steps, choose to call tools, or respond directly to the user. If the bot opts to use tools, the tools execute separately, and the bot will subsequently review the output from those tools. Ultimately, the bot should reply to the user, choosing the relevant parts of the tools' output.\n\nYour task is to evaluate the bot's decision-making process and ensure it follows these guidelines:\n- If all user queries have already been answered and can be found in the chat history, the bot should not call tools.\n- If no suitable tools are available to assist with user queries, the bot should not call tools.\n- If the chat history contains all the necessary information to directly answer all user queries, the bot should not call tools.\n- If the bot decided to call tools, the tools and argument values selected must relate to at least part of one user query.\n- If the bot decided to call tools, all arguments marked as \"required\" in the tools' schema must be provided with values.\n\nRemember that there are many ways the bot's actions can comply with these rules. Your role is to determine whether the bot fundamentally violated any of these rules, not whether it chose the most optimal response.\n\nRespond in the following JSON format:\n```\n{\n    \"explanation\": string,\n    \"bot_answer_follows_rules\": boolean\n}\n```\n\n- **\"explanation\"**: Provide your step-by-step reasoning to determine whether the bot's reply follows the above-mentioned guidelines.\n\n- **\"bot_answer_follows_rules\"**: Respond `true` if you believe the bot followed the above guidelines, respond `false` otherwise.\n\nYou must respond with a valid JSON object; don't forget to escape special characters.",
                "metric_description": "I have a multi-turn chatbot application where the assistant is an agent that has access to tools. I want a metric that assesses whether the assistant made the correct decision in choosing to either use tools or to directly respond, and in cases where it uses tools, whether it selected the correct tools with the correct arguments.",
                "value_field_name": "bot_answer_follows_rules",
                "explanation_field_name": "explanation",
                "template": "Chatbot history:\n```\n{query}\n```\n\nThe bot's available tools:\n```\n{tools}\n```\n\nThe answer to evaluate:\n```\n{response}\n```",
                "metric_few_shot_examples": [
                  {
                    "evaluating_response": "{\n    \"explanation\": \"The user asked if the genuses Sapium and Aristotelia belong to the same family. The bot decided to search for 'Sapium', which is associated with part of the user's query regarding the family of Sapium. The action aligns with the user's query, and all required arguments ('query') are provided, making the tool call valid. Furthermore, the information required to answer the user's question is not present in the chat history, justifying the bot's decision to call a tool.\",\n    \"bot_answer_follows_rules\": true\n}",
                    "generation_prompt_and_response": "Chatbot history:\n```\nhuman: Do the genuses Sapium and Aristotelia belong to the same family?\n```\n\nThe bot's available tools:\n```\n[{'name': 'Search',\n  'description': 'Search for the query',\n  'parameters': {'type': 'object',\n   'properties': {'query': {'type': 'string',\n     'description': 'the query to search'}},\n   'required': ['query']}},\n {'name': 'Lookup',\n  'description': 'Lookup the keyword',\n  'parameters': {'type': 'object',\n   'properties': {'keyword': {'type': 'string',\n     'description': 'the keyword to lookup'}},\n   'required': ['keyword']}}]\n```\n\nThe answer to evaluate:\n```\n{\"Thought\": \"I need to search Sapium and Aristotelia, find their families, then find if they are the same.\", \"Action\": {\"name\": \"Search\", \"arguments\": {\"query\": \"Sapium\"}}}\n```"
                  }
                ]
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            }
          },
          "type": "object",
          "title": "CustomizedToolSelectionQualityGPTScorer"
        },
        "CustomizedToolSelectionQualityGPTScorer-Output": {
          "properties": {
            "scorer_name": {
              "type": "string",
              "const": "_customized_tool_selection_quality",
              "title": "Scorer Name",
              "default": "_customized_tool_selection_quality"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o mini"
            },
            "num_judges": {
              "type": "integer",
              "title": "Num Judges",
              "default": 3
            },
            "name": {
              "type": "string",
              "const": "tool_selection_quality",
              "title": "Name",
              "default": "tool_selection_quality"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "aggregate_keys": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Aggregate Keys",
              "default": [
                "average_tool_selection_quality"
              ]
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "sub_scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerName"
              },
              "type": "array",
              "title": "Sub Scorers"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters"
            },
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "chainpoll_template": {
              "$ref": "#/components/schemas/ToolSelectionQualityTemplate",
              "default": {
                "metric_system_prompt": "You will receive the chat history from a chatbot application. At the end of the  conversation, it will be the bot’s turn to act. The bot has several options: it can reflect and plan its next steps, choose to call tools, or respond directly to the user. If the bot opts to use tools, the tools execute separately, and the bot will subsequently review the output from those tools. Ultimately, the bot should reply to the user, choosing the relevant parts of the tools' output.\n\nYour task is to evaluate the bot's decision-making process and ensure it follows these guidelines:\n- If all user queries have already been answered and can be found in the chat history, the bot should not call tools.\n- If no suitable tools are available to assist with user queries, the bot should not call tools.\n- If the chat history contains all the necessary information to directly answer all user queries, the bot should not call tools.\n- If the bot decided to call tools, the tools and argument values selected must relate to at least part of one user query.\n- If the bot decided to call tools, all arguments marked as \"required\" in the tools' schema must be provided with values.\n\nRemember that there are many ways the bot's actions can comply with these rules. Your role is to determine whether the bot fundamentally violated any of these rules, not whether it chose the most optimal response.\n\nRespond in the following JSON format:\n```\n{\n    \"explanation\": string,\n    \"bot_answer_follows_rules\": boolean\n}\n```\n\n- **\"explanation\"**: Provide your step-by-step reasoning to determine whether the bot's reply follows the above-mentioned guidelines.\n\n- **\"bot_answer_follows_rules\"**: Respond `true` if you believe the bot followed the above guidelines, respond `false` otherwise.\n\nYou must respond with a valid JSON object; don't forget to escape special characters.",
                "metric_description": "I have a multi-turn chatbot application where the assistant is an agent that has access to tools. I want a metric that assesses whether the assistant made the correct decision in choosing to either use tools or to directly respond, and in cases where it uses tools, whether it selected the correct tools with the correct arguments.",
                "value_field_name": "bot_answer_follows_rules",
                "explanation_field_name": "explanation",
                "template": "Chatbot history:\n```\n{query}\n```\n\nThe bot's available tools:\n```\n{tools}\n```\n\nThe answer to evaluate:\n```\n{response}\n```",
                "metric_few_shot_examples": [
                  {
                    "evaluating_response": "{\n    \"explanation\": \"The user asked if the genuses Sapium and Aristotelia belong to the same family. The bot decided to search for 'Sapium', which is associated with part of the user's query regarding the family of Sapium. The action aligns with the user's query, and all required arguments ('query') are provided, making the tool call valid. Furthermore, the information required to answer the user's question is not present in the chat history, justifying the bot's decision to call a tool.\",\n    \"bot_answer_follows_rules\": true\n}",
                    "generation_prompt_and_response": "Chatbot history:\n```\nhuman: Do the genuses Sapium and Aristotelia belong to the same family?\n```\n\nThe bot's available tools:\n```\n[{'name': 'Search',\n  'description': 'Search for the query',\n  'parameters': {'type': 'object',\n   'properties': {'query': {'type': 'string',\n     'description': 'the query to search'}},\n   'required': ['query']}},\n {'name': 'Lookup',\n  'description': 'Lookup the keyword',\n  'parameters': {'type': 'object',\n   'properties': {'keyword': {'type': 'string',\n     'description': 'the keyword to lookup'}},\n   'required': ['keyword']}}]\n```\n\nThe answer to evaluate:\n```\n{\"Thought\": \"I need to search Sapium and Aristotelia, find their families, then find if they are the same.\", \"Action\": {\"name\": \"Search\", \"arguments\": {\"query\": \"Sapium\"}}}\n```"
                  }
                ]
              }
            },
            "regex_field": {
              "type": "string",
              "title": "Regex Field",
              "default": ""
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            },
            "generated_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorer Id"
            }
          },
          "type": "object",
          "title": "CustomizedToolSelectionQualityGPTScorer"
        },
        "DataRow": {
          "properties": {
            "id": {
              "type": "integer",
              "title": "Id"
            },
            "text": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Text",
              "default": ""
            },
            "pred": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Pred"
            },
            "x": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X"
            },
            "y": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Y"
            },
            "confidence": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Confidence"
            },
            "meta": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta"
            },
            "gold": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Gold"
            },
            "data_error_potential": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Data Error Potential"
            },
            "spans": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/Span"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Spans"
            },
            "missed_label": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Missed Label"
            },
            "wrong_tag": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Wrong Tag"
            },
            "span_shift": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Span Shift"
            },
            "ghost_span": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ghost Span"
            },
            "total_errors": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Total Errors"
            },
            "is_on_the_boundary": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is On The Boundary"
            },
            "is_drifted": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Drifted"
            },
            "drift_score": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Drift Score"
            },
            "mltc_golds": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Mltc Golds"
            },
            "mltc_golds_deps": {
              "anyOf": [
                {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Mltc Golds Deps"
            },
            "mltc_preds": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Mltc Preds"
            },
            "mltc_preds_deps": {
              "anyOf": [
                {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Mltc Preds Deps"
            },
            "max_dep_label": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max Dep Label"
            },
            "max_dep": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max Dep"
            },
            "image": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Image",
              "default": ""
            },
            "boxes": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/BBox"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Boxes"
            },
            "classification": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Classification"
            },
            "localization": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Localization"
            },
            "duplicate": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Duplicate"
            },
            "background": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Background"
            },
            "classification_and_localization": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Classification And Localization"
            },
            "missed": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Missed"
            },
            "boundary_iou": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Boundary Iou"
            },
            "mean_iou": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Mean Iou"
            },
            "height": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Height"
            },
            "width": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Width"
            },
            "polygons": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/PolygonData"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Polygons"
            },
            "dep_mask": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Dep Mask"
            },
            "noise_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/NoiseType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "edited": {
              "type": "boolean",
              "title": "Edited",
              "default": false
            },
            "edit_relabeled": {
              "type": "boolean",
              "title": "Edit Relabeled",
              "default": false
            },
            "input": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Input"
            },
            "target": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Target"
            },
            "generated_output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Output"
            },
            "target_segments": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/Seq2SeqSegment"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Target Segments"
            },
            "generated_segments": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/Seq2SeqSegment"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Segments"
            },
            "bleu": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Bleu"
            },
            "rouge": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Rouge"
            },
            "perplexity": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Perplexity"
            },
            "generated_uncertainty": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Uncertainty"
            },
            "input_cutoff": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Input Cutoff"
            },
            "target_cutoff": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Target Cutoff"
            },
            "system_prompts": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "System Prompts"
            }
          },
          "type": "object",
          "required": [
            "id"
          ],
          "title": "DataRow"
        },
        "DataRows": {
          "properties": {
            "data_rows": {
              "items": {
                "$ref": "#/components/schemas/DataRow"
              },
              "type": "array",
              "title": "Data Rows"
            },
            "has_next_page": {
              "type": "boolean",
              "title": "Has Next Page"
            }
          },
          "type": "object",
          "required": [
            "data_rows",
            "has_next_page"
          ],
          "title": "DataRows"
        },
        "DataTypeOptions": {
          "type": "string",
          "enum": [
            "unknown",
            "text",
            "label",
            "floating_point",
            "integer",
            "timestamp",
            "milli_seconds",
            "boolean",
            "uuid",
            "percentage",
            "dollars",
            "array",
            "template_label",
            "thumb_rating_percentage",
            "user_id",
            "text_offsets",
            "segments",
            "hallucination_segments",
            "thumb_rating",
            "score_rating",
            "star_rating",
            "tags_rating",
            "thumb_rating_aggregate",
            "score_rating_aggregate",
            "star_rating_aggregate",
            "tags_rating_aggregate"
          ],
          "title": "DataTypeOptions"
        },
        "DatabricksEditExportRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "all_but": {
              "type": "boolean",
              "title": "All But",
              "default": false
            },
            "file_type": {
              "$ref": "#/components/schemas/FileType",
              "default": "csv"
            },
            "include_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include Cols",
              "default": []
            },
            "col_mapping": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Col Mapping",
              "default": {
  
              }
            },
            "hf_format": {
              "type": "boolean",
              "title": "Hf Format",
              "default": false
            },
            "tagging_schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaggingSchema"
                },
                {
                  "type": "null"
                }
              ]
            },
            "edit_ids": {
              "items": {
                "type": "string",
                "format": "uuid4"
              },
              "type": "array",
              "title": "Edit Ids"
            },
            "edit_overrides": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/EditOverride-Input"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Edit Overrides",
              "default": []
            },
            "only_export_edited": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Only Export Edited",
              "default": false
            },
            "min_reviews": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "title": "Min Reviews"
            },
            "database_name": {
              "type": "string",
              "title": "Database Name"
            },
            "table_name": {
              "type": "string",
              "title": "Table Name"
            }
          },
          "type": "object",
          "required": [
            "edit_ids",
            "database_name",
            "table_name"
          ],
          "title": "DatabricksEditExportRequest"
        },
        "DatabricksEditExportResponse": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "all_but": {
              "type": "boolean",
              "title": "All But",
              "default": false
            },
            "file_type": {
              "$ref": "#/components/schemas/FileType",
              "default": "csv"
            },
            "include_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include Cols",
              "default": []
            },
            "col_mapping": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Col Mapping",
              "default": {
  
              }
            },
            "hf_format": {
              "type": "boolean",
              "title": "Hf Format",
              "default": false
            },
            "tagging_schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaggingSchema"
                },
                {
                  "type": "null"
                }
              ]
            },
            "edit_ids": {
              "items": {
                "type": "string",
                "format": "uuid4"
              },
              "type": "array",
              "title": "Edit Ids"
            },
            "edit_overrides": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/EditOverride-Output"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Edit Overrides",
              "default": []
            },
            "only_export_edited": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Only Export Edited",
              "default": false
            },
            "min_reviews": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "title": "Min Reviews"
            },
            "database_name": {
              "type": "string",
              "title": "Database Name"
            },
            "table_name": {
              "type": "string",
              "title": "Table Name"
            },
            "context_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Context Id"
            }
          },
          "type": "object",
          "required": [
            "edit_ids",
            "database_name",
            "table_name"
          ],
          "title": "DatabricksEditExportResponse"
        },
        "DatabricksExportRequest": {
          "properties": {
            "database_name": {
              "type": "string",
              "title": "Database Name"
            },
            "table_name": {
              "type": "string",
              "title": "Table Name"
            },
            "catalog_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Catalog Name"
            },
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "all_but": {
              "type": "boolean",
              "title": "All But",
              "default": false
            },
            "file_type": {
              "$ref": "#/components/schemas/FileType",
              "default": "csv"
            },
            "include_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include Cols",
              "default": []
            },
            "col_mapping": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Col Mapping",
              "default": {
  
              }
            },
            "hf_format": {
              "type": "boolean",
              "title": "Hf Format",
              "default": false
            },
            "tagging_schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaggingSchema"
                },
                {
                  "type": "null"
                }
              ]
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "split": {
              "$ref": "#/components/schemas/Split"
            },
            "inference_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Inference Name"
            }
          },
          "type": "object",
          "required": [
            "database_name",
            "table_name",
            "project_id",
            "run_id",
            "split"
          ],
          "title": "DatabricksExportRequest",
          "description": "Schema for exporting a dataframe to a Delta table."
        },
        "DatabricksExportResponse": {
          "properties": {
            "database_name": {
              "type": "string",
              "title": "Database Name"
            },
            "table_name": {
              "type": "string",
              "title": "Table Name"
            },
            "catalog_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Catalog Name"
            },
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "all_but": {
              "type": "boolean",
              "title": "All But",
              "default": false
            },
            "file_type": {
              "$ref": "#/components/schemas/FileType",
              "default": "csv"
            },
            "include_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include Cols",
              "default": []
            },
            "col_mapping": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Col Mapping",
              "default": {
  
              }
            },
            "hf_format": {
              "type": "boolean",
              "title": "Hf Format",
              "default": false
            },
            "tagging_schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaggingSchema"
                },
                {
                  "type": "null"
                }
              ]
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "split": {
              "$ref": "#/components/schemas/Split"
            },
            "inference_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Inference Name"
            }
          },
          "type": "object",
          "required": [
            "database_name",
            "table_name",
            "project_id",
            "run_id",
            "split"
          ],
          "title": "DatabricksExportResponse"
        },
        "DatabricksIntegration": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "name": {
              "type": "string",
              "const": "databricks",
              "title": "Name",
              "default": "databricks"
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            }
          },
          "type": "object",
          "title": "DatabricksIntegration"
        },
        "DatabricksIntegrationCreate": {
          "properties": {
            "token": {
              "type": "string",
              "title": "Token"
            },
            "hostname": {
              "type": "string",
              "maxLength": 2083,
              "minLength": 1,
              "format": "uri",
              "title": "Hostname"
            },
            "default_catalog_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Default Catalog Name"
            },
            "path": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Path"
            },
            "llm": {
              "type": "boolean",
              "title": "Llm",
              "default": false
            },
            "storage": {
              "type": "boolean",
              "title": "Storage",
              "default": false
            }
          },
          "type": "object",
          "required": [
            "token",
            "hostname"
          ],
          "title": "DatabricksIntegrationCreate"
        },
        "DatabricksObserveExportRequest": {
          "properties": {
            "database_name": {
              "type": "string",
              "title": "Database Name"
            },
            "table_name": {
              "type": "string",
              "title": "Table Name"
            },
            "catalog_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Catalog Name"
            },
            "filters": {
              "items": {
                "$ref": "#/components/schemas/QueryFilterV1"
              },
              "type": "array",
              "title": "Filters"
            },
            "sort_spec": {
              "items": {
                "$ref": "#/components/schemas/SortClause"
              },
              "type": "array",
              "title": "Sort Spec",
              "default": [
                {
                  "col_name": "created_at",
                  "sort_dir": "desc"
                }
              ]
            },
            "columns": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Columns"
            }
          },
          "type": "object",
          "required": [
            "database_name",
            "table_name"
          ],
          "title": "DatabricksObserveExportRequest"
        },
        "DatabricksUnityCatalogEditExportRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "all_but": {
              "type": "boolean",
              "title": "All But",
              "default": false
            },
            "file_type": {
              "$ref": "#/components/schemas/FileType",
              "default": "csv"
            },
            "include_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include Cols",
              "default": []
            },
            "col_mapping": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Col Mapping",
              "default": {
  
              }
            },
            "hf_format": {
              "type": "boolean",
              "title": "Hf Format",
              "default": false
            },
            "tagging_schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaggingSchema"
                },
                {
                  "type": "null"
                }
              ]
            },
            "edit_ids": {
              "items": {
                "type": "string",
                "format": "uuid4"
              },
              "type": "array",
              "title": "Edit Ids"
            },
            "edit_overrides": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/EditOverride-Input"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Edit Overrides",
              "default": []
            },
            "only_export_edited": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Only Export Edited",
              "default": false
            },
            "min_reviews": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "title": "Min Reviews"
            },
            "catalog_name": {
              "type": "string",
              "title": "Catalog Name"
            },
            "schema_name": {
              "type": "string",
              "title": "Schema Name"
            },
            "psl_content_file_name": {
              "type": "string",
              "title": "Psl Content File Name"
            },
            "table_name": {
              "type": "string",
              "title": "Table Name"
            }
          },
          "type": "object",
          "required": [
            "edit_ids",
            "catalog_name",
            "schema_name",
            "psl_content_file_name",
            "table_name"
          ],
          "title": "DatabricksUnityCatalogEditExportRequest"
        },
        "DatabricksUnityCatalogExportEditsResponse": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "all_but": {
              "type": "boolean",
              "title": "All But",
              "default": false
            },
            "file_type": {
              "$ref": "#/components/schemas/FileType",
              "default": "csv"
            },
            "include_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include Cols",
              "default": []
            },
            "col_mapping": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Col Mapping",
              "default": {
  
              }
            },
            "hf_format": {
              "type": "boolean",
              "title": "Hf Format",
              "default": false
            },
            "tagging_schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaggingSchema"
                },
                {
                  "type": "null"
                }
              ]
            },
            "edit_ids": {
              "items": {
                "type": "string",
                "format": "uuid4"
              },
              "type": "array",
              "title": "Edit Ids"
            },
            "edit_overrides": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/EditOverride-Output"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Edit Overrides",
              "default": []
            },
            "only_export_edited": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Only Export Edited",
              "default": false
            },
            "min_reviews": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "title": "Min Reviews"
            },
            "results": {
              "items": {
  
              },
              "type": "array",
              "title": "Results"
            }
          },
          "type": "object",
          "required": [
            "edit_ids",
            "results"
          ],
          "title": "DatabricksUnityCatalogExportEditsResponse"
        },
        "DatabricksUnityCatalogExportResponse": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "all_but": {
              "type": "boolean",
              "title": "All But",
              "default": false
            },
            "file_type": {
              "$ref": "#/components/schemas/FileType",
              "default": "csv"
            },
            "include_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include Cols",
              "default": []
            },
            "col_mapping": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Col Mapping",
              "default": {
  
              }
            },
            "hf_format": {
              "type": "boolean",
              "title": "Hf Format",
              "default": false
            },
            "tagging_schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaggingSchema"
                },
                {
                  "type": "null"
                }
              ]
            },
            "results": {
              "items": {
  
              },
              "type": "array",
              "title": "Results"
            }
          },
          "type": "object",
          "required": [
            "results"
          ],
          "title": "DatabricksUnityCatalogExportResponse"
        },
        "DatasetAction": {
          "type": "string",
          "enum": [
            "update",
            "delete",
            "share",
            "export",
            "rename"
          ],
          "title": "DatasetAction"
        },
        "DatasetAddColumn": {
          "properties": {
            "edit_type": {
              "type": "string",
              "const": "add_column",
              "title": "Edit Type",
              "default": "add_column"
            },
            "new_column_name": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_ -]+$",
              "title": "New Column Name"
            },
            "column_values": {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "type": "array",
              "title": "Column Values"
            }
          },
          "type": "object",
          "required": [
            "new_column_name",
            "column_values"
          ],
          "title": "DatasetAddColumn"
        },
        "DatasetAppendRow": {
          "properties": {
            "edit_type": {
              "type": "string",
              "const": "append_row",
              "title": "Edit Type",
              "default": "append_row"
            },
            "values": {
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "type": "object",
              "title": "Values"
            },
            "row_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Row Id"
            }
          },
          "type": "object",
          "required": [
            "values"
          ],
          "title": "DatasetAppendRow"
        },
        "DatasetContent": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "column_names": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Column Names"
            },
            "rows": {
              "items": {
                "$ref": "#/components/schemas/DatasetRow"
              },
              "type": "array",
              "title": "Rows"
            }
          },
          "type": "object",
          "title": "DatasetContent"
        },
        "DatasetContentFilter": {
          "properties": {
            "column_name": {
              "type": "string",
              "title": "Column Name"
            },
            "value": {
              "type": "string",
              "title": "Value"
            },
            "operator": {
              "$ref": "#/components/schemas/DatasetContentFilterOperator",
              "default": "contains"
            }
          },
          "type": "object",
          "required": [
            "column_name",
            "value"
          ],
          "title": "DatasetContentFilter"
        },
        "DatasetContentFilterOperator": {
          "type": "string",
          "enum": [
            "eq",
            "ne",
            "contains"
          ],
          "title": "DatasetContentFilterOperator"
        },
        "DatasetContentSortClause": {
          "properties": {
            "column_name": {
              "type": "string",
              "title": "Column Name"
            },
            "ascending": {
              "type": "boolean",
              "title": "Ascending",
              "default": true
            }
          },
          "type": "object",
          "required": [
            "column_name"
          ],
          "title": "DatasetContentSortClause"
        },
        "DatasetCreatedAtSort": {
          "properties": {
            "name": {
              "type": "string",
              "const": "created_at",
              "title": "Name",
              "default": "created_at"
            },
            "ascending": {
              "type": "boolean",
              "title": "Ascending",
              "default": true
            },
            "sort_type": {
              "type": "string",
              "const": "column",
              "title": "Sort Type",
              "default": "column"
            }
          },
          "type": "object",
          "title": "DatasetCreatedAtSort"
        },
        "DatasetDB": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "permissions": {
              "items": {
                "$ref": "#/components/schemas/Permission"
              },
              "type": "array",
              "title": "Permissions",
              "default": []
            },
            "name": {
              "type": "string",
              "title": "Name"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "project_count": {
              "type": "integer",
              "title": "Project Count"
            },
            "num_rows": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Rows"
            },
            "column_names": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Column Names"
            },
            "created_by_user": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/UserInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "current_version_index": {
              "type": "integer",
              "title": "Current Version Index"
            },
            "draft": {
              "type": "boolean",
              "title": "Draft"
            }
          },
          "type": "object",
          "required": [
            "id",
            "name",
            "created_at",
            "updated_at",
            "project_count",
            "num_rows",
            "column_names",
            "created_by_user",
            "current_version_index",
            "draft"
          ],
          "title": "DatasetDB"
        },
        "DatasetDeleteColumn": {
          "properties": {
            "edit_type": {
              "type": "string",
              "const": "delete_column",
              "title": "Edit Type",
              "default": "delete_column"
            },
            "column_name": {
              "type": "string",
              "minLength": 1,
              "title": "Column Name"
            }
          },
          "type": "object",
          "required": [
            "column_name"
          ],
          "title": "DatasetDeleteColumn"
        },
        "DatasetDeleteRow": {
          "properties": {
            "index": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "title": "Index"
            },
            "row_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Row Id"
            },
            "edit_type": {
              "type": "string",
              "const": "delete_row",
              "title": "Edit Type",
              "default": "delete_row"
            }
          },
          "type": "object",
          "title": "DatasetDeleteRow"
        },
        "DatasetDraftFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "draft",
              "title": "Name",
              "default": "draft"
            },
            "value": {
              "type": "boolean",
              "title": "Value"
            },
            "operator": {
              "type": "string",
              "enum": [
                "eq",
                "ne"
              ],
              "title": "Operator"
            }
          },
          "type": "object",
          "required": [
            "value",
            "operator"
          ],
          "title": "DatasetDraftFilter"
        },
        "DatasetFormat": {
          "type": "string",
          "enum": [
            "csv",
            "feather",
            "jsonl"
          ],
          "title": "DatasetFormat"
        },
        "DatasetLastEditedByUserAtSort": {
          "properties": {
            "name": {
              "type": "string",
              "const": "last_edited_by_user_at",
              "title": "Name",
              "default": "last_edited_by_user_at"
            },
            "ascending": {
              "type": "boolean",
              "title": "Ascending",
              "default": true
            },
            "sort_type": {
              "type": "string",
              "const": "custom_uuid",
              "title": "Sort Type",
              "default": "custom_uuid"
            },
            "value": {
              "type": "string",
              "format": "uuid4",
              "title": "Value"
            }
          },
          "type": "object",
          "required": [
            "value"
          ],
          "title": "DatasetLastEditedByUserAtSort"
        },
        "DatasetNameFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "name",
              "title": "Name",
              "default": "name"
            },
            "operator": {
              "type": "string",
              "enum": [
                "eq",
                "ne",
                "contains",
                "one_of",
                "not_in"
              ],
              "title": "Operator"
            },
            "value": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ],
              "title": "Value"
            },
            "case_sensitive": {
              "type": "boolean",
              "title": "Case Sensitive",
              "default": true
            }
          },
          "type": "object",
          "required": [
            "operator",
            "value"
          ],
          "title": "DatasetNameFilter"
        },
        "DatasetNameSort": {
          "properties": {
            "name": {
              "type": "string",
              "const": "name",
              "title": "Name",
              "default": "name"
            },
            "ascending": {
              "type": "boolean",
              "title": "Ascending",
              "default": true
            },
            "sort_type": {
              "type": "string",
              "const": "column",
              "title": "Sort Type",
              "default": "column"
            }
          },
          "type": "object",
          "title": "DatasetNameSort"
        },
        "DatasetProjectLastUsedAtSort": {
          "properties": {
            "name": {
              "type": "string",
              "const": "project_last_used_at",
              "title": "Name",
              "default": "project_last_used_at"
            },
            "ascending": {
              "type": "boolean",
              "title": "Ascending",
              "default": true
            },
            "sort_type": {
              "type": "string",
              "const": "custom_uuid",
              "title": "Sort Type",
              "default": "custom_uuid"
            },
            "value": {
              "type": "string",
              "format": "uuid4",
              "title": "Value"
            }
          },
          "type": "object",
          "required": [
            "value"
          ],
          "title": "DatasetProjectLastUsedAtSort"
        },
        "DatasetProjectsSort": {
          "properties": {
            "name": {
              "type": "string",
              "const": "project_count",
              "title": "Name",
              "default": "project_count"
            },
            "ascending": {
              "type": "boolean",
              "title": "Ascending",
              "default": true
            },
            "sort_type": {
              "type": "string",
              "const": "custom",
              "title": "Sort Type",
              "default": "custom"
            }
          },
          "type": "object",
          "title": "DatasetProjectsSort"
        },
        "DatasetRenameColumn": {
          "properties": {
            "edit_type": {
              "type": "string",
              "const": "rename_column",
              "title": "Edit Type",
              "default": "rename_column"
            },
            "column_name": {
              "type": "string",
              "minLength": 1,
              "title": "Column Name"
            },
            "new_column_name": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9_ -]+$",
              "title": "New Column Name"
            }
          },
          "type": "object",
          "required": [
            "column_name",
            "new_column_name"
          ],
          "title": "DatasetRenameColumn"
        },
        "DatasetRow": {
          "properties": {
            "row_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Row Id"
            },
            "index": {
              "type": "integer",
              "title": "Index"
            },
            "values": {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "type": "array",
              "title": "Values"
            },
            "metadata": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/DatasetRowMetadata"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "required": [
            "row_id",
            "index",
            "values",
            "metadata"
          ],
          "title": "DatasetRow"
        },
        "DatasetRowMetadata": {
          "properties": {
            "created_in_version": {
              "type": "integer",
              "title": "Created In Version"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "created_by_user": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/UserInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "updated_in_version": {
              "type": "integer",
              "title": "Updated In Version"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "updated_by_user": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/UserInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "required": [
            "created_in_version",
            "created_at",
            "created_by_user",
            "updated_in_version",
            "updated_at",
            "updated_by_user"
          ],
          "title": "DatasetRowMetadata"
        },
        "DatasetRowsSort": {
          "properties": {
            "name": {
              "type": "string",
              "const": "num_rows",
              "title": "Name",
              "default": "num_rows"
            },
            "ascending": {
              "type": "boolean",
              "title": "Ascending",
              "default": true
            },
            "sort_type": {
              "type": "string",
              "const": "column",
              "title": "Sort Type",
              "default": "column"
            }
          },
          "type": "object",
          "title": "DatasetRowsSort"
        },
        "DatasetType": {
          "type": "string",
          "enum": [
            "training",
            "inference"
          ],
          "title": "DatasetType"
        },
        "DatasetUpdateRow": {
          "properties": {
            "index": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "title": "Index"
            },
            "row_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Row Id"
            },
            "edit_type": {
              "type": "string",
              "const": "update_row",
              "title": "Edit Type",
              "default": "update_row"
            },
            "values": {
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "type": "object",
              "title": "Values"
            }
          },
          "type": "object",
          "required": [
            "values"
          ],
          "title": "DatasetUpdateRow"
        },
        "DatasetUpdatedAtSort": {
          "properties": {
            "name": {
              "type": "string",
              "const": "updated_at",
              "title": "Name",
              "default": "updated_at"
            },
            "ascending": {
              "type": "boolean",
              "title": "Ascending",
              "default": true
            },
            "sort_type": {
              "type": "string",
              "const": "column",
              "title": "Sort Type",
              "default": "column"
            }
          },
          "type": "object",
          "title": "DatasetUpdatedAtSort"
        },
        "DatasetUsedInProjectFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "used_in_project",
              "title": "Name",
              "default": "used_in_project"
            },
            "value": {
              "type": "string",
              "format": "uuid4",
              "title": "Value"
            }
          },
          "type": "object",
          "required": [
            "value"
          ],
          "title": "DatasetUsedInProjectFilter"
        },
        "DatasetVersionDB": {
          "properties": {
            "version_index": {
              "type": "integer",
              "title": "Version Index"
            },
            "name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "created_by_user": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/UserInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "num_rows": {
              "type": "integer",
              "title": "Num Rows"
            },
            "column_names": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Column Names"
            },
            "rows_added": {
              "type": "integer",
              "title": "Rows Added"
            },
            "rows_removed": {
              "type": "integer",
              "title": "Rows Removed"
            },
            "rows_edited": {
              "type": "integer",
              "title": "Rows Edited"
            },
            "columns_added": {
              "type": "integer",
              "title": "Columns Added"
            },
            "columns_removed": {
              "type": "integer",
              "title": "Columns Removed"
            },
            "columns_renamed": {
              "type": "integer",
              "title": "Columns Renamed"
            }
          },
          "type": "object",
          "required": [
            "version_index",
            "name",
            "created_at",
            "created_by_user",
            "num_rows",
            "column_names",
            "rows_added",
            "rows_removed",
            "rows_edited",
            "columns_added",
            "columns_removed",
            "columns_renamed"
          ],
          "title": "DatasetVersionDB"
        },
        "DatasetVersionIndexSort": {
          "properties": {
            "name": {
              "type": "string",
              "const": "version_index",
              "title": "Name",
              "default": "version_index"
            },
            "ascending": {
              "type": "boolean",
              "title": "Ascending",
              "default": true
            },
            "sort_type": {
              "type": "string",
              "const": "column",
              "title": "Sort Type",
              "default": "column"
            }
          },
          "type": "object",
          "title": "DatasetVersionIndexSort"
        },
        "DeletePromptResponse": {
          "properties": {
            "message": {
              "type": "string",
              "minLength": 1,
              "title": "Message"
            }
          },
          "type": "object",
          "required": [
            "message"
          ],
          "title": "DeletePromptResponse"
        },
        "DeleteRunResponse": {
          "properties": {
            "message": {
              "type": "string",
              "title": "Message"
            }
          },
          "type": "object",
          "required": [
            "message"
          ],
          "title": "DeleteRunResponse"
        },
        "DeleteRunsRequest": {
          "properties": {
            "run_ids": {
              "items": {
                "type": "string",
                "format": "uuid4"
              },
              "type": "array",
              "title": "Run Ids"
            }
          },
          "type": "object",
          "required": [
            "run_ids"
          ],
          "title": "DeleteRunsRequest"
        },
        "DeleteRunsResponse": {
          "properties": {
            "message": {
              "type": "string",
              "title": "Message"
            }
          },
          "type": "object",
          "required": [
            "message"
          ],
          "title": "DeleteRunsResponse"
        },
        "DeleteScorerResponse": {
          "properties": {
            "message": {
              "type": "string",
              "title": "Message"
            }
          },
          "type": "object",
          "required": [
            "message"
          ],
          "title": "DeleteScorerResponse"
        },
        "DeleteUserResponse": {
          "properties": {
            "message": {
              "type": "string",
              "title": "Message"
            }
          },
          "type": "object",
          "required": [
            "message"
          ],
          "title": "DeleteUserResponse"
        },
        "Distribution": {
          "properties": {
            "bins": {
              "items": {
                "type": "number"
              },
              "type": "array",
              "title": "Bins"
            },
            "counts": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Counts"
            },
            "metrics": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/GroupByMetrics"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "required": [
            "bins",
            "counts"
          ],
          "title": "Distribution",
          "description": "A distribution histogram for a run/filter for a particular numerical column.\n\nbins are boundaries for the x axis and counts are the y axis. bins will have 1 more value than counts because the\ncount at index i is for the range [bin[i], bin[i+1]), with the lower boundary inclusive and the upper boundary\nexclusive"
        },
        "DistributionRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "meta_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Cols"
            },
            "col": {
              "type": "string",
              "title": "Col"
            },
            "nbins": {
              "type": "integer",
              "title": "Nbins",
              "default": 20
            },
            "limit_min": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Limit Min"
            },
            "limit_max": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Limit Max"
            },
            "remove_outliers": {
              "type": "boolean",
              "title": "Remove Outliers",
              "default": false
            },
            "include_metrics": {
              "type": "boolean",
              "title": "Include Metrics",
              "default": false
            }
          },
          "type": "object",
          "required": [
            "col"
          ],
          "title": "DistributionRequest",
          "description": "A distribution histogram for a run/filter for a particular numerical column.\n\nbins are boundaries for the x axis and counts are the y axis. bins will have 1 more value than counts because the\ncount at index i is for the range [bin[i], bin[i+1]), with the lower boundary inclusive and the upper boundary\nexclusive"
        },
        "Document-Input": {
          "properties": {
            "page_content": {
              "type": "string",
              "title": "Page Content",
              "description": "Content of the document."
            },
            "metadata": {
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "type": "object",
              "title": "Metadata"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "page_content"
          ],
          "title": "Document"
        },
        "Document-Output": {
          "properties": {
            "content": {
              "type": "string",
              "title": "Content",
              "description": "Content of the document."
            },
            "metadata": {
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "type": "object",
              "title": "Metadata"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "content"
          ],
          "title": "Document"
        },
        "EditAction": {
          "type": "string",
          "enum": [
            "relabel",
            "delete",
            "select_for_label",
            "relabel_as_pred",
            "update_text",
            "shift_span",
            "add_span",
            "create_new_label"
          ],
          "title": "EditAction",
          "description": "The available actions you can take in an edit."
        },
        "EditContent": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "new_label": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "New Label"
            },
            "search_string": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Search String"
            },
            "text_replacement": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Text Replacement"
            },
            "use_regex": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Use Regex",
              "default": false
            },
            "shift_span_start_num_words": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Shift Span Start Num Words"
            },
            "shift_span_end_num_words": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Shift Span End Num Words"
            },
            "edit_spans": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "items": {
                      "$ref": "#/components/schemas/EditSpan"
                    },
                    "type": "array"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Edit Spans"
            },
            "note": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Note"
            },
            "edit_action": {
              "$ref": "#/components/schemas/EditAction"
            },
            "sample_ids": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Sample Ids",
              "default": []
            },
            "filter": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FilterParams"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Map Threshold"
            },
            "inference_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Inference Name"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "split": {
              "$ref": "#/components/schemas/Split"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "exported": {
              "type": "boolean",
              "title": "Exported"
            },
            "content": {
              "items": {
                "$ref": "#/components/schemas/EditRowData"
              },
              "type": "array",
              "title": "Content"
            },
            "has_next_page": {
              "type": "boolean",
              "title": "Has Next Page"
            },
            "reviewers": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/EditReviewDB"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Reviewers",
              "default": []
            }
          },
          "type": "object",
          "required": [
            "edit_action",
            "project_id",
            "run_id",
            "split",
            "id",
            "created_at",
            "exported",
            "content",
            "has_next_page"
          ],
          "title": "EditContent"
        },
        "EditCreateRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "new_label": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "New Label"
            },
            "search_string": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Search String"
            },
            "text_replacement": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Text Replacement"
            },
            "use_regex": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Use Regex",
              "default": false
            },
            "shift_span_start_num_words": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Shift Span Start Num Words"
            },
            "shift_span_end_num_words": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Shift Span End Num Words"
            },
            "edit_spans": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "items": {
                      "$ref": "#/components/schemas/EditSpan"
                    },
                    "type": "array"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Edit Spans"
            },
            "note": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Note"
            },
            "edit_action": {
              "$ref": "#/components/schemas/EditAction"
            },
            "sample_ids": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Sample Ids",
              "default": []
            },
            "filter": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FilterParams"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Map Threshold"
            }
          },
          "type": "object",
          "required": [
            "edit_action"
          ],
          "title": "EditCreateRequest"
        },
        "EditCreateResponse": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "new_label": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "New Label"
            },
            "search_string": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Search String"
            },
            "text_replacement": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Text Replacement"
            },
            "use_regex": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Use Regex",
              "default": false
            },
            "shift_span_start_num_words": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Shift Span Start Num Words"
            },
            "shift_span_end_num_words": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Shift Span End Num Words"
            },
            "edit_spans": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "items": {
                      "$ref": "#/components/schemas/EditSpan"
                    },
                    "type": "array"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Edit Spans"
            },
            "note": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Note"
            },
            "edit_action": {
              "$ref": "#/components/schemas/EditAction"
            },
            "sample_ids": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Sample Ids",
              "default": []
            },
            "filter": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FilterParams"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Map Threshold"
            },
            "inference_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Inference Name"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "split": {
              "$ref": "#/components/schemas/Split"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "exported": {
              "type": "boolean",
              "title": "Exported"
            }
          },
          "type": "object",
          "required": [
            "edit_action",
            "project_id",
            "run_id",
            "split",
            "id",
            "created_at",
            "exported"
          ],
          "title": "EditCreateResponse"
        },
        "EditDeleteResponse": {
          "properties": {
            "message": {
              "type": "string",
              "title": "Message"
            }
          },
          "type": "object",
          "required": [
            "message"
          ],
          "title": "EditDeleteResponse"
        },
        "EditExportDB": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "edit_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Edit Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "user_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          },
          "type": "object",
          "required": [
            "id",
            "edit_id",
            "created_at"
          ],
          "title": "EditExportDB"
        },
        "EditExportRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "all_but": {
              "type": "boolean",
              "title": "All But",
              "default": false
            },
            "file_type": {
              "$ref": "#/components/schemas/FileType",
              "default": "csv"
            },
            "include_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include Cols",
              "default": []
            },
            "col_mapping": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Col Mapping",
              "default": {
  
              }
            },
            "hf_format": {
              "type": "boolean",
              "title": "Hf Format",
              "default": false
            },
            "tagging_schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaggingSchema"
                },
                {
                  "type": "null"
                }
              ]
            },
            "edit_ids": {
              "items": {
                "type": "string",
                "format": "uuid4"
              },
              "type": "array",
              "title": "Edit Ids"
            },
            "edit_overrides": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/EditOverride-Input"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Edit Overrides",
              "default": []
            },
            "only_export_edited": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Only Export Edited",
              "default": false
            },
            "min_reviews": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "title": "Min Reviews"
            }
          },
          "type": "object",
          "required": [
            "edit_ids"
          ],
          "title": "EditExportRequest"
        },
        "EditGetResponse": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "new_label": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "New Label"
            },
            "search_string": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Search String"
            },
            "text_replacement": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Text Replacement"
            },
            "use_regex": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Use Regex",
              "default": false
            },
            "shift_span_start_num_words": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Shift Span Start Num Words"
            },
            "shift_span_end_num_words": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Shift Span End Num Words"
            },
            "edit_spans": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "items": {
                      "$ref": "#/components/schemas/EditSpan"
                    },
                    "type": "array"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Edit Spans"
            },
            "note": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Note"
            },
            "edit_action": {
              "$ref": "#/components/schemas/EditAction"
            },
            "sample_ids": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Sample Ids",
              "default": []
            },
            "filter": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FilterParams"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Map Threshold"
            },
            "inference_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Inference Name"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "split": {
              "$ref": "#/components/schemas/Split"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "exported": {
              "type": "boolean",
              "title": "Exported"
            },
            "reviewers": {
              "items": {
                "$ref": "#/components/schemas/EditReviewDB"
              },
              "type": "array",
              "title": "Reviewers"
            }
          },
          "type": "object",
          "required": [
            "edit_action",
            "project_id",
            "run_id",
            "split",
            "id",
            "created_at",
            "exported"
          ],
          "title": "EditGetResponse"
        },
        "EditOverride-Input": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "new_label": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "New Label"
            },
            "search_string": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Search String"
            },
            "text_replacement": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Text Replacement"
            },
            "use_regex": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Use Regex",
              "default": false
            },
            "shift_span_start_num_words": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Shift Span Start Num Words"
            },
            "shift_span_end_num_words": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Shift Span End Num Words"
            },
            "edit_spans": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "items": {
                      "$ref": "#/components/schemas/EditSpan"
                    },
                    "type": "array"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Edit Spans"
            },
            "note": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Note"
            },
            "edit_action": {
              "$ref": "#/components/schemas/EditAction"
            },
            "sample_ids": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Sample Ids"
            },
            "filter": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FilterParams"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Map Threshold"
            },
            "inference_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Inference Name"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "split": {
              "$ref": "#/components/schemas/Split"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            }
          },
          "type": "object",
          "required": [
            "edit_action",
            "sample_ids",
            "project_id",
            "run_id",
            "split"
          ],
          "title": "EditOverride",
          "description": "A class for specifying conflict overrides during an edit export request.\n\nIf 2 edits in an edit export request are making edits on conflicting sample IDs, (ie edit 1 removes samples\n(1,2,3,4) and edit 2 relabels sample 2, that would be a conflict), the override allows us to bypass the conflict.\nThe sample_ids correspond to the samples in the dataset of the run being exported."
        },
        "EditOverride-Output": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "new_label": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "New Label"
            },
            "search_string": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Search String"
            },
            "text_replacement": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Text Replacement"
            },
            "use_regex": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Use Regex",
              "default": false
            },
            "shift_span_start_num_words": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Shift Span Start Num Words"
            },
            "shift_span_end_num_words": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Shift Span End Num Words"
            },
            "edit_spans": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "items": {
                      "$ref": "#/components/schemas/EditSpan"
                    },
                    "type": "array"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Edit Spans"
            },
            "note": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Note"
            },
            "edit_action": {
              "$ref": "#/components/schemas/EditAction"
            },
            "sample_ids": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Sample Ids"
            },
            "filter": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FilterParams"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Map Threshold"
            },
            "inference_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Inference Name"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "split": {
              "$ref": "#/components/schemas/Split"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            }
          },
          "type": "object",
          "required": [
            "edit_action",
            "sample_ids",
            "project_id",
            "run_id",
            "split"
          ],
          "title": "EditOverride",
          "description": "A class for specifying conflict overrides during an edit export request.\n\nIf 2 edits in an edit export request are making edits on conflicting sample IDs, (ie edit 1 removes samples\n(1,2,3,4) and edit 2 relabels sample 2, that would be a conflict), the override allows us to bypass the conflict.\nThe sample_ids correspond to the samples in the dataset of the run being exported."
        },
        "EditReviewDB": {
          "properties": {
            "created_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Created By"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            }
          },
          "type": "object",
          "required": [
            "created_by",
            "created_at"
          ],
          "title": "EditReviewDB",
          "description": "Reviewer of an edit."
        },
        "EditRowData": {
          "properties": {
            "id": {
              "type": "integer",
              "title": "Id"
            },
            "gold": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Gold"
            },
            "pred": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Pred"
            },
            "text": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Text"
            },
            "meta": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta"
            },
            "spans": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/Span"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Spans"
            },
            "image": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Image",
              "default": ""
            },
            "boxes": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/BBox"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Boxes"
            },
            "input": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Input"
            },
            "target": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Target"
            },
            "generated_output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Output"
            }
          },
          "type": "object",
          "required": [
            "id",
            "input",
            "target",
            "generated_output"
          ],
          "title": "EditRowData"
        },
        "EditSpan": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "start_index": {
              "type": "integer",
              "title": "Start Index"
            },
            "end_index": {
              "type": "integer",
              "title": "End Index"
            },
            "label": {
              "type": "string",
              "title": "Label"
            }
          },
          "type": "object",
          "required": [
            "start_index",
            "end_index",
            "label"
          ],
          "title": "EditSpan"
        },
        "EditSummary": {
          "properties": {
            "edit_action": {
              "$ref": "#/components/schemas/EditAction"
            },
            "count": {
              "type": "integer",
              "title": "Count"
            }
          },
          "type": "object",
          "required": [
            "edit_action",
            "count"
          ],
          "title": "EditSummary"
        },
        "EmailVerificationRequest": {
          "properties": {
            "email": {
              "type": "string",
              "format": "email",
              "title": "Email"
            }
          },
          "type": "object",
          "required": [
            "email"
          ],
          "title": "EmailVerificationRequest"
        },
        "EmbeddingData": {
          "properties": {
            "id": {
              "type": "integer",
              "title": "Id"
            },
            "text_sample": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Text Sample"
            },
            "x": {
              "type": "number",
              "title": "X"
            },
            "y": {
              "type": "number",
              "title": "Y"
            },
            "gold": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Gold"
            },
            "pred": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Pred"
            },
            "data_error_potential": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Data Error Potential"
            },
            "confidence": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Confidence"
            },
            "drift_score": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Drift Score"
            },
            "meta": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta"
            },
            "span_start": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Span Start"
            },
            "span_end": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Span End"
            },
            "cluster_id": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Cluster Id"
            },
            "image": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Image"
            },
            "bbox": {
              "anyOf": [
                {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Bbox"
            },
            "error_type": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Error Type"
            },
            "is_pred": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Pred"
            },
            "is_gold": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Gold"
            },
            "bleu": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Bleu"
            },
            "generated_output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Output"
            },
            "generated_uncertainty": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Uncertainty"
            },
            "input": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Input"
            },
            "perplexity": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Perplexity"
            },
            "rouge": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Rouge"
            },
            "target": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Target"
            }
          },
          "type": "object",
          "required": [
            "id",
            "x",
            "y"
          ],
          "title": "EmbeddingData"
        },
        "EmbeddingPointRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "ids": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Ids"
            },
            "meta_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Cols"
            },
            "circle": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Circle"
                },
                {
                  "type": "null"
                }
              ]
            },
            "num_samples": {
              "type": "integer",
              "title": "Num Samples",
              "default": 5
            }
          },
          "type": "object",
          "title": "EmbeddingPointRequest"
        },
        "EmbeddingPointResponse": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "ids": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Ids"
            },
            "meta_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Cols"
            },
            "circle": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Circle"
                },
                {
                  "type": "null"
                }
              ]
            },
            "num_samples": {
              "type": "integer",
              "title": "Num Samples",
              "default": 5
            },
            "embedding_data": {
              "items": {
                "$ref": "#/components/schemas/EmbeddingData"
              },
              "type": "array",
              "title": "Embedding Data"
            }
          },
          "type": "object",
          "required": [
            "embedding_data"
          ],
          "title": "EmbeddingPointResponse"
        },
        "EmbeddingRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "meta_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Cols"
            },
            "num_samples": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Samples"
            },
            "text_sample_length": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Text Sample Length",
              "default": 500
            },
            "include_text_sample": {
              "type": "boolean",
              "title": "Include Text Sample",
              "default": false
            },
            "file_type": {
              "$ref": "#/components/schemas/FileType",
              "default": "csv"
            },
            "only_meta_cols": {
              "type": "boolean",
              "title": "Only Meta Cols",
              "default": false
            },
            "use_seed": {
              "type": "boolean",
              "title": "Use Seed",
              "default": true
            }
          },
          "type": "object",
          "title": "EmbeddingRequest"
        },
        "ErrorDistribution": {
          "properties": {
            "labels": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Labels",
              "default": []
            },
            "counts": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Counts",
              "default": []
            },
            "percentage": {
              "type": "number",
              "title": "Percentage",
              "default": 0
            }
          },
          "type": "object",
          "title": "ErrorDistribution"
        },
        "EvaluateAlertDB": {
          "properties": {
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "alert_name": {
              "type": "string",
              "title": "Alert Name"
            },
            "filter": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/RangePromptFilterParam"
                },
                {
                  "$ref": "#/components/schemas/ValuePromptFilterParam"
                },
                {
                  "$ref": "#/components/schemas/CategoricalPromptFilterParam"
                }
              ],
              "title": "Filter",
              "discriminator": {
                "propertyName": "filter_type",
                "mapping": {
                  "category": "#/components/schemas/CategoricalPromptFilterParam",
                  "range": "#/components/schemas/RangePromptFilterParam",
                  "value": "#/components/schemas/ValuePromptFilterParam"
                }
              }
            },
            "field_name": {
              "type": "string",
              "title": "Field Name"
            },
            "description": {
              "type": "string",
              "title": "Description"
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            }
          },
          "type": "object",
          "required": [
            "project_id",
            "run_id",
            "alert_name",
            "filter",
            "field_name",
            "description",
            "id",
            "created_at",
            "updated_at"
          ],
          "title": "EvaluateAlertDB"
        },
        "EvaluateProjectSettings": {
          "properties": {
            "scorers_config": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorersConfig-Output"
                },
                {
                  "type": "null"
                }
              ]
            },
            "metric_weights_configuration": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "$ref": "#/components/schemas/MetricWeight"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Weights Configuration"
            }
          },
          "type": "object",
          "title": "EvaluateProjectSettings"
        },
        "EvaluateRunRequest": {
          "properties": {
            "scorers": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AgenticWorkflowSuccessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/AgenticSessionSuccessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/BleuScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ChunkAttributionUtilizationScorer"
                  },
                  {
                    "$ref": "#/components/schemas/CompletenessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ContextAdherenceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ContextRelevanceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/CorrectnessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/GroundTruthAdherenceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputPIIScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputSexistScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputToneScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputToxicityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InstructionAdherenceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputPIIScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputSexistScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputToneScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputToxicityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/PromptInjectionScorer"
                  },
                  {
                    "$ref": "#/components/schemas/PromptPerplexityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/RougeScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ToolErrorRateScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ToolSelectionQualityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/UncertaintyScorer"
                  }
                ],
                "discriminator": {
                  "propertyName": "name",
                  "mapping": {
                    "agentic_session_success": "#/components/schemas/AgenticSessionSuccessScorer",
                    "agentic_workflow_success": "#/components/schemas/AgenticWorkflowSuccessScorer",
                    "bleu": "#/components/schemas/BleuScorer",
                    "chunk_attribution_utilization": "#/components/schemas/ChunkAttributionUtilizationScorer",
                    "completeness": "#/components/schemas/CompletenessScorer",
                    "context_adherence": "#/components/schemas/ContextAdherenceScorer",
                    "context_relevance": "#/components/schemas/ContextRelevanceScorer",
                    "correctness": "#/components/schemas/CorrectnessScorer",
                    "ground_truth_adherence": "#/components/schemas/GroundTruthAdherenceScorer",
                    "input_pii": "#/components/schemas/InputPIIScorer",
                    "input_sexist": "#/components/schemas/InputSexistScorer",
                    "input_tone": "#/components/schemas/InputToneScorer",
                    "input_toxicity": "#/components/schemas/InputToxicityScorer",
                    "instruction_adherence": "#/components/schemas/InstructionAdherenceScorer",
                    "output_pii": "#/components/schemas/OutputPIIScorer",
                    "output_sexist": "#/components/schemas/OutputSexistScorer",
                    "output_tone": "#/components/schemas/OutputToneScorer",
                    "output_toxicity": "#/components/schemas/OutputToxicityScorer",
                    "prompt_injection": "#/components/schemas/PromptInjectionScorer",
                    "prompt_perplexity": "#/components/schemas/PromptPerplexityScorer",
                    "rouge": "#/components/schemas/RougeScorer",
                    "tool_error_rate": "#/components/schemas/ToolErrorRateScorer",
                    "tool_selection_quality": "#/components/schemas/ToolSelectionQualityScorer",
                    "uncertainty": "#/components/schemas/UncertaintyScorer"
                  }
                }
              },
              "type": "array",
              "title": "Scorers",
              "description": "List of Galileo scorers to enable."
            },
            "registered_scorers": {
              "items": {
                "$ref": "#/components/schemas/RegisteredScorerConfig"
              },
              "type": "array",
              "title": "Registered Scorers",
              "description": "List of registered scorers to enable."
            },
            "generated_scorers": {
              "items": {
                "$ref": "#/components/schemas/GeneratedScorerConfig"
              },
              "type": "array",
              "title": "Generated Scorers",
              "description": "List of generated scorers to enable."
            },
            "workflows": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WorkflowStep"
                  },
                  {
                    "$ref": "#/components/schemas/ChainStep"
                  },
                  {
                    "$ref": "#/components/schemas/LlmStep"
                  },
                  {
                    "$ref": "#/components/schemas/RetrieverStep"
                  },
                  {
                    "$ref": "#/components/schemas/ToolStep"
                  },
                  {
                    "$ref": "#/components/schemas/AgentStep"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "agent": "#/components/schemas/AgentStep",
                    "chain": "#/components/schemas/ChainStep",
                    "llm": "#/components/schemas/LlmStep",
                    "retriever": "#/components/schemas/RetrieverStep",
                    "tool": "#/components/schemas/ToolStep",
                    "workflow": "#/components/schemas/WorkflowStep"
                  }
                }
              },
              "type": "array",
              "minItems": 1,
              "title": "Workflows",
              "description": "List of workflows to include in the run."
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id",
              "description": "Evaluate Project ID to which the run should be associated."
            },
            "project_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Name",
              "description": "Evaluate Project name to which the run should be associated. If the project does not exist, it will be created."
            },
            "run_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Run Name",
              "description": "Name of the run. If no name is provided, a timestamp-based name will be generated."
            }
          },
          "type": "object",
          "required": [
            "workflows"
          ],
          "title": "EvaluateRunRequest",
          "examples": [
            {
              "project_name": "my-evaluate-project",
              "run_name": "my-evaluate-run",
              "scorers": [
                {
                  "name": "correctness"
                },
                {
                  "name": "output_pii"
                }
              ],
              "workflows": [
                {
                  "created_at_ns": 1.7416230180038863e+18,
                  "duration_ns": 0,
                  "input": "who is a smart LLM?",
                  "metadata": {
  
                  },
                  "name": "llm",
                  "output": "I am!",
                  "type": "llm"
                }
              ]
            },
            {
              "project_id": "00000000-0000-0000-0000-000000000000",
              "registered_scorers": [
                {
                  "name": "my_registered_scorer"
                }
              ],
              "run_name": "my-evaluate-run",
              "workflows": [
                {
                  "created_at_ns": 1.7416230180039421e+18,
                  "duration_ns": 0,
                  "input": "who is a smart LLM?",
                  "metadata": {
  
                  },
                  "name": "llm",
                  "output": "I am!",
                  "type": "llm"
                }
              ]
            }
          ]
        },
        "EvaluateRunResponse": {
          "properties": {
            "message": {
              "type": "string",
              "title": "Message"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "project_name": {
              "type": "string",
              "title": "Project Name"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "run_name": {
              "type": "string",
              "title": "Run Name"
            },
            "workflows_count": {
              "type": "integer",
              "title": "Workflows Count"
            },
            "records_count": {
              "type": "integer",
              "title": "Records Count"
            }
          },
          "type": "object",
          "required": [
            "message",
            "project_id",
            "project_name",
            "run_id",
            "run_name",
            "workflows_count",
            "records_count"
          ],
          "title": "EvaluateRunResponse"
        },
        "EvaluateRunResultsRequest": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            },
            "project_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Name"
            },
            "run_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Run Id"
            },
            "run_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Run Name"
            }
          },
          "type": "object",
          "title": "EvaluateRunResultsRequest"
        },
        "ExecutionStatus": {
          "type": "string",
          "enum": [
            "triggered",
            "failed",
            "error",
            "timeout",
            "paused",
            "not_triggered"
          ],
          "title": "ExecutionStatus",
          "description": "Status of the execution."
        },
        "ExperimentCreateRequest": {
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "title": "Name"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "title": "ExperimentCreateRequest"
        },
        "ExperimentResponse": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "name": {
              "type": "string",
              "title": "Name"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            }
          },
          "type": "object",
          "required": [
            "id",
            "created_at",
            "updated_at",
            "name",
            "project_id"
          ],
          "title": "ExperimentResponse"
        },
        "ExperimentUpdateRequest": {
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "title": "Name"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "title": "ExperimentUpdateRequest"
        },
        "ExportRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "all_but": {
              "type": "boolean",
              "title": "All But",
              "default": false
            },
            "file_type": {
              "$ref": "#/components/schemas/FileType",
              "default": "csv"
            },
            "include_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include Cols",
              "default": []
            },
            "col_mapping": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Col Mapping",
              "default": {
  
              }
            },
            "hf_format": {
              "type": "boolean",
              "title": "Hf Format",
              "default": false
            },
            "tagging_schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaggingSchema"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "title": "ExportRequest"
        },
        "ExtraAlertFilters": {
          "properties": {
            "map_threshold": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Map Threshold"
            }
          },
          "type": "object",
          "title": "ExtraAlertFilters",
          "description": "Extra filters for alerts.\n\nFor simplicity of use, all types should be str to make filtering in the DB easier"
        },
        "FactualityTemplate": {
          "properties": {
            "metric_system_prompt": {
              "type": "string",
              "title": "Metric System Prompt",
              "default": "# Task\n\nYou will be given a prompt that was sent to a large language model (LLM), and the LLM's response. Your task is to assess whether the response is factually correct.\n\n## Task output format\n\nYou must respond in the following JSON format:\n\n```\n{\n    \"explanation\": string\n    \"was_factual\": boolean\n}\n```\n\n\"explanation\": Your step-by-step reasoning process. List out the claims made in the response, and for each claim, provide a detailed explanation of why that claim is or is not factual.\n\n\"was_factual\": `true` if the response was completely factually correct according to the instructions above, `false` otherwise.\n\nYou must respond with a valid JSON string.\n\n## Task guidelines\n\n### Input format\n\nIn some cases, the prompt may include multiple messages of chat history. If so, each message will begin with one of the following prefixes:\n\n- \"System: \"\n- \"Human: \"\n- \"AI: \"\n\n### How to determine the value of `was_factual`\n\n- was_factual should be false if anything in the response is factually incorrect, and true otherwise.\n- If the response omits some useful information, but does not include any falsehoods, was_factual should be true.\n- The prompt itself may contain false information. If the response repeats this false information, was_factual should be false. In other words, do not assume that the prompt is factually correct when evaluating the response.\n- If the prompt and response involve a domain where the concept of \"factual accuracy\" doesn't strictly apply, assess whatever quality of the response is most intuitively similar to factual accuracy. For example, if the prompt asks the LLM to write code, assess whether the code is free of syntax errors and implements the intended logic.\n\n### Writing the explanation\n\n- As stated above, a typical explanation should list out the claims made in the response, and for each claim, provide a detailed explanation of why that claim is or is not factual.\n- If the response doesn't make claims per se, break down the response into constituent parts in the most natural way given its content. For example, in code generation tasks, you might break down the response into individual functions or lines of code.\n- Work step by step, and do not give an overall assessment of the response until the end of your explanation."
            },
            "metric_description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Description",
              "description": "Description of what the metric should do."
            },
            "value_field_name": {
              "type": "string",
              "title": "Value Field Name",
              "default": "was_factual"
            },
            "explanation_field_name": {
              "type": "string",
              "title": "Explanation Field Name",
              "description": "Field name to look for in the chainpoll response, for the explanation.",
              "default": "explanation"
            },
            "template": {
              "type": "string",
              "title": "Template",
              "default": "The prompt was:\n\n```\n{query}\n```\n\nThe response was:\n\n```\n{response}\n```\n\nRespond with a JSON object having two fields: `explanation` (string) and `was_factual` (boolean). Everything in your response should be valid JSON.\n\nREMEMBER: if the prompt asks the LLM to compose an answer on the basis of a \"context\" or other reference text or texts, you MUST IGNORE these texts when evaluating the response. Evaluate the response as though the reference texts were NOT provided. Do NOT refer to these texts in your evaluation."
            },
            "metric_few_shot_examples": {
              "items": {
                "$ref": "#/components/schemas/FewShotExample"
              },
              "type": "array",
              "title": "Metric Few Shot Examples",
              "default": [
                {
                  "generation_prompt_and_response": "The prompt was:\n\n```\nI have heard people talking about the chess move \"en passant\", but I don't know what it is and how it works. Could you explain it to me?\n```\n\nThe response was:\n\n```\nCertainly! \"En passant\" is a special rule in chess that allows a pawn to capture an enemy pawn that has moved two squares forward from its initial position, as if it had only moved one square forward. This can only be done on the ensuing move, and only if the capturing pawn was on its fifth rank at the time the enemy pawn made its double-move. Here's an example to illustrate:\n\n1. e4 e5\n2. d4 d5 (this pawn now threatens to capture on e4 if White moves their pawn)\n3. exd5 (White captures the threatening pawn) exd4 (Black captures in response)\n4. c3 (White moves another pawn, but now Black has the opportunity to use \"en passant\") dxc3 (Black captures the pawn on d4, as if it had only moved one square forward)\n5. Nxc3\n\nI hope that helps!\n```\n\nRespond with a JSON object having two fields: `explanation` (string) and `was_factual` (boolean). Everything in your response should be valid JSON.",
                  "evaluating_response": "{\n    \"explanation\": \"The response makes several claims about the meaning of \\\"en passant\\\" in chess, then provides an illustrative example. Let's evaluate the claims first, then the example.\\n\\n# Claims\\n\\n1. The response claims that 'en passant' is a special rule in chess that allows a pawn to capture an enemy pawn that has moved two squares forward from its initial position, as if it had only moved one square forward. This claim is factually correct, as 'en passant' indeed allows for such a capture under specified conditions.\\n\\n2. The response also claims that this capture can only be done on the ensuing move and only if the capturing pawn was on its fifth rank at the time. This is also factually correct, as one of the requirements for the 'en passant' capture is that the capturing pawn must be on the fifth rank when the opponent's pawn moves two squares forward.\\n\\n# Illustrative Example\\n\\nFor the purposes of this metric, we'll say that a chess example like this one is \\\"correct\\\" if\\n\\n- All the moves are valid according to the rules of chess\\n- The example demonstrates what it is intended to demonstrate (in this case, the en passant rule)\\n\\nTo check these conditions, let's waslk through the example one move at a time, with a clear description of the board state after each move.\\n\\n### Initial Position\\nThe game starts with the standard initial setup of the chessboard.\\n\\n### Move 1\\n**1. e4 e5**\\n\\n- **White moves pawn from e2 to e4.**\\n  This opens lines for the bishop and queen and controls the center.\\n- **Black moves pawn from e7 to e5.**\\n  This mirrors White's move, also controlling the center.\\n\\n**Board State:**\\n```\\nr n b q k b n r\\np p p     p p p\\n\\n        P\\n        p\\n\\nP P P     P P P\\nR N B Q K B N R\\n```\\n\\n### Move 2\\n**2. d4 d5**\\n\\n- **White moves pawn from d2 to d4.**\\n  Now, White controls more central space and threatens the pawn on e5.\\n- **Black moves pawn from d7 to d5.**\\n  Black counters by challenging the center with another pawn.\\n\\n**Board State:**\\n```\\nr n b q k b n r\\np p   p   p p p\\n\\n        P\\n  p P p P\\n\\nP   P     P P P\\nR N B Q K B N R\\n```\\n\\n### Move 3\\n**3. exd5 exd4**\\n\\n- **White captures the pawn on d5 with the pawn from e4 (exd5).**\\n  Now White has a pawn on d5.\\n- **Black incorrectly moves to exd4.**\\n  According to the rules of chess, this is an illegal move because the pawn on e5 cannot capture a pawn on d4 directly. The pawn on d4 does not exist; the move should capture diagonally if there is a piece or pawn on d4.\\n\\nSince there is an error in Move 3, the illustrative example is not factually correct according to the criteria listed above. Therefore, the example as a whole is not entirely factually correct.\",\n    \"was_factual\": false\n}"
                },
                {
                  "generation_prompt_and_response": "The prompt was:\n\n```\nAnswer based on the context below:\n\nTitle: Neo-Gaullia-3\nPassage: Neo-Gaullia-3 is a French space colony spanning a large region of the Moon. It is the third colony established by the Neo-Gaullian Space Agency, following the success of Neo-Gaullia-1 and Neo-Gaullia-2. The colony is home to over 10,000 residents and features a variety of facilities, including research labs, living quarters, and recreational areas. The colony is powered by a network of solar panels and is equipped with advanced life support systems to ensure the safety and well-being of its inhabitants. Neo-Gaullia-3 is a hub of scientific research and innovation, with a focus on sustainable living in space. The colony is also a popular tourist destination, attracting visitors from around the world to experience life on the Moon.\n\nQuestion: How many French space colonies have existed on the Moon?\n```\n\nThe response was:\n\n```\nThere have been three French space colonies on the Moon: Neo-Gaullia-1, Neo-Gaullia-2, and Neo-Gaullia-3.\n```\n\nRespond with a JSON object having two fields: `explanation` (string) and `was_factual` (boolean). Everything in your response should be valid JSON.",
                  "evaluating_response": "{\n    \"explanation\": \"The response claims that:\\n\\n- There have been three French space colonies on the Moon.\\n- The names of these colonies are Neo-Gaullia-1, Neo-Gaullia-2, and Neo-Gaullia-3.\\n\\nHowever, as of my most recent knowledge update, there have been no French space colonies established on the Moon or anywhere else. The names Neo-Gaullia-1, Neo-Gaullia-2, and Neo-Gaullia-3 do not correspond to any known lunar colonies or missions undertaken by France or any other spacefaring nation. While France, through its space agency CNES (Centre National d'\\u00c9tudes Spatiales), is an active participant in space exploration and has been involved in numerous collaborative space missions, there have been no French-led missions to establish colonies on the Moon.\",\n    \"was_factual\": false\n}"
                }
              ]
            }
          },
          "type": "object",
          "title": "FactualityTemplate"
        },
        "FeatureColumnsResponse": {
          "properties": {
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "feature_names": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Feature Names"
            }
          },
          "type": "object",
          "required": [
            "project_id",
            "run_id",
            "feature_names"
          ],
          "title": "FeatureColumnsResponse"
        },
        "FeedbackAggregate": {
          "properties": {
            "aggregate": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LikeDislikeAggregate"
                },
                {
                  "$ref": "#/components/schemas/StarAggregate"
                },
                {
                  "$ref": "#/components/schemas/ScoreAggregate"
                },
                {
                  "$ref": "#/components/schemas/TagsAggregate"
                }
              ],
              "title": "Aggregate",
              "discriminator": {
                "propertyName": "feedback_type",
                "mapping": {
                  "like_dislike": "#/components/schemas/LikeDislikeAggregate",
                  "score": "#/components/schemas/ScoreAggregate",
                  "star": "#/components/schemas/StarAggregate",
                  "tags": "#/components/schemas/TagsAggregate"
                }
              }
            }
          },
          "type": "object",
          "required": [
            "aggregate"
          ],
          "title": "FeedbackAggregate"
        },
        "FeedbackRatingCreate": {
          "properties": {
            "explanation": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Explanation"
            },
            "rating": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LikeDislikeRating"
                },
                {
                  "$ref": "#/components/schemas/StarRating"
                },
                {
                  "$ref": "#/components/schemas/ScoreRating"
                },
                {
                  "$ref": "#/components/schemas/TagsRating"
                },
                {
                  "$ref": "#/components/schemas/TextRating"
                }
              ],
              "title": "Rating",
              "discriminator": {
                "propertyName": "feedback_type",
                "mapping": {
                  "like_dislike": "#/components/schemas/LikeDislikeRating",
                  "score": "#/components/schemas/ScoreRating",
                  "star": "#/components/schemas/StarRating",
                  "tags": "#/components/schemas/TagsRating",
                  "text": "#/components/schemas/TextRating"
                }
              }
            }
          },
          "type": "object",
          "required": [
            "rating"
          ],
          "title": "FeedbackRatingCreate"
        },
        "FeedbackRatingDB": {
          "properties": {
            "explanation": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Explanation"
            },
            "rating": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LikeDislikeRating"
                },
                {
                  "$ref": "#/components/schemas/StarRating"
                },
                {
                  "$ref": "#/components/schemas/ScoreRating"
                },
                {
                  "$ref": "#/components/schemas/TagsRating"
                },
                {
                  "$ref": "#/components/schemas/TextRating"
                }
              ],
              "title": "Rating",
              "discriminator": {
                "propertyName": "feedback_type",
                "mapping": {
                  "like_dislike": "#/components/schemas/LikeDislikeRating",
                  "score": "#/components/schemas/ScoreRating",
                  "star": "#/components/schemas/StarRating",
                  "tags": "#/components/schemas/TagsRating",
                  "text": "#/components/schemas/TextRating"
                }
              }
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            }
          },
          "type": "object",
          "required": [
            "rating",
            "created_at",
            "created_by"
          ],
          "title": "FeedbackRatingDB"
        },
        "FeedbackRatingOperationType": {
          "type": "string",
          "enum": [
            "create",
            "delete"
          ],
          "title": "FeedbackRatingOperationType",
          "description": "Operation type for bulk feedback rating operations."
        },
        "FeedbackTemplateCreate": {
          "properties": {
            "name": {
              "type": "string",
              "maxLength": 255,
              "minLength": 1,
              "title": "Name"
            },
            "include_explanation": {
              "type": "boolean",
              "title": "Include Explanation",
              "default": false
            },
            "criteria": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Criteria"
            },
            "constraints": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LikeDislikeConstraints"
                },
                {
                  "$ref": "#/components/schemas/StarConstraints"
                },
                {
                  "$ref": "#/components/schemas/ScoreConstraints"
                },
                {
                  "$ref": "#/components/schemas/TagsConstraints"
                },
                {
                  "$ref": "#/components/schemas/TextConstraints"
                }
              ],
              "title": "Constraints",
              "discriminator": {
                "propertyName": "feedback_type",
                "mapping": {
                  "like_dislike": "#/components/schemas/LikeDislikeConstraints",
                  "score": "#/components/schemas/ScoreConstraints",
                  "star": "#/components/schemas/StarConstraints",
                  "tags": "#/components/schemas/TagsConstraints",
                  "text": "#/components/schemas/TextConstraints"
                }
              }
            }
          },
          "type": "object",
          "required": [
            "name",
            "constraints"
          ],
          "title": "FeedbackTemplateCreate"
        },
        "FeedbackTemplateDB": {
          "properties": {
            "name": {
              "type": "string",
              "maxLength": 255,
              "minLength": 1,
              "title": "Name"
            },
            "include_explanation": {
              "type": "boolean",
              "title": "Include Explanation"
            },
            "criteria": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Criteria"
            },
            "constraints": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LikeDislikeConstraints"
                },
                {
                  "$ref": "#/components/schemas/StarConstraints"
                },
                {
                  "$ref": "#/components/schemas/ScoreConstraints"
                },
                {
                  "$ref": "#/components/schemas/TagsConstraints"
                },
                {
                  "$ref": "#/components/schemas/TextConstraints"
                }
              ],
              "title": "Constraints",
              "discriminator": {
                "propertyName": "feedback_type",
                "mapping": {
                  "like_dislike": "#/components/schemas/LikeDislikeConstraints",
                  "score": "#/components/schemas/ScoreConstraints",
                  "star": "#/components/schemas/StarConstraints",
                  "tags": "#/components/schemas/TagsConstraints",
                  "text": "#/components/schemas/TextConstraints"
                }
              }
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            }
          },
          "type": "object",
          "required": [
            "name",
            "include_explanation",
            "constraints",
            "id",
            "created_at",
            "created_by"
          ],
          "title": "FeedbackTemplateDB"
        },
        "FeedbackTemplateUpdate": {
          "properties": {
            "name": {
              "type": "string",
              "maxLength": 255,
              "minLength": 1,
              "title": "Name"
            },
            "criteria": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Criteria"
            }
          },
          "type": "object",
          "required": [
            "name",
            "criteria"
          ],
          "title": "FeedbackTemplateUpdate"
        },
        "FewShotExample": {
          "properties": {
            "generation_prompt_and_response": {
              "type": "string",
              "title": "Generation Prompt And Response"
            },
            "evaluating_response": {
              "type": "string",
              "title": "Evaluating Response"
            }
          },
          "type": "object",
          "required": [
            "generation_prompt_and_response",
            "evaluating_response"
          ],
          "title": "FewShotExample",
          "description": "Few-shot example for a chainpoll metric prompt."
        },
        "FieldType": {
          "type": "string",
          "enum": [
            "int",
            "float",
            "string",
            "array",
            "bool"
          ],
          "title": "FieldType"
        },
        "FileType": {
          "type": "string",
          "enum": [
            "csv",
            "json",
            "parquet",
            "arrow",
            "zip"
          ],
          "title": "FileType"
        },
        "FilterOptionsResponse": {
          "properties": {
            "filter_options": {
              "additionalProperties": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "type": "object",
              "title": "Filter Options"
            }
          },
          "type": "object",
          "title": "FilterOptionsResponse"
        },
        "FilterParams": {
          "properties": {
            "ids": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Ids",
              "default": []
            },
            "similar_to": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Similar To"
            },
            "num_similar_to": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Similar To"
            },
            "text_pat": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Text Pat"
            },
            "regex": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Regex"
            },
            "data_error_potential_high": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Data Error Potential High"
            },
            "data_error_potential_low": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Data Error Potential Low"
            },
            "misclassified_only": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Misclassified Only"
            },
            "gold_filter": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Gold Filter"
            },
            "pred_filter": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Pred Filter"
            },
            "meta_filter": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/MetaFilter"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Filter"
            },
            "drift_score_threshold": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Drift Score Threshold"
            },
            "is_drifted": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Drifted"
            },
            "span_sample_ids": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Span Sample Ids"
            },
            "span_text": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Span Text"
            },
            "span_regex": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Span Regex",
              "default": false
            },
            "exclude_ids": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Exclude Ids",
              "default": []
            },
            "lasso": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/LassoSelection"
                },
                {
                  "type": "null"
                }
              ]
            },
            "class_filter": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Class Filter"
            },
            "likely_mislabeled": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Likely Mislabeled"
            },
            "likely_mislabeled_dep_percentile": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 100,
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "title": "Likely Mislabeled Dep Percentile",
              "default": 0
            },
            "cbo_clusters": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Cbo Clusters"
            },
            "data_embs": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Data Embs",
              "default": false
            },
            "confidence_high": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Confidence High"
            },
            "confidence_low": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Confidence Low"
            },
            "is_otb": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Otb"
            },
            "image_ids": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Image Ids"
            },
            "cluster_ids": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Cluster Ids"
            },
            "correctly_classified": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Correctly Classified"
            },
            "is_edited": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Edited"
            }
          },
          "type": "object",
          "title": "FilterParams"
        },
        "FilterPercentageRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "meta_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Cols"
            }
          },
          "type": "object",
          "title": "FilterPercentageRequest"
        },
        "FilterPercentageResponse": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "meta_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Cols"
            },
            "percentage": {
              "type": "number",
              "title": "Percentage"
            },
            "sample_count": {
              "type": "integer",
              "title": "Sample Count"
            },
            "sample_easy_percentage": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sample Easy Percentage"
            },
            "sample_hard_percentage": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sample Hard Percentage"
            },
            "sample_misclassified_percentage": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sample Misclassified Percentage"
            },
            "sample_otb_percentage": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sample Otb Percentage"
            },
            "sample_drifted_percentage": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sample Drifted Percentage"
            },
            "span_count": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Span Count"
            },
            "span_percentage": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Span Percentage"
            },
            "sample_mislabeled_percentage": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sample Mislabeled Percentage"
            },
            "gold_box_count": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Gold Box Count"
            },
            "gold_box_percentage": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Gold Box Percentage"
            },
            "pred_box_count": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Pred Box Count"
            },
            "pred_box_percentage": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Pred Box Percentage"
            },
            "gold_polygon_count": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Gold Polygon Count"
            },
            "gold_polygon_percentage": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Gold Polygon Percentage"
            },
            "pred_polygon_count": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Pred Polygon Count"
            },
            "pred_polygon_percentage": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Pred Polygon Percentage"
            },
            "sample_error_percentage": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sample Error Percentage"
            },
            "label_noise_pct": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Label Noise Pct"
            },
            "feature_noise_pct": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Feature Noise Pct"
            }
          },
          "type": "object",
          "required": [
            "percentage",
            "sample_count"
          ],
          "title": "FilterPercentageResponse"
        },
        "FiltersRequestBody": {
          "properties": {
            "filters": {
              "items": {
                "$ref": "#/components/schemas/QueryFilterV1"
              },
              "type": "array",
              "title": "Filters"
            }
          },
          "type": "object",
          "title": "FiltersRequestBody"
        },
        "GenAIProjectSettings-Input": {
          "properties": {
            "scorers_config": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorersConfig-Input"
                },
                {
                  "type": "null"
                }
              ]
            },
            "alerts_configuration": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AlertsConfiguration-Input"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "title": "GenAIProjectSettings"
        },
        "GenAIProjectSettings-Output": {
          "properties": {
            "scorers_config": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorersConfig-Output"
                },
                {
                  "type": "null"
                }
              ]
            },
            "alerts_configuration": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AlertsConfiguration-Output"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "title": "GenAIProjectSettings"
        },
        "GeneratedScorer": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          },
          "type": "object",
          "title": "GeneratedScorer"
        },
        "GeneratedScorerAction": {
          "type": "string",
          "enum": [
            "update",
            "delete"
          ],
          "title": "GeneratedScorerAction"
        },
        "GeneratedScorerConfig": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the scorer to enable."
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "title": "GeneratedScorerConfig"
        },
        "GeneratedScorerConfiguration": {
          "properties": {
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o mini"
            },
            "num_judges": {
              "type": "integer",
              "maximum": 10,
              "minimum": 1,
              "title": "Num Judges",
              "default": 3
            }
          },
          "type": "object",
          "title": "GeneratedScorerConfiguration"
        },
        "GeneratedScorerGenerateConfiguration": {
          "properties": {
            "instructions": {
              "type": "string",
              "title": "Instructions"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o"
            }
          },
          "type": "object",
          "required": [
            "instructions"
          ],
          "title": "GeneratedScorerGenerateConfiguration",
          "description": "Info necessary to generate a scorer from instructions."
        },
        "GeneratedScorerResponse": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "name": {
              "type": "string",
              "title": "Name"
            },
            "instructions": {
              "type": "string",
              "title": "Instructions"
            },
            "chain_poll_template": {
              "$ref": "#/components/schemas/ChainPollTemplate"
            },
            "created_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Created By"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "scoreable_node_types": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/NodeType"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scoreable Node Types"
            },
            "scorer_configuration": {
              "$ref": "#/components/schemas/GeneratedScorerConfiguration"
            }
          },
          "type": "object",
          "required": [
            "id",
            "name",
            "instructions",
            "chain_poll_template",
            "created_by",
            "created_at",
            "updated_at",
            "scoreable_node_types",
            "scorer_configuration"
          ],
          "title": "GeneratedScorerResponse"
        },
        "GeneratedScorerTaskResultResponse": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "status": {
              "$ref": "#/components/schemas/GeneratedScorerTaskResultStatus"
            },
            "result_type": {
              "$ref": "#/components/schemas/GeneratedScorerTaskResultType"
            },
            "result": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ChainPollTemplate"
                },
                {
                  "$ref": "#/components/schemas/GeneratedScorerValidationResult"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Result"
            }
          },
          "type": "object",
          "required": [
            "id",
            "created_at",
            "updated_at",
            "status",
            "result_type"
          ],
          "title": "GeneratedScorerTaskResultResponse"
        },
        "GeneratedScorerTaskResultStatus": {
          "type": "string",
          "enum": [
            "pending",
            "completed",
            "failed"
          ],
          "title": "GeneratedScorerTaskResultStatus"
        },
        "GeneratedScorerTaskResultType": {
          "type": "string",
          "enum": [
            "scorer_auto_gen",
            "scorer_validation"
          ],
          "title": "GeneratedScorerTaskResultType"
        },
        "GeneratedScorerValidationRequest": {
          "properties": {
            "query": {
              "type": "string",
              "title": "Query"
            },
            "response": {
              "type": "string",
              "title": "Response"
            },
            "chain_poll_template": {
              "$ref": "#/components/schemas/ChainPollTemplate"
            },
            "scorer_configuration": {
              "$ref": "#/components/schemas/GeneratedScorerConfiguration"
            }
          },
          "type": "object",
          "required": [
            "query",
            "response",
            "chain_poll_template",
            "scorer_configuration"
          ],
          "title": "GeneratedScorerValidationRequest",
          "description": "Info necessary to execute a generated scorer validation job."
        },
        "GeneratedScorerValidationResponse": {
          "properties": {
            "task_result_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Task Result Id"
            }
          },
          "type": "object",
          "required": [
            "task_result_id"
          ],
          "title": "GeneratedScorerValidationResponse"
        },
        "GeneratedScorerValidationResult": {
          "properties": {
            "rating": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Rating"
            },
            "explanation": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Explanation"
            }
          },
          "type": "object",
          "required": [
            "rating",
            "explanation"
          ],
          "title": "GeneratedScorerValidationResult",
          "description": "Result of a generated scorer validation job."
        },
        "GenerationResponse": {
          "properties": {
            "task_result_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Task Result Id"
            }
          },
          "type": "object",
          "required": [
            "task_result_id"
          ],
          "title": "GenerationResponse"
        },
        "GenericAction": {
          "type": "string",
          "enum": [
            "generic_create",
            "generic_read",
            "generic_update",
            "generic_delete"
          ],
          "title": "GenericAction"
        },
        "GenericPermission": {
          "properties": {
            "resource": {
              "$ref": "#/components/schemas/ResourceKind"
            },
            "action": {
              "$ref": "#/components/schemas/GenericAction"
            },
            "allowed": {
              "type": "boolean",
              "title": "Allowed"
            },
            "message": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Message"
            }
          },
          "type": "object",
          "required": [
            "resource",
            "action",
            "allowed"
          ],
          "title": "GenericPermission",
          "description": "Generic permissions describe what a user GENERALLY can and cannot do.\n\nThe actions are not specific to a resource instance (e.g. create). More fine-grained permissions should also be set\nin the authorization policies."
        },
        "GetApiKeyResponse": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "last_used": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Used"
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            },
            "project_role": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CollaboratorRole"
                },
                {
                  "type": "null"
                }
              ]
            },
            "description": {
              "type": "string",
              "title": "Description"
            },
            "expires_at": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Expires At",
              "description": "Expiry date for the API key"
            },
            "created_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Created By"
            },
            "truncated": {
              "type": "string",
              "title": "Truncated"
            }
          },
          "type": "object",
          "required": [
            "id",
            "created_at",
            "updated_at",
            "description",
            "created_by",
            "truncated"
          ],
          "title": "GetApiKeyResponse"
        },
        "GetObserveWorkflowsRequest": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "filters": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserMetadataFilter"
                  }
                ],
                "discriminator": {
                  "propertyName": "name",
                  "mapping": {
                    "user_metadata": "#/components/schemas/UserMetadataFilter"
                  }
                }
              },
              "type": "array",
              "title": "Filters"
            }
          },
          "type": "object",
          "title": "GetObserveWorkflowsRequest"
        },
        "GetPresignedUrlResponse": {
          "properties": {
            "url": {
              "type": "string",
              "title": "Url"
            }
          },
          "type": "object",
          "required": [
            "url"
          ],
          "title": "GetPresignedUrlResponse"
        },
        "GetProjectsPaginatedResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "projects": {
              "items": {
                "$ref": "#/components/schemas/ProjectDB"
              },
              "type": "array",
              "title": "Projects"
            }
          },
          "type": "object",
          "required": [
            "projects"
          ],
          "title": "GetProjectsPaginatedResponse"
        },
        "GetPromptRowsColumnarResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "columns": {
              "items": {
                "$ref": "#/components/schemas/PromptRowColumn"
              },
              "type": "array",
              "title": "Columns"
            },
            "num_filtered_rows": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Filtered Rows"
            },
            "num_rows": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Rows"
            }
          },
          "type": "object",
          "title": "GetPromptRowsColumnarResponse"
        },
        "GetPromptRowsResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "rows": {
              "items": {
                "$ref": "#/components/schemas/PromptRow"
              },
              "type": "array",
              "title": "Rows"
            }
          },
          "type": "object",
          "title": "GetPromptRowsResponse"
        },
        "GetPromptRun": {
          "properties": {
            "hallucination_severity": {
              "type": "integer",
              "maximum": 2,
              "minimum": 0,
              "title": "Hallucination Severity",
              "default": 0
            },
            "name": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            },
            "created_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Created By"
            },
            "num_samples": {
              "type": "integer",
              "title": "Num Samples"
            },
            "winner": {
              "type": "boolean",
              "title": "Winner"
            },
            "dataset_hash": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Dataset Hash"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "task_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaskType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "last_updated_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Last Updated By"
            },
            "run_tags": {
              "items": {
                "$ref": "#/components/schemas/RunTagDB"
              },
              "type": "array",
              "title": "Run Tags"
            },
            "job_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Job Id"
            },
            "job_status": {
              "$ref": "#/components/schemas/JobStatus"
            },
            "model_alias": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Alias"
            },
            "template_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Template Id"
            },
            "dataset_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Dataset Id"
            },
            "template_version_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Template Version Id"
            },
            "template_version": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Template Version"
            },
            "template_version_selected": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Template Version Selected"
            },
            "total_responses": {
              "type": "integer",
              "title": "Total Responses",
              "default": 0
            },
            "metrics": {
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/FeedbackAggregate"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "type": "object",
              "title": "Metrics"
            },
            "average_hallucination": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Hallucination"
            },
            "average_bleu": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Bleu"
            },
            "average_rouge": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Rouge"
            },
            "average_cost": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Cost"
            },
            "average_latency": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Latency"
            },
            "total_cost": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Total Cost"
            },
            "prompt_settings": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PromptRunSettings-Output"
                },
                {
                  "type": "null"
                }
              ]
            },
            "prompt_scorers_configuration": {
              "$ref": "#/components/schemas/ScorersConfiguration"
            },
            "prompt_registered_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/RegisteredScorer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Registered Scorers Configuration"
            },
            "prompt_generated_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Generated Scorers Configuration"
            },
            "prompt_customized_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/CustomizedAgenticSessionSuccessGPTScorer-Output"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedAgenticWorkflowSuccessGPTScorer-Output"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedChunkAttributionUtilizationGPTScorer-Output"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedCompletenessGPTScorer-Output"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedFactualityGPTScorer-Output"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedGroundednessGPTScorer-Output"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedInstructionAdherenceGPTScorer-Output"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedGroundTruthAdherenceGPTScorer-Output"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedToolSelectionQualityGPTScorer-Output"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedToolErrorRateGPTScorer-Output"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "scorer_name",
                      "mapping": {
                        "_customized_agentic_session_success": "#/components/schemas/CustomizedAgenticSessionSuccessGPTScorer-Output",
                        "_customized_agentic_workflow_success": "#/components/schemas/CustomizedAgenticWorkflowSuccessGPTScorer-Output",
                        "_customized_chunk_attribution_utilization_gpt": "#/components/schemas/CustomizedChunkAttributionUtilizationGPTScorer-Output",
                        "_customized_completeness_gpt": "#/components/schemas/CustomizedCompletenessGPTScorer-Output",
                        "_customized_factuality": "#/components/schemas/CustomizedFactualityGPTScorer-Output",
                        "_customized_ground_truth_adherence": "#/components/schemas/CustomizedGroundTruthAdherenceGPTScorer-Output",
                        "_customized_groundedness": "#/components/schemas/CustomizedGroundednessGPTScorer-Output",
                        "_customized_instruction_adherence": "#/components/schemas/CustomizedInstructionAdherenceGPTScorer-Output",
                        "_customized_tool_error_rate": "#/components/schemas/CustomizedToolErrorRateGPTScorer-Output",
                        "_customized_tool_selection_quality": "#/components/schemas/CustomizedToolSelectionQualityGPTScorer-Output"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Customized Scorers Configuration"
            }
          },
          "type": "object",
          "required": [
            "created_by",
            "num_samples",
            "winner",
            "id",
            "created_at",
            "updated_at",
            "last_updated_by",
            "job_id",
            "job_status"
          ],
          "title": "GetPromptRun"
        },
        "GetPromptRunColumnsResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "columns": {
              "items": {
                "$ref": "#/components/schemas/PromptRunColumn"
              },
              "type": "array",
              "title": "Columns"
            },
            "num_filtered_rows": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Filtered Rows"
            },
            "num_rows": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Rows"
            }
          },
          "type": "object",
          "title": "GetPromptRunColumnsResponse"
        },
        "GetPromptRunsResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "runs": {
              "items": {
                "$ref": "#/components/schemas/GetPromptRun"
              },
              "type": "array",
              "title": "Runs"
            }
          },
          "type": "object",
          "title": "GetPromptRunsResponse"
        },
        "GetSplitsResponse": {
          "properties": {
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "splits": {
              "items": {
                "$ref": "#/components/schemas/Split"
              },
              "type": "array",
              "title": "Splits"
            },
            "inference_comparison_splits": {
              "items": {
                "$ref": "#/components/schemas/Split"
              },
              "type": "array",
              "title": "Inference Comparison Splits"
            }
          },
          "type": "object",
          "required": [
            "project_id",
            "run_id",
            "splits",
            "inference_comparison_splits"
          ],
          "title": "GetSplitsResponse"
        },
        "GetTokenResponse": {
          "properties": {
            "access_token": {
              "type": "string",
              "title": "Access Token"
            },
            "token_type": {
              "type": "string",
              "title": "Token Type",
              "default": "bearer"
            },
            "expires_at": {
              "type": "string",
              "format": "date-time",
              "title": "Expires At"
            }
          },
          "type": "object",
          "required": [
            "access_token",
            "expires_at"
          ],
          "title": "GetTokenResponse"
        },
        "GetUserLatestRunsDB": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "runs": {
              "items": {
                "$ref": "#/components/schemas/RunDBThinWithProjectName"
              },
              "type": "array",
              "title": "Runs"
            }
          },
          "type": "object",
          "title": "GetUserLatestRunsDB"
        },
        "GetUserResponse": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "permissions": {
              "items": {
                "$ref": "#/components/schemas/Permission"
              },
              "type": "array",
              "title": "Permissions",
              "default": []
            },
            "email": {
              "type": "string",
              "title": "Email"
            },
            "first_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "First Name",
              "default": ""
            },
            "last_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Name",
              "default": ""
            },
            "auth_method": {
              "$ref": "#/components/schemas/AuthMethod",
              "default": "email"
            },
            "role": {
              "$ref": "#/components/schemas/UserRole",
              "default": "read_only"
            },
            "email_is_verified": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Email Is Verified"
            },
            "organization_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Organization Id"
            },
            "organization_name": {
              "type": "string",
              "title": "Organization Name"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "projects_count": {
              "type": "integer",
              "title": "Projects Count"
            },
            "runs_count": {
              "type": "integer",
              "title": "Runs Count"
            }
          },
          "type": "object",
          "required": [
            "id",
            "email",
            "organization_id",
            "organization_name",
            "created_at",
            "updated_at",
            "projects_count",
            "runs_count"
          ],
          "title": "GetUserResponse"
        },
        "GetUsersResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "users": {
              "items": {
                "$ref": "#/components/schemas/GetUserResponse"
              },
              "type": "array",
              "title": "Users"
            }
          },
          "type": "object",
          "required": [
            "users"
          ],
          "title": "GetUsersResponse"
        },
        "GroundTruthAdherenceScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "ground_truth_adherence",
              "title": "Name",
              "default": "ground_truth_adherence"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            },
            "type": {
              "type": "string",
              "const": "plus",
              "title": "Type",
              "default": "plus"
            },
            "model_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Name",
              "description": "Alias of the model to use for the scorer."
            },
            "num_judges": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 10,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Judges",
              "description": "Number of judges for the scorer."
            }
          },
          "type": "object",
          "title": "GroundTruthAdherenceScorer"
        },
        "GroundTruthAdherenceTemplate": {
          "properties": {
            "metric_system_prompt": {
              "type": "string",
              "title": "Metric System Prompt",
              "default": "I will give you two different texts, called the \"ground truth\" and the \"response.\"\n\nRead both texts, then tell me whether they are \"equivalent,\" in the sense that they basically mean the same thing.\n\nKeep the following guidelines in mind.\n\n- Two texts can be equivalent if they use different phrasing, as long as the phrasing doesn't affect meaning.\n- Two texts can be equivalent if there are _slight_ differences in meaning that wouldn't affect the conclusions that a reasonable reader would draw upon reading them.\n- Imagine that you are grading a free-response exam.  The ground truth given in the answer key for an exam question, and the response is a student's answer to the same question. If you would give the student full marks for this question, that means the two texts are equivalent. If you wouldn't, that means the two texts are not equivalent.\n\nRespond in the following JSON format:\n\n```\n{{\n    \"explanation\": string,\n    \"equivalent\": boolean\n}}\n```\n\n\"explanation\": A step-by-step breakdown of the similarities and differences between the text. For each difference you note (if any), consider why the difference might or might not make the texts non-equivalent, note down your reasoning clearly and explicitly, and ultimately draw a conclusion about whether that difference makes the text non-equivalent.\n\n\"equivalent\": `true` if the texts are equivalent in the sense given above, `false` if they are non-equivalent.\n\nYou must respond with valid JSON."
            },
            "metric_description": {
              "type": "string",
              "title": "Metric Description",
              "default": "This metric computes whether a response from a large language model matches a provided ground truth text."
            },
            "value_field_name": {
              "type": "string",
              "title": "Value Field Name",
              "default": "equivalent"
            },
            "explanation_field_name": {
              "type": "string",
              "title": "Explanation Field Name",
              "description": "Field name to look for in the chainpoll response, for the explanation.",
              "default": "explanation"
            },
            "template": {
              "type": "string",
              "title": "Template",
              "default": "Ground truth:\n\n```\n{ground_truth}\n```\n\nResponse:\n\n```\n{response}\n```"
            },
            "metric_few_shot_examples": {
              "items": {
                "$ref": "#/components/schemas/FewShotExample"
              },
              "type": "array",
              "title": "Metric Few Shot Examples",
              "description": "Few-shot examples for the metric."
            }
          },
          "type": "object",
          "title": "GroundTruthAdherenceTemplate"
        },
        "GroundednessTemplate": {
          "properties": {
            "metric_system_prompt": {
              "type": "string",
              "title": "Metric System Prompt",
              "default": "The user will provide you with a prompt that was sent to an automatic question-answering system, and that system's response. Both will be provided as JSON strings.\n\nThe prompt will contain one or more documents intended as context which the question-answering system was given as reference material.\n\nYour task is to determine whether the answer was supported by the documents.\n\nThink step by step, and explain your reasoning carefully.\nState your observations first, before drawing any conclusions.\n\nRespond in the following JSON format:\n\n```\n{\n    \"explanation\": string,\n    \"was_supported\": boolean\n}\n```\n\n\"explanation\": Your step-by-step reasoning process. List out the claims made in the response, and for each claim, provide a detailed explanation of why that claim is or is not supported by the documents.\n\n\"was_supported\": `true` if the response was supported by the documents, `false` otherwise.\n\nYou must respond with valid JSON."
            },
            "metric_description": {
              "type": "string",
              "title": "Metric Description",
              "default": "I have a RAG (retrieval-augmented generation) system that generates text based on one or more documents that I always include in my prompts. I want a metric that checks whether the generated text was supported by information in the documents. The metric should exhaustively check each claim in the response against the documents, one by one, listing them out explicitly."
            },
            "value_field_name": {
              "type": "string",
              "title": "Value Field Name",
              "default": "was_supported"
            },
            "explanation_field_name": {
              "type": "string",
              "title": "Explanation Field Name",
              "description": "Field name to look for in the chainpoll response, for the explanation.",
              "default": "explanation"
            },
            "template": {
              "type": "string",
              "title": "Template",
              "default": "Prompt JSON:\n\n```\n{query_json}\n```\n\nResponse JSON:\n\n```\n{response_json}\n```"
            },
            "metric_few_shot_examples": {
              "items": {
                "$ref": "#/components/schemas/FewShotExample"
              },
              "type": "array",
              "title": "Metric Few Shot Examples",
              "default": [
                {
                  "generation_prompt_and_response": "Prompt JSON:\n\n```\n\"Context: In the city, the population was distributed as 28.3% under the age of 18, 11.3% from 18 to 24, 32.7% from 25 to 44, 18.2% from 45 to 64, and 9.6% who were 65 years of age or older. The median age was 31 years. For every 100 females, there were 97.3 males. For every 100 females age 18 and over, there were 94.5 males.\\n\\nQuestion: How many in percent weren't 65 years of age or older?\"\n```\n\nResponse JSON:\n\n```\n\"90.4%\"\n```",
                  "evaluating_response": "{\n    \"explanation\": \"This response makes a single claim: that 90.4% of the population is not 65 years of age or older.\\n\\nAccording to the provided document, 9.6% of the population is 65 years of age or older. To find the percentage of people who are not 65 years of age or older, we subtract this percentage from 100%:\\n100% - 9.6% = 90.4%\\n\\nThis matches the percentage in the claim, so the claim is supported.\\n\\nSince this is the only claim made in the response, and it was supported, the response is supported as a whole.\",\n    \"was_supported\": true\n}"
                }
              ]
            }
          },
          "type": "object",
          "title": "GroundednessTemplate",
          "description": "Template for the groundedness metric,\ncontaining all the info necessary to send the groundedness prompt."
        },
        "GroupAction": {
          "type": "string",
          "enum": [
            "update",
            "list_members",
            "join",
            "request_to_join"
          ],
          "title": "GroupAction"
        },
        "GroupByMetrics": {
          "properties": {
            "labels": {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "type": "array",
              "title": "Labels"
            },
            "recall": {
              "items": {
                "type": "number"
              },
              "type": "array",
              "title": "Recall",
              "default": []
            },
            "f1": {
              "items": {
                "type": "number"
              },
              "type": "array",
              "title": "F1",
              "default": []
            },
            "precision": {
              "items": {
                "type": "number"
              },
              "type": "array",
              "title": "Precision",
              "default": []
            },
            "confidence": {
              "items": {
                "type": "number"
              },
              "type": "array",
              "title": "Confidence",
              "default": []
            },
            "support": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Support",
              "default": []
            },
            "data_error_potential": {
              "items": {
                "type": "number"
              },
              "type": "array",
              "title": "Data Error Potential",
              "default": []
            },
            "missed_label": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Missed Label",
              "default": []
            },
            "span_shift": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Span Shift",
              "default": []
            },
            "wrong_tag": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Wrong Tag",
              "default": []
            },
            "ghost_span": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Ghost Span",
              "default": []
            },
            "total_errors": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Total Errors",
              "default": []
            }
          },
          "type": "object",
          "title": "GroupByMetrics",
          "description": "Metrics for a cohort returned in columnar format.\n\nEach field in the class is of equal length (or len 0), mapping to the y-axis\nof each chart. The labels field contains the x-axis labels which apply to all\ny-axes for all charts created for this data.\n\nex:\n    labels: [\"apple\", \"banana\", \"orange\"]\n    precision: [0.95, 0.55, 0.83]\n    recall: [0.93, 0.25, 0.88]\n    ..."
        },
        "GroupCollaborator": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "permissions": {
              "items": {
                "$ref": "#/components/schemas/Permission"
              },
              "type": "array",
              "title": "Permissions",
              "default": []
            },
            "role": {
              "$ref": "#/components/schemas/CollaboratorRole"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "group_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Group Id"
            },
            "group_name": {
              "type": "string",
              "title": "Group Name"
            }
          },
          "type": "object",
          "required": [
            "id",
            "role",
            "created_at",
            "group_id",
            "group_name"
          ],
          "title": "GroupCollaborator"
        },
        "GroupCollaboratorCreate": {
          "properties": {
            "role": {
              "$ref": "#/components/schemas/CollaboratorRole",
              "default": "viewer"
            },
            "group_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Group Id"
            }
          },
          "type": "object",
          "required": [
            "group_id"
          ],
          "title": "GroupCollaboratorCreate"
        },
        "GroupCreate": {
          "properties": {
            "name": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "visibility": {
              "$ref": "#/components/schemas/GroupVisibility",
              "default": "public"
            },
            "users": {
              "items": {
                "$ref": "#/components/schemas/GroupMemberCreate"
              },
              "type": "array",
              "title": "Users",
              "default": []
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "title": "GroupCreate"
        },
        "GroupDB": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "permissions": {
              "items": {
                "$ref": "#/components/schemas/Permission"
              },
              "type": "array",
              "title": "Permissions",
              "default": []
            },
            "name": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "visibility": {
              "$ref": "#/components/schemas/GroupVisibility",
              "default": "public"
            },
            "size": {
              "type": "integer",
              "title": "Size"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "role": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/GroupRole"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The role of the current user in the group."
            }
          },
          "type": "object",
          "required": [
            "id",
            "name",
            "size",
            "created_at"
          ],
          "title": "GroupDB"
        },
        "GroupLabel": {
          "type": "string",
          "enum": [
            "Input Quality",
            "Output Quality",
            "Configuration",
            "LLM Parameters",
            "RAG Quality",
            "RAG Parameters",
            "Generic Parameters",
            "Safety Metrics",
            "Protect",
            "System Metrics",
            "Rating Summary",
            "Custom Metrics",
            "Security",
            "Dataset",
            "Agent Quality"
          ],
          "title": "GroupLabel",
          "description": "Group labels for prompt rows."
        },
        "GroupMemberAction": {
          "type": "string",
          "enum": [
            "update_role",
            "delete"
          ],
          "title": "GroupMemberAction"
        },
        "GroupMemberCreate": {
          "properties": {
            "user_id": {
              "type": "string",
              "format": "uuid4",
              "title": "User Id"
            },
            "role": {
              "$ref": "#/components/schemas/GroupRole",
              "default": "member"
            }
          },
          "type": "object",
          "required": [
            "user_id"
          ],
          "title": "GroupMemberCreate"
        },
        "GroupMemberDB": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "permissions": {
              "items": {
                "$ref": "#/components/schemas/Permission"
              },
              "type": "array",
              "title": "Permissions",
              "default": []
            },
            "user_id": {
              "type": "string",
              "format": "uuid4",
              "title": "User Id"
            },
            "group_role": {
              "$ref": "#/components/schemas/GroupRole"
            },
            "first_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "First Name"
            },
            "last_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Name"
            },
            "email": {
              "type": "string",
              "title": "Email"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            }
          },
          "type": "object",
          "required": [
            "id",
            "user_id",
            "group_role",
            "first_name",
            "last_name",
            "email",
            "created_at"
          ],
          "title": "GroupMemberDB"
        },
        "GroupMemberUpdate": {
          "properties": {
            "role": {
              "$ref": "#/components/schemas/GroupRole"
            }
          },
          "type": "object",
          "required": [
            "role"
          ],
          "title": "GroupMemberUpdate"
        },
        "GroupRole": {
          "type": "string",
          "enum": [
            "maintainer",
            "member",
            "pending"
          ],
          "title": "GroupRole"
        },
        "GroupRoleInfo": {
          "properties": {
            "name": {
              "$ref": "#/components/schemas/GroupRole",
              "examples": [
                "maintainer"
              ]
            },
            "display_name": {
              "type": "string",
              "title": "Display Name",
              "examples": [
                "Maintainer"
              ]
            },
            "description": {
              "type": "string",
              "title": "Description",
              "examples": [
                "Can add, remove, and edit group members."
              ]
            }
          },
          "type": "object",
          "required": [
            "name",
            "display_name",
            "description"
          ],
          "title": "GroupRoleInfo"
        },
        "GroupUpdate": {
          "properties": {
            "name": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "visibility": {
              "$ref": "#/components/schemas/GroupVisibility"
            }
          },
          "type": "object",
          "required": [
            "name",
            "description",
            "visibility"
          ],
          "title": "GroupUpdate"
        },
        "GroupVisibility": {
          "type": "string",
          "enum": [
            "public",
            "private",
            "hidden"
          ],
          "title": "GroupVisibility"
        },
        "HTTPValidationError": {
          "properties": {
            "detail": {
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              },
              "type": "array",
              "title": "Detail"
            }
          },
          "type": "object",
          "title": "HTTPValidationError"
        },
        "HallucinationSegment": {
          "properties": {
            "hallucination_severity": {
              "type": "integer",
              "maximum": 2,
              "minimum": 0,
              "title": "Hallucination Severity",
              "default": 0
            },
            "start": {
              "type": "integer",
              "title": "Start"
            },
            "end": {
              "type": "integer",
              "title": "End"
            },
            "hallucination": {
              "type": "number",
              "title": "Hallucination"
            }
          },
          "type": "object",
          "required": [
            "start",
            "end",
            "hallucination"
          ],
          "title": "HallucinationSegment"
        },
        "HasEmbeddingsResponse": {
          "properties": {
            "has_data_embs": {
              "type": "boolean",
              "title": "Has Data Embs",
              "default": false
            },
            "has_model_embs": {
              "type": "boolean",
              "title": "Has Model Embs",
              "default": false
            }
          },
          "type": "object",
          "title": "HasEmbeddingsResponse"
        },
        "HealthcheckResponse": {
          "properties": {
            "api_version": {
              "type": "string",
              "title": "Api Version"
            },
            "message": {
              "type": "string",
              "title": "Message"
            },
            "version": {
              "type": "string",
              "title": "Version"
            }
          },
          "type": "object",
          "required": [
            "api_version",
            "message",
            "version"
          ],
          "title": "HealthcheckResponse"
        },
        "IndexSelector": {
          "properties": {
            "selector_type": {
              "type": "string",
              "const": "indexes",
              "title": "Selector Type",
              "default": "indexes"
            },
            "indexes": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Indexes"
            }
          },
          "type": "object",
          "required": [
            "indexes"
          ],
          "title": "IndexSelector",
          "description": "Choose specific indexes to apply the bulk operation to."
        },
        "InferenceModelMetrics": {
          "properties": {
            "confidence": {
              "type": "number",
              "title": "Confidence"
            }
          },
          "type": "object",
          "required": [
            "confidence"
          ],
          "title": "InferenceModelMetrics"
        },
        "InferenceNamesResponse": {
          "properties": {
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "inference_names": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Inference Names"
            }
          },
          "type": "object",
          "required": [
            "project_id",
            "run_id",
            "inference_names"
          ],
          "title": "InferenceNamesResponse"
        },
        "InferenceResults": {
          "properties": {
            "split_total_sample_count": {
              "type": "integer",
              "title": "Split Total Sample Count"
            },
            "split_total_span_count": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Split Total Span Count"
            },
            "sample_count": {
              "type": "integer",
              "title": "Sample Count"
            },
            "span_count": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Span Count"
            },
            "has_next_page": {
              "type": "boolean",
              "title": "Has Next Page"
            },
            "model_metrics": {
              "$ref": "#/components/schemas/InferenceModelMetrics"
            },
            "data_metrics": {
              "items": {
                "$ref": "#/components/schemas/DataRow"
              },
              "type": "array",
              "title": "Data Metrics",
              "default": []
            },
            "labels": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Labels"
            }
          },
          "type": "object",
          "required": [
            "split_total_sample_count",
            "sample_count",
            "has_next_page",
            "model_metrics",
            "labels"
          ],
          "title": "InferenceResults"
        },
        "InferenceRunResults": {
          "properties": {
            "split_name": {
              "$ref": "#/components/schemas/Split"
            },
            "inference_name": {
              "type": "string",
              "title": "Inference Name"
            },
            "split_run_results": {
              "$ref": "#/components/schemas/InferenceResults"
            }
          },
          "type": "object",
          "required": [
            "split_name",
            "inference_name",
            "split_run_results"
          ],
          "title": "InferenceRunResults"
        },
        "InputMap": {
          "properties": {
            "prompt": {
              "type": "string",
              "title": "Prompt"
            },
            "prefix": {
              "type": "string",
              "title": "Prefix",
              "default": ""
            },
            "suffix": {
              "type": "string",
              "title": "Suffix",
              "default": ""
            }
          },
          "type": "object",
          "required": [
            "prompt"
          ],
          "title": "InputMap"
        },
        "InputPIIScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "input_pii",
              "title": "Name",
              "default": "input_pii"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            }
          },
          "type": "object",
          "title": "InputPIIScorer"
        },
        "InputSexistScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "input_sexist",
              "title": "Name",
              "default": "input_sexist"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            }
          },
          "type": "object",
          "title": "InputSexistScorer"
        },
        "InputToneScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "input_tone",
              "title": "Name",
              "default": "input_tone"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            }
          },
          "type": "object",
          "title": "InputToneScorer"
        },
        "InputToxicityScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "input_toxicity",
              "title": "Name",
              "default": "input_toxicity"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            }
          },
          "type": "object",
          "title": "InputToxicityScorer"
        },
        "InsightChartRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "meta_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Cols"
            }
          },
          "type": "object",
          "title": "InsightChartRequest"
        },
        "InsightChartResponse": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "meta_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Cols"
            },
            "x_labels": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "X Labels"
            },
            "y_labels": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Y Labels"
            },
            "data": {
              "items": {
                "items": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "integer"
                    }
                  ]
                },
                "type": "array"
              },
              "type": "array",
              "title": "Data"
            }
          },
          "type": "object",
          "required": [
            "x_labels",
            "y_labels",
            "data"
          ],
          "title": "InsightChartResponse"
        },
        "InsightType": {
          "type": "string",
          "enum": [
            "vertical_bar",
            "horizontal_bar"
          ],
          "title": "InsightType"
        },
        "InstructionAdherenceScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "instruction_adherence",
              "title": "Name",
              "default": "instruction_adherence"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            },
            "type": {
              "type": "string",
              "const": "plus",
              "title": "Type",
              "default": "plus"
            },
            "model_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Name",
              "description": "Alias of the model to use for the scorer."
            },
            "num_judges": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 10,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Judges",
              "description": "Number of judges for the scorer."
            }
          },
          "type": "object",
          "title": "InstructionAdherenceScorer"
        },
        "InstructionAdherenceTemplate": {
          "properties": {
            "metric_system_prompt": {
              "type": "string",
              "title": "Metric System Prompt",
              "default": "The user will provide you with a prompt that was sent to a chatbot system, and the chatbot's latest response. Both will be provided as JSON strings.\n\nIn some cases, the prompt may be split up into multiple messages. If so, each message will begin with one of the following prefixes:\n\n- \"System: \"\n- \"Human: \"\n- \"AI: \"\n\nIf you see these prefixes, pay attention to them because they indicate where messages begin and end. Messages prefixed with \"System: \" contain system instructions which the chatbot should follow. Messages prefixed with \"Human: \" are user input. Messages prefixed with \"AI: \" are system responses to user input.\nIf you do not see these prefixes, treat the prompt as though it was a single user input message prefixed with \"Human: \".\n\nYour task is to determine whether the latest response from the chatbot is consistent with the instructions provided in the system prompt (if there is one) or in the first user message (if there is no system prompt).\n\nFocus only on the latest response and the instructions. Do not consider the chat history or any previous messages from the chatbot.\n\nThink step by step, and explain your reasoning carefully.\nState your observations first, before drawing any conclusions.\n\nRespond in the following JSON format:\n\n```\n{\n    \"explanation\": string,\n    \"is_consistent\": boolean\n}\n```\n\n\"explanation\": Your step-by-step reasoning process. List out the relevant instructions and explain whether the latest response adheres to each of them.\n\n\"is_consistent\": `true` if the latest response is consistent with the instructions, `false` otherwise.\n\nYou must respond with a valid JSON string."
            },
            "metric_description": {
              "type": "string",
              "title": "Metric Description",
              "default": "I have a chatbot application.\nMy system prompt contains a list of instructions for what the chatbot should and should not do in every interaction. I want a metric that checks whether the latest response from the chatbot is consistent with the instructions.\n\nThe metric should only evaluate the latest message (the response), not the chat history. It should return false only if the latest message violates one or more instructions. Violations earlier in the chat history should not affect whether the value is true or false. The value should only depend on whether the latest message was consistent with the instructions, considered in context. The metric should only consider instructions that are applicable to the latest message."
            },
            "value_field_name": {
              "type": "string",
              "title": "Value Field Name",
              "default": "is_consistent"
            },
            "explanation_field_name": {
              "type": "string",
              "title": "Explanation Field Name",
              "description": "Field name to look for in the chainpoll response, for the explanation.",
              "default": "explanation"
            },
            "template": {
              "type": "string",
              "title": "Template",
              "default": "Prompt JSON:\n\n```\n{query_json}\n```\n\nResponse JSON:\n\n```\n{response_json}\n```"
            },
            "metric_few_shot_examples": {
              "items": {
                "$ref": "#/components/schemas/FewShotExample"
              },
              "type": "array",
              "title": "Metric Few Shot Examples",
              "default": [
                {
                  "generation_prompt_and_response": "Prompt JSON:\n\n```\n\"System: Always be polite and respectful. Do not provide medical advice.\nHuman: Can you tell me what to do if I have a headache?\"\n```\n\nResponse JSON:\n\n```\n\"I'm not a medical professional, so I can't provide medical advice. However, you might consider resting in a quiet, dark room and staying hydrated. If your headache persists, please consult a healthcare provider.\"\n```",
                  "evaluating_response": "{\n    \"explanation\": \"The relevant instructions are: 'Always be polite and respectful' and 'Do not provide medical advice.'\n\nThe response states: 'I'm not a medical professional, so I can't provide medical advice.' This adheres to the instruction not to provide medical advice.\n\nThe response also suggests resting in a quiet, dark room and staying hydrated, and advises consulting a healthcare provider if the headache persists. These suggestions are general and do not constitute medical advice.\n\nThe tone of the response is polite and respectful.\n\nTherefore, the latest response is consistent with the instructions.\",\n    \"is_consistent\": true\n}"
                }
              ]
            }
          },
          "type": "object",
          "title": "InstructionAdherenceTemplate"
        },
        "IntegrationAction": {
          "type": "string",
          "enum": [
            "update",
            "delete",
            "share"
          ],
          "title": "IntegrationAction"
        },
        "IntegrationDB": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "permissions": {
              "items": {
                "$ref": "#/components/schemas/Permission"
              },
              "type": "array",
              "title": "Permissions",
              "default": []
            },
            "name": {
              "$ref": "#/components/schemas/IntegrationName"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "created_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Created By"
            },
            "is_selected": {
              "type": "boolean",
              "title": "Is Selected",
              "default": false
            }
          },
          "type": "object",
          "required": [
            "id",
            "name",
            "created_at",
            "updated_at",
            "created_by"
          ],
          "title": "IntegrationDB"
        },
        "IntegrationName": {
          "type": "string",
          "enum": [
            "aws_bedrock",
            "aws_sagemaker",
            "azure",
            "databricks",
            "labelstudio",
            "openai",
            "vertex_ai",
            "writer",
            "anthropic",
            "mistral"
          ],
          "title": "IntegrationName"
        },
        "InviteUsersRequest": {
          "properties": {
            "auth_method": {
              "$ref": "#/components/schemas/AuthMethod",
              "default": "email"
            },
            "emails": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "minItems": 1,
              "title": "Emails"
            },
            "role": {
              "$ref": "#/components/schemas/UserRole",
              "default": "user"
            },
            "group_ids": {
              "items": {
                "type": "string",
                "format": "uuid4"
              },
              "type": "array",
              "title": "Group Ids",
              "default": []
            },
            "send_email": {
              "type": "boolean",
              "title": "Send Email",
              "default": true
            }
          },
          "type": "object",
          "required": [
            "emails"
          ],
          "title": "InviteUsersRequest"
        },
        "InvokeResponse": {
          "properties": {
            "status": {
              "type": "string",
              "description": "Status of the execution."
            },
            "api_version": {
              "type": "string",
              "title": "Api Version",
              "default": "1.0.0"
            },
            "text": {
              "type": "string",
              "title": "Text",
              "description": "Text from the request after processing the rules."
            },
            "trace_metadata": {
              "$ref": "#/components/schemas/TraceMetadata"
            },
            "stage_metadata": {
              "$ref": "#/components/schemas/StageMetadata"
            },
            "ruleset_results": {
              "items": {
                "$ref": "#/components/schemas/RulesetResult"
              },
              "type": "array",
              "title": "Ruleset Results",
              "description": "Results of the rule execution."
            },
            "metric_results": {
              "additionalProperties": {
                "$ref": "#/components/schemas/MetricComputation"
              },
              "type": "object",
              "title": "Metric Results",
              "description": "Results of the metric computation."
            },
            "action_result": {
              "$ref": "#/components/schemas/ActionResult"
            },
            "metadata": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metadata",
              "description": "Optional additional metadata. This being echoed back from the request."
            },
            "headers": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Headers",
              "description": "Optional additional HTTP headers that should be included in the response."
            }
          },
          "type": "object",
          "required": [
            "text",
            "trace_metadata",
            "stage_metadata",
            "action_result"
          ],
          "title": "InvokeResponse"
        },
        "JobDB": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "failed_at": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Failed At"
            },
            "completed_at": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Completed At"
            },
            "processing_started": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Processing Started"
            },
            "job_name": {
              "type": "string",
              "title": "Job Name"
            },
            "migration_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Migration Name"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "batch_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Batch Id"
            },
            "status": {
              "type": "string",
              "title": "Status"
            },
            "retries": {
              "type": "integer",
              "title": "Retries"
            },
            "request_data": {
              "type": "object",
              "title": "Request Data"
            },
            "error_message": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Error Message"
            },
            "progress_message": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Progress Message"
            },
            "steps_completed": {
              "type": "integer",
              "title": "Steps Completed",
              "default": 0
            },
            "steps_total": {
              "type": "integer",
              "title": "Steps Total",
              "default": 0
            },
            "progress_percent": {
              "type": "number",
              "title": "Progress Percent",
              "default": 0
            }
          },
          "type": "object",
          "required": [
            "id",
            "created_at",
            "updated_at",
            "job_name",
            "project_id",
            "run_id",
            "status",
            "retries",
            "request_data"
          ],
          "title": "JobDB"
        },
        "JobInfo": {
          "properties": {
            "job_status": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/JobStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Job status used for computing the column. Only set for metrics columns that have a separate scorer job."
            },
            "job_progress_message": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Job Progress Message",
              "description": "Progress message to show the users on hover in case the job is in progress."
            },
            "job_error_message": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Job Error Message",
              "description": "Error message to show the users on hover in case the job fails or errors out."
            },
            "scorer_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scorer Name",
              "description": "Scorer Name executed by the job."
            },
            "job_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorerType"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Whether a job is designated as plus or basic."
            }
          },
          "type": "object",
          "title": "JobInfo"
        },
        "JobStatus": {
          "type": "string",
          "enum": [
            "unstarted",
            "in_progress",
            "completed",
            "error",
            "failed"
          ],
          "title": "JobStatus"
        },
        "LLMExportFormat": {
          "type": "string",
          "enum": [
            "csv",
            "jsonl"
          ],
          "title": "LLMExportFormat"
        },
        "LLMIntegration": {
          "type": "string",
          "enum": [
            "anthropic",
            "azure",
            "aws_bedrock",
            "aws_sagemaker",
            "databricks",
            "vertex_ai",
            "openai",
            "writer",
            "mistral"
          ],
          "title": "LLMIntegration"
        },
        "LabelCoOccurences": {
          "properties": {
            "ids": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Ids"
            },
            "labels": {
              "items": {
                "$ref": "#/components/schemas/TargetLabels"
              },
              "type": "array",
              "title": "Labels"
            },
            "starting_label": {
              "type": "string",
              "title": "Starting Label"
            }
          },
          "type": "object",
          "required": [
            "ids",
            "labels",
            "starting_label"
          ],
          "title": "LabelCoOccurences",
          "description": "Structure for each label co-occurrence response."
        },
        "LabelResponse": {
          "properties": {
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "labels": {
              "items": {
  
              },
              "type": "array",
              "title": "Labels"
            }
          },
          "type": "object",
          "required": [
            "project_id",
            "run_id",
            "labels"
          ],
          "title": "LabelResponse"
        },
        "LabelStudioExportRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "workspace": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Workspace"
            },
            "project_name": {
              "type": "string",
              "title": "Project Name"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "split": {
              "$ref": "#/components/schemas/Split"
            },
            "inference_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Inference Name"
            },
            "labels": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Labels"
            }
          },
          "type": "object",
          "required": [
            "project_name",
            "project_id",
            "run_id",
            "split"
          ],
          "title": "LabelStudioExportRequest",
          "description": "Schema for requesting data to be sent to labelstudio.\n\nComing soon!"
        },
        "LabelStudioIntegration": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "name": {
              "type": "string",
              "const": "labelstudio",
              "title": "Name",
              "default": "labelstudio"
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "url": {
              "type": "string",
              "title": "Url"
            },
            "is_enterprise": {
              "type": "boolean",
              "title": "Is Enterprise"
            }
          },
          "type": "object",
          "required": [
            "url",
            "is_enterprise"
          ],
          "title": "LabelStudioIntegration",
          "description": "The active labelstudio integration information."
        },
        "LabelStudioIntegrationCreate": {
          "properties": {
            "token": {
              "type": "string",
              "title": "Token"
            },
            "url": {
              "type": "string",
              "maxLength": 2083,
              "minLength": 1,
              "format": "uri",
              "title": "Url"
            },
            "is_enterprise": {
              "type": "boolean",
              "title": "Is Enterprise"
            }
          },
          "type": "object",
          "required": [
            "token",
            "url",
            "is_enterprise"
          ],
          "title": "LabelStudioIntegrationCreate"
        },
        "LabelStudioProject": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            },
            "labels": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Labels"
            }
          },
          "type": "object",
          "required": [
            "name",
            "labels"
          ],
          "title": "LabelStudioProject"
        },
        "LassoSelection": {
          "properties": {
            "x": {
              "items": {
                "type": "number"
              },
              "type": "array",
              "title": "X"
            },
            "y": {
              "items": {
                "type": "number"
              },
              "type": "array",
              "title": "Y"
            }
          },
          "type": "object",
          "required": [
            "x",
            "y"
          ],
          "title": "LassoSelection",
          "description": "Representation of a lasso selection (used by embeddings)\n\nx and y correspond to the cursor movement while tracing the lasso. This is natively provided by plotly when creating\na lasso selection, for example"
        },
        "LikeDislikeAggregate": {
          "properties": {
            "feedback_type": {
              "type": "string",
              "const": "like_dislike",
              "title": "Feedback Type",
              "default": "like_dislike"
            },
            "like_count": {
              "type": "integer",
              "title": "Like Count"
            },
            "dislike_count": {
              "type": "integer",
              "title": "Dislike Count"
            },
            "unrated_count": {
              "type": "integer",
              "title": "Unrated Count"
            }
          },
          "type": "object",
          "required": [
            "like_count",
            "dislike_count",
            "unrated_count"
          ],
          "title": "LikeDislikeAggregate"
        },
        "LikeDislikeConstraints": {
          "properties": {
            "feedback_type": {
              "type": "string",
              "const": "like_dislike",
              "title": "Feedback Type"
            }
          },
          "type": "object",
          "required": [
            "feedback_type"
          ],
          "title": "LikeDislikeConstraints"
        },
        "LikeDislikeRating": {
          "properties": {
            "feedback_type": {
              "type": "string",
              "const": "like_dislike",
              "title": "Feedback Type",
              "default": "like_dislike"
            },
            "value": {
              "type": "boolean",
              "title": "Value"
            }
          },
          "type": "object",
          "required": [
            "value"
          ],
          "title": "LikeDislikeRating"
        },
        "ListAlertConfigurationsResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "alerts": {
              "items": {
                "$ref": "#/components/schemas/AlertConfigurationResponse"
              },
              "type": "array",
              "title": "Alerts"
            }
          },
          "type": "object",
          "title": "ListAlertConfigurationsResponse"
        },
        "ListApiKeyResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "api_keys": {
              "items": {
                "$ref": "#/components/schemas/GetApiKeyResponse"
              },
              "type": "array",
              "title": "Api Keys"
            }
          },
          "type": "object",
          "required": [
            "api_keys"
          ],
          "title": "ListApiKeyResponse"
        },
        "ListDatasetParams": {
          "properties": {
            "filters": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DatasetNameFilter"
                  },
                  {
                    "$ref": "#/components/schemas/DatasetDraftFilter"
                  },
                  {
                    "$ref": "#/components/schemas/DatasetUsedInProjectFilter"
                  }
                ],
                "discriminator": {
                  "propertyName": "name",
                  "mapping": {
                    "draft": "#/components/schemas/DatasetDraftFilter",
                    "name": "#/components/schemas/DatasetNameFilter",
                    "used_in_project": "#/components/schemas/DatasetUsedInProjectFilter"
                  }
                }
              },
              "type": "array",
              "title": "Filters"
            },
            "sort": {
              "anyOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DatasetNameSort"
                    },
                    {
                      "$ref": "#/components/schemas/DatasetCreatedAtSort"
                    },
                    {
                      "$ref": "#/components/schemas/DatasetUpdatedAtSort"
                    },
                    {
                      "$ref": "#/components/schemas/DatasetProjectLastUsedAtSort"
                    },
                    {
                      "$ref": "#/components/schemas/DatasetProjectsSort"
                    },
                    {
                      "$ref": "#/components/schemas/DatasetRowsSort"
                    },
                    {
                      "$ref": "#/components/schemas/DatasetLastEditedByUserAtSort"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "name",
                    "mapping": {
                      "created_at": "#/components/schemas/DatasetCreatedAtSort",
                      "last_edited_by_user_at": "#/components/schemas/DatasetLastEditedByUserAtSort",
                      "name": "#/components/schemas/DatasetNameSort",
                      "num_rows": "#/components/schemas/DatasetRowsSort",
                      "project_count": "#/components/schemas/DatasetProjectsSort",
                      "project_last_used_at": "#/components/schemas/DatasetProjectLastUsedAtSort",
                      "updated_at": "#/components/schemas/DatasetUpdatedAtSort"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sort",
              "default": {
                "name": "created_at",
                "ascending": false,
                "sort_type": "column"
              }
            }
          },
          "type": "object",
          "title": "ListDatasetParams"
        },
        "ListDatasetResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "datasets": {
              "items": {
                "$ref": "#/components/schemas/DatasetDB"
              },
              "type": "array",
              "title": "Datasets"
            }
          },
          "type": "object",
          "title": "ListDatasetResponse"
        },
        "ListDatasetVersionParams": {
          "properties": {
            "sort": {
              "anyOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DatasetVersionIndexSort"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "name",
                    "mapping": {
                      "version_index": "#/components/schemas/DatasetVersionIndexSort"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sort"
            }
          },
          "type": "object",
          "title": "ListDatasetVersionParams"
        },
        "ListDatasetVersionResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "versions": {
              "items": {
                "$ref": "#/components/schemas/DatasetVersionDB"
              },
              "type": "array",
              "title": "Versions"
            }
          },
          "type": "object",
          "required": [
            "versions"
          ],
          "title": "ListDatasetVersionResponse"
        },
        "ListGeneratedScorersResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "scorers": {
              "items": {
                "$ref": "#/components/schemas/GeneratedScorerResponse"
              },
              "type": "array",
              "title": "Scorers"
            }
          },
          "type": "object",
          "required": [
            "scorers"
          ],
          "title": "ListGeneratedScorersResponse"
        },
        "ListGroupCollaboratorsResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "collaborators": {
              "items": {
                "$ref": "#/components/schemas/GroupCollaborator"
              },
              "type": "array",
              "title": "Collaborators"
            }
          },
          "type": "object",
          "required": [
            "collaborators"
          ],
          "title": "ListGroupCollaboratorsResponse"
        },
        "ListGroupMembersResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "members": {
              "items": {
                "$ref": "#/components/schemas/GroupMemberDB"
              },
              "type": "array",
              "title": "Members"
            }
          },
          "type": "object",
          "required": [
            "members"
          ],
          "title": "ListGroupMembersResponse"
        },
        "ListGroupsResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "groups": {
              "items": {
                "$ref": "#/components/schemas/GroupDB"
              },
              "type": "array",
              "title": "Groups"
            }
          },
          "type": "object",
          "required": [
            "groups"
          ],
          "title": "ListGroupsResponse"
        },
        "ListMetaRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "meta_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Cols"
            },
            "include_stats": {
              "type": "boolean",
              "title": "Include Stats",
              "default": false
            }
          },
          "type": "object",
          "title": "ListMetaRequest"
        },
        "ListMetaResponse": {
          "properties": {
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "split": {
              "$ref": "#/components/schemas/Split"
            },
            "inference_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Inference Name"
            },
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "meta": {
              "items": {
                "$ref": "#/components/schemas/MetaInfo"
              },
              "type": "array",
              "title": "Meta"
            }
          },
          "type": "object",
          "required": [
            "project_id",
            "run_id",
            "split",
            "meta"
          ],
          "title": "ListMetaResponse"
        },
        "ListOrganizationsResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "organizations": {
              "items": {
                "$ref": "#/components/schemas/OrganizationDB"
              },
              "type": "array",
              "title": "Organizations"
            }
          },
          "type": "object",
          "required": [
            "organizations"
          ],
          "title": "ListOrganizationsResponse"
        },
        "ListPromptDatasetResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "datasets": {
              "items": {
                "$ref": "#/components/schemas/PromptDatasetDB"
              },
              "type": "array",
              "title": "Datasets"
            }
          },
          "type": "object",
          "title": "ListPromptDatasetResponse"
        },
        "ListRegisteredScorersResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "scorers": {
              "items": {
                "$ref": "#/components/schemas/CreateUpdateRegisteredScorerResponse"
              },
              "type": "array",
              "title": "Scorers"
            }
          },
          "type": "object",
          "required": [
            "scorers"
          ],
          "title": "ListRegisteredScorersResponse"
        },
        "ListScorersRequest": {
          "properties": {
            "filters": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ScorerNameFilter"
                  },
                  {
                    "$ref": "#/components/schemas/ScorerTypeFilter"
                  },
                  {
                    "$ref": "#/components/schemas/ScorerTagsFilter"
                  },
                  {
                    "$ref": "#/components/schemas/ScorerCreatorFilter"
                  },
                  {
                    "$ref": "#/components/schemas/ScorerCreatedAtFilter"
                  },
                  {
                    "$ref": "#/components/schemas/ScorerUpdatedAtFilter"
                  }
                ],
                "discriminator": {
                  "propertyName": "name",
                  "mapping": {
                    "created_at": "#/components/schemas/ScorerCreatedAtFilter",
                    "creator": "#/components/schemas/ScorerCreatorFilter",
                    "name": "#/components/schemas/ScorerNameFilter",
                    "scorer_type": "#/components/schemas/ScorerTypeFilter",
                    "tags": "#/components/schemas/ScorerTagsFilter",
                    "updated_at": "#/components/schemas/ScorerUpdatedAtFilter"
                  }
                }
              },
              "type": "array",
              "title": "Filters"
            }
          },
          "type": "object",
          "title": "ListScorersRequest"
        },
        "ListScorersResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerResponse"
              },
              "type": "array",
              "title": "Scorers"
            }
          },
          "type": "object",
          "title": "ListScorersResponse"
        },
        "ListUsageLimitsResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "usage_limits": {
              "items": {
                "$ref": "#/components/schemas/UsageLimitResponse"
              },
              "type": "array",
              "title": "Usage Limits"
            }
          },
          "type": "object",
          "required": [
            "usage_limits"
          ],
          "title": "ListUsageLimitsResponse"
        },
        "ListUserCollaboratorsResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "collaborators": {
              "items": {
                "$ref": "#/components/schemas/UserCollaborator"
              },
              "type": "array",
              "title": "Collaborators"
            }
          },
          "type": "object",
          "required": [
            "collaborators"
          ],
          "title": "ListUserCollaboratorsResponse"
        },
        "LlmMetrics": {
          "properties": {
            "duration_ns": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Duration Ns",
              "description": "Duration of the step in milliseconds."
            },
            "num_input_tokens": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Input Tokens",
              "description": "Number of input tokens."
            },
            "num_output_tokens": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Output Tokens",
              "description": "Number of output tokens."
            },
            "num_total_tokens": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Total Tokens",
              "description": "Total number of tokens."
            },
            "time_to_first_token_ns": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Time To First Token Ns",
              "description": "Number of seconds until the first token was generated."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "LlmMetrics"
        },
        "LlmSpan": {
          "properties": {
            "type": {
              "type": "string",
              "const": "llm",
              "title": "Type",
              "description": "Type: must be `llm`",
              "default": "llm"
            },
            "input": {
              "items": {
                "$ref": "#/components/schemas/galileo_core__schemas__logging__llm__Message-Input"
              },
              "type": "array",
              "title": "Input",
              "description": "Input to the LLM step."
            },
            "output": {
              "$ref": "#/components/schemas/galileo_core__schemas__logging__llm__Message-Input",
              "description": "Output of the LLM step."
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At",
              "description": "Timestamp of the step's creation"
            },
            "user_metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "User Metadata",
              "description": "Metadata associated with this step."
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Tags",
              "description": "Tags associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "metrics": {
              "$ref": "#/components/schemas/LlmMetrics",
              "description": "Metrics used by the LLM step."
            },
            "tools": {
              "anyOf": [
                {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tools",
              "description": "List of available tools passed to the LLM on invocation."
            },
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model",
              "description": "Model used for this step."
            },
            "temperature": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Temperature",
              "description": "Temperature used for generation."
            },
            "finish_reason": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Finish Reason",
              "description": "Reason for finishing."
            }
          },
          "type": "object",
          "required": [
            "input",
            "output"
          ],
          "title": "LlmSpan"
        },
        "LlmSpanRecord": {
          "properties": {
            "type": {
              "type": "string",
              "const": "llm",
              "title": "Type",
              "description": "Type: must be `llm`",
              "default": "llm"
            },
            "input": {
              "items": {
                "$ref": "#/components/schemas/galileo_core__schemas__logging__llm__Message-Output"
              },
              "type": "array",
              "title": "Input",
              "description": "Input to the LLM step."
            },
            "output": {
              "$ref": "#/components/schemas/galileo_core__schemas__logging__llm__Message-Output",
              "description": "Output of the LLM step."
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At",
              "description": "Timestamp of the step's creation"
            },
            "user_metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "User Metadata",
              "description": "Metadata associated with this step."
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Tags",
              "description": "Tags associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "metrics": {
              "$ref": "#/components/schemas/LlmMetrics",
              "description": "Metrics used by the LLM step."
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "ID",
              "description": "Galileo ID of the trace or span"
            },
            "trace_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Trace ID",
              "description": "Galileo ID of the trace containing the span (or the same value as id for a trace)"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project ID",
              "description": "Galileo ID of the project associated with this trace or span"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run ID",
              "description": "Galileo ID of the run (log stream or experiment) associated with this trace or span"
            },
            "updated_at": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Updated At",
              "description": "Timestamp of the trace or span's last update"
            },
            "has_children": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Has Children",
              "description": "Whether or not this trace or span has child spans"
            },
            "metrics_batch_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metrics Batch Id",
              "description": "Galileo ID of the metrics batch associated with this trace or span"
            },
            "metric_info": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TransactionMetricInfo"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Detailed information about the metrics associated with this trace or span"
            },
            "parent_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Parent ID",
              "description": "Galileo ID of the parent of this span"
            },
            "tools": {
              "anyOf": [
                {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tools",
              "description": "List of available tools passed to the LLM on invocation."
            },
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model",
              "description": "Model used for this step."
            },
            "temperature": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Temperature",
              "description": "Temperature used for generation."
            },
            "finish_reason": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Finish Reason",
              "description": "Reason for finishing."
            }
          },
          "type": "object",
          "required": [
            "input",
            "output",
            "id",
            "trace_id",
            "project_id",
            "run_id",
            "parent_id"
          ],
          "title": "LlmSpanRecord"
        },
        "LlmStep": {
          "properties": {
            "type": {
              "type": "string",
              "const": "llm",
              "title": "Type",
              "description": "Type of the step. By default, it is set to llm.",
              "default": "llm"
            },
            "input": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                  },
                  "type": "array"
                }
              ],
              "title": "Input",
              "description": "Input to the LLM step."
            },
            "output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                  },
                  "type": "array"
                }
              ],
              "title": "Output",
              "description": "Output of the LLM step.",
              "default": ""
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at_ns": {
              "type": "integer",
              "title": "Created At Ns",
              "description": "Timestamp of the step's creation, as nanoseconds since epoch."
            },
            "duration_ns": {
              "type": "integer",
              "title": "Duration Ns",
              "description": "Duration of the step in nanoseconds.",
              "default": 0
            },
            "metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "Metadata",
              "description": "Metadata associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "ground_truth": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ground Truth",
              "description": "Ground truth expected output for the step."
            },
            "tools": {
              "anyOf": [
                {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tools",
              "description": "List of available tools passed to the LLM on invocation."
            },
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model",
              "description": "Model used for this step."
            },
            "input_tokens": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Input Tokens",
              "description": "Number of input tokens."
            },
            "output_tokens": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output Tokens",
              "description": "Number of output tokens."
            },
            "total_tokens": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Total Tokens",
              "description": "Total number of tokens."
            },
            "temperature": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Temperature",
              "description": "Temperature used for generation."
            }
          },
          "type": "object",
          "required": [
            "input"
          ],
          "title": "LlmStep"
        },
        "LogRecordsAvailableColumnsRequest": {
          "properties": {
            "log_stream_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Log Stream Id",
              "description": "Log stream id associated with the traces."
            },
            "experiment_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Experiment Id",
              "description": "Experiment id associated with the traces."
            }
          },
          "type": "object",
          "title": "LogRecordsAvailableColumnsRequest",
          "examples": [
            {
              "log_stream_id": "00000000-0000-0000-0000-000000000000"
            }
          ]
        },
        "LogRecordsAvailableColumnsResponse": {
          "properties": {
            "columns": {
              "items": {
                "$ref": "#/components/schemas/ColumnInfo"
              },
              "type": "array",
              "title": "Columns"
            }
          },
          "type": "object",
          "title": "LogRecordsAvailableColumnsResponse",
          "examples": [
            {
              "columns": [
                {
                  "allowed_values": [
                    "tool",
                    "llm",
                    "trace",
                    "workflow",
                    "retriever"
                  ],
                  "applicable_types": [
                    "tool",
                    "llm",
                    "trace",
                    "workflow",
                    "retriever"
                  ],
                  "category": "standard",
                  "data_type": "label",
                  "description": "Type: must be `trace`",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "type",
                  "label": "Type",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [
                    "tool",
                    "llm",
                    "trace",
                    "workflow",
                    "retriever"
                  ],
                  "category": "standard",
                  "data_type": "text",
                  "description": "Input to the step.",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "input",
                  "label": "Input",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [
                    "tool",
                    "llm",
                    "trace",
                    "workflow",
                    "retriever"
                  ],
                  "category": "standard",
                  "data_type": "text",
                  "description": "Output of the step.",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "output",
                  "label": "Output",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [
                    "tool",
                    "llm",
                    "trace",
                    "workflow",
                    "retriever"
                  ],
                  "category": "standard",
                  "data_type": "text",
                  "description": "Name of the step.",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "name",
                  "label": "Name",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [
                    "tool",
                    "llm",
                    "trace",
                    "workflow",
                    "retriever"
                  ],
                  "category": "standard",
                  "data_type": "timestamp",
                  "description": "Timestamp of the step's creation",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "created_at",
                  "label": "Created At",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [
                    "tool",
                    "llm",
                    "trace",
                    "workflow",
                    "retriever"
                  ],
                  "category": "standard",
                  "data_type": "text",
                  "description": "Tags associated with this step.",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "tags",
                  "label": "Tags",
                  "multi_valued": true,
                  "sortable": true
                },
                {
                  "applicable_types": [
                    "tool",
                    "llm",
                    "trace",
                    "workflow",
                    "retriever"
                  ],
                  "category": "standard",
                  "data_type": "integer",
                  "description": "Status code of the step. Used for logging failed/errored steps.",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "status_code",
                  "label": "Status Code",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [
                    "tool",
                    "llm",
                    "trace",
                    "workflow",
                    "retriever"
                  ],
                  "category": "standard",
                  "data_type": "uuid",
                  "description": "Galileo ID of the trace or span",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "id",
                  "label": "ID",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [
                    "tool",
                    "llm",
                    "trace",
                    "workflow",
                    "retriever"
                  ],
                  "category": "standard",
                  "data_type": "uuid",
                  "description": "Galileo ID of the trace containing the span (or the same value as id for a trace)",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "trace_id",
                  "label": "Trace ID",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [
                    "tool",
                    "llm",
                    "trace",
                    "workflow",
                    "retriever"
                  ],
                  "category": "standard",
                  "data_type": "uuid",
                  "description": "Galileo ID of the project associated with this trace or span",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "project_id",
                  "label": "Project ID",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [
                    "tool",
                    "llm",
                    "trace",
                    "workflow",
                    "retriever"
                  ],
                  "category": "standard",
                  "data_type": "uuid",
                  "description": "Galileo ID of the run (log stream or experiment) associated with this trace or span",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "run_id",
                  "label": "Run ID",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [
                    "tool",
                    "llm",
                    "trace",
                    "workflow",
                    "retriever"
                  ],
                  "category": "standard",
                  "data_type": "timestamp",
                  "description": "Timestamp of the trace or span's last update",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "updated_at",
                  "label": "Updated At",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [
                    "tool",
                    "llm",
                    "trace",
                    "workflow",
                    "retriever"
                  ],
                  "category": "standard",
                  "data_type": "boolean",
                  "description": "Whether or not this trace or span has child spans",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "has_children",
                  "label": "Has Children",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [
                    "tool",
                    "llm",
                    "trace",
                    "workflow",
                    "retriever"
                  ],
                  "category": "standard",
                  "data_type": "uuid",
                  "description": "Galileo ID of the metrics batch associated with this trace or span",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "metrics_batch_id",
                  "label": "Metrics Batch Id",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [
                    "workflow",
                    "tool",
                    "retriever",
                    "llm"
                  ],
                  "category": "standard",
                  "data_type": "uuid",
                  "description": "Galileo ID of the parent of this span",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "parent_id",
                  "label": "Parent ID",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [
                    "llm"
                  ],
                  "category": "standard",
                  "data_type": "text",
                  "description": "List of available tools passed to the LLM on invocation.",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "tools",
                  "label": "Tools",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [
                    "llm"
                  ],
                  "category": "standard",
                  "data_type": "text",
                  "description": "Model used for this step.",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "model",
                  "label": "Model",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [
                    "llm"
                  ],
                  "category": "standard",
                  "data_type": "floating_point",
                  "description": "Temperature used for generation.",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "temperature",
                  "label": "Temperature",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [
                    "llm"
                  ],
                  "category": "standard",
                  "data_type": "text",
                  "description": "Reason for finishing.",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "finish_reason",
                  "label": "Finish Reason",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [
                    "tool"
                  ],
                  "category": "standard",
                  "data_type": "text",
                  "description": "Tool call ID.",
                  "filterable": true,
                  "group_label": "Standard",
                  "id": "tool_call_id",
                  "label": "Tool Call Id",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [],
                  "category": "metric",
                  "data_type": "unknown",
                  "description": "Measures the presence and severity of harmful, offensive, or abusive language in the model's response",
                  "filterable": true,
                  "group_label": "Safety Metrics",
                  "id": "metrics/toxicity",
                  "label": "Output Toxicity",
                  "multi_valued": false,
                  "sortable": true
                },
                {
                  "applicable_types": [],
                  "category": "metric",
                  "data_type": "unknown",
                  "description": "BLEU is a case-sensitive measurement of the difference between an model generation and target generation at the sentence-level.",
                  "filterable": true,
                  "group_label": "Output Quality",
                  "id": "metrics/bleu",
                  "label": "BLEU",
                  "multi_valued": false,
                  "sortable": true
                }
              ]
            }
          ]
        },
        "LogRecordsBooleanFilter": {
          "properties": {
            "column_id": {
              "type": "string",
              "title": "Column Id",
              "description": "ID of the column to filter."
            },
            "value": {
              "type": "boolean",
              "title": "Value"
            },
            "type": {
              "type": "string",
              "const": "boolean",
              "title": "Type",
              "default": "boolean"
            }
          },
          "type": "object",
          "required": [
            "column_id",
            "value"
          ],
          "title": "LogRecordsBooleanFilter"
        },
        "LogRecordsDateFilter": {
          "properties": {
            "column_id": {
              "type": "string",
              "title": "Column Id",
              "description": "ID of the column to filter."
            },
            "value": {
              "type": "string",
              "format": "date-time",
              "title": "Value"
            },
            "operator": {
              "type": "string",
              "enum": [
                "eq",
                "ne",
                "gt",
                "gte",
                "lt",
                "lte"
              ],
              "title": "Operator"
            },
            "type": {
              "type": "string",
              "const": "date",
              "title": "Type",
              "default": "date"
            }
          },
          "type": "object",
          "required": [
            "column_id",
            "value",
            "operator"
          ],
          "title": "LogRecordsDateFilter"
        },
        "LogRecordsIDFilter": {
          "properties": {
            "column_id": {
              "type": "string",
              "title": "Column Id",
              "description": "ID of the column to filter."
            },
            "value": {
              "type": "string",
              "format": "uuid4",
              "title": "Value"
            },
            "type": {
              "type": "string",
              "const": "id",
              "title": "Type",
              "default": "id"
            }
          },
          "type": "object",
          "required": [
            "column_id",
            "value"
          ],
          "title": "LogRecordsIDFilter"
        },
        "LogRecordsIngestRequest": {
          "properties": {
            "log_stream_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Log Stream Id",
              "description": "Log stream id associated with the traces."
            },
            "experiment_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Experiment Id",
              "description": "Experiment id associated with the traces."
            },
            "traces": {
              "items": {
                "$ref": "#/components/schemas/Trace"
              },
              "type": "array",
              "minItems": 1,
              "title": "Traces",
              "description": "List of traces to log."
            },
            "logging_method": {
              "$ref": "#/components/schemas/LoggingMethod",
              "default": "api_direct"
            },
            "client_version": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Client Version"
            }
          },
          "type": "object",
          "required": [
            "traces"
          ],
          "title": "LogRecordsIngestRequest",
          "examples": [
            {
              "log_stream_id": "00000000-0000-0000-0000-000000000000",
              "traces": [
                {
                  "created_at": "2025-03-10T16:10:09.148198Z",
                  "input": "who is a smart LLM?",
                  "metrics": {
  
                  },
                  "name": "",
                  "output": "I am!",
                  "spans": [
                    {
                      "created_at": "2025-03-10T16:10:09.148155Z",
                      "input": [
                        {
                          "content": "Question: who is a smart LLM?",
                          "role": "user"
                        }
                      ],
                      "metrics": {
  
                      },
                      "name": "",
                      "output": {
                        "content": "I am!",
                        "role": "user"
                      },
                      "tags": [],
                      "type": "llm",
                      "user_metadata": {
  
                      }
                    }
                  ],
                  "tags": [],
                  "type": "trace",
                  "user_metadata": {
  
                  }
                }
              ]
            },
            {
              "experiment_id": "00000000-0000-0000-0000-000000000000",
              "traces": [
                {
                  "created_at": "2025-03-10T16:10:09.149024Z",
                  "input": "who is a smart LLM?",
                  "metrics": {
  
                  },
                  "name": "",
                  "output": "I am!",
                  "spans": [
                    {
                      "created_at": "2025-03-10T16:10:09.148999Z",
                      "input": [
                        {
                          "content": "Question: who is a smart LLM?",
                          "role": "user"
                        }
                      ],
                      "metrics": {
  
                      },
                      "name": "",
                      "output": {
                        "content": "I am!",
                        "role": "user"
                      },
                      "tags": [],
                      "type": "llm",
                      "user_metadata": {
  
                      }
                    }
                  ],
                  "tags": [],
                  "type": "trace",
                  "user_metadata": {
  
                  }
                }
              ]
            }
          ]
        },
        "LogRecordsIngestResponse": {
          "properties": {
            "log_stream_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Log Stream Id",
              "description": "Log stream id associated with the traces."
            },
            "experiment_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Experiment Id",
              "description": "Experiment id associated with the traces."
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id",
              "description": "Project id associated with the traces."
            },
            "project_name": {
              "type": "string",
              "title": "Project Name",
              "description": "Project name associated with the traces."
            },
            "traces_count": {
              "type": "integer",
              "title": "Traces Count",
              "description": "total number of traces ingested"
            },
            "records_count": {
              "type": "integer",
              "title": "Records Count",
              "description": "total number of records (traces & spans) ingested"
            }
          },
          "type": "object",
          "required": [
            "project_id",
            "project_name",
            "traces_count",
            "records_count"
          ],
          "title": "LogRecordsIngestResponse"
        },
        "LogRecordsNumberFilter": {
          "properties": {
            "column_id": {
              "type": "string",
              "title": "Column Id",
              "description": "ID of the column to filter."
            },
            "value": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                }
              ],
              "title": "Value"
            },
            "operator": {
              "type": "string",
              "enum": [
                "eq",
                "ne",
                "gt",
                "gte",
                "lt",
                "lte",
                "between"
              ],
              "title": "Operator"
            },
            "type": {
              "type": "string",
              "const": "number",
              "title": "Type",
              "default": "number"
            }
          },
          "type": "object",
          "required": [
            "column_id",
            "value",
            "operator"
          ],
          "title": "LogRecordsNumberFilter"
        },
        "LogRecordsQueryRequest": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "log_stream_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Log Stream Id",
              "description": "Log stream id associated with the traces."
            },
            "experiment_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Experiment Id",
              "description": "Experiment id associated with the traces."
            },
            "filters": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/LogRecordsIDFilter"
                  },
                  {
                    "$ref": "#/components/schemas/LogRecordsDateFilter"
                  },
                  {
                    "$ref": "#/components/schemas/LogRecordsNumberFilter"
                  },
                  {
                    "$ref": "#/components/schemas/LogRecordsBooleanFilter"
                  },
                  {
                    "$ref": "#/components/schemas/LogRecordsTextFilter"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "boolean": "#/components/schemas/LogRecordsBooleanFilter",
                    "date": "#/components/schemas/LogRecordsDateFilter",
                    "id": "#/components/schemas/LogRecordsIDFilter",
                    "number": "#/components/schemas/LogRecordsNumberFilter",
                    "text": "#/components/schemas/LogRecordsTextFilter"
                  }
                }
              },
              "type": "array",
              "title": "Filters"
            },
            "sort": {
              "$ref": "#/components/schemas/LogRecordsSortClause",
              "default": {
                "column_id": "created_at",
                "ascending": false,
                "sort_type": "column"
              }
            }
          },
          "type": "object",
          "title": "LogRecordsQueryRequest",
          "examples": [
            {
              "filters": [
                {
                  "case_sensitive": true,
                  "name": "input",
                  "operator": "eq",
                  "type": "text",
                  "value": "example input"
                }
              ],
              "log_stream_id": "00000000-0000-0000-0000-000000000000",
              "pagination": {
                "limit": 5,
                "starting_token": 0
              },
              "sort": {
                "ascending": false,
                "name": "updated_at",
                "sort_type": "column"
              }
            }
          ]
        },
        "LogRecordsQueryResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "records": {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TraceRecord"
                  },
                  {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/WorkflowSpanRecord"
                      },
                      {
                        "$ref": "#/components/schemas/LlmSpanRecord"
                      },
                      {
                        "$ref": "#/components/schemas/ToolSpanRecord"
                      },
                      {
                        "$ref": "#/components/schemas/RetrieverSpanRecord"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type",
                      "mapping": {
                        "llm": "#/components/schemas/LlmSpanRecord",
                        "retriever": "#/components/schemas/RetrieverSpanRecord",
                        "tool": "#/components/schemas/ToolSpanRecord",
                        "workflow": "#/components/schemas/WorkflowSpanRecord"
                      }
                    }
                  }
                ]
              },
              "type": "array",
              "title": "Records",
              "description": "records matching the query"
            },
            "num_records": {
              "type": "integer",
              "title": "Num Records",
              "description": "number of records",
              "readOnly": true
            }
          },
          "type": "object",
          "required": [
            "num_records"
          ],
          "title": "LogRecordsQueryResponse",
          "examples": [
            {
              "next_starting_token": 2,
              "num_rows": 2,
              "paginated": true,
              "records": [
                {
                  "created_at": "2025-03-10T16:10:09.185509Z",
                  "id": "1a0939d1-8b43-4fe3-a91c-196e2d9847e3",
                  "input": "Who is a smart LLM?",
                  "metrics": {
                    "duration_ns": 4
                  },
                  "name": "",
                  "output": "I am",
                  "project_id": "0d4e3799-3861-4759-875f-9ae14c167b0a",
                  "run_id": "74aec44e-ec21-4c9f-a3e2-b2ab2b81b4db",
                  "tags": [],
                  "trace_id": "1a0939d1-8b43-4fe3-a91c-196e2d9847e3",
                  "type": "trace",
                  "user_metadata": {
  
                  }
                },
                {
                  "created_at": "2025-03-10T16:10:09.185799Z",
                  "id": "1edc2401-24b4-448c-a392-b36932293061",
                  "input": [
                    {
                      "content": "Who is a smart LLM?",
                      "role": "user"
                    }
                  ],
                  "metrics": {
                    "duration_ns": 4,
                    "num_input_tokens": 4,
                    "num_output_tokens": 2,
                    "num_total_tokens": 6
                  },
                  "name": "",
                  "output": {
                    "content": "I am",
                    "role": "user"
                  },
                  "parent_id": "1a0939d1-8b43-4fe3-a91c-196e2d9847e3",
                  "project_id": "0d4e3799-3861-4759-875f-9ae14c167b0a",
                  "run_id": "74aec44e-ec21-4c9f-a3e2-b2ab2b81b4db",
                  "tags": [],
                  "trace_id": "1a0939d1-8b43-4fe3-a91c-196e2d9847e3",
                  "type": "llm",
                  "user_metadata": {
  
                  }
                }
              ]
            }
          ]
        },
        "LogRecordsSortClause": {
          "properties": {
            "column_id": {
              "type": "string",
              "title": "Column Id",
              "description": "ID of the column to sort."
            },
            "ascending": {
              "type": "boolean",
              "title": "Ascending",
              "default": true
            },
            "sort_type": {
              "type": "string",
              "const": "column",
              "title": "Sort Type",
              "default": "column"
            }
          },
          "type": "object",
          "required": [
            "column_id"
          ],
          "title": "LogRecordsSortClause"
        },
        "LogRecordsTextFilter": {
          "properties": {
            "column_id": {
              "type": "string",
              "title": "Column Id",
              "description": "ID of the column to filter."
            },
            "operator": {
              "type": "string",
              "enum": [
                "eq",
                "ne",
                "contains",
                "one_of",
                "not_in"
              ],
              "title": "Operator"
            },
            "value": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ],
              "title": "Value"
            },
            "case_sensitive": {
              "type": "boolean",
              "title": "Case Sensitive",
              "default": true
            },
            "type": {
              "type": "string",
              "const": "text",
              "title": "Type",
              "default": "text"
            }
          },
          "type": "object",
          "required": [
            "column_id",
            "operator",
            "value"
          ],
          "title": "LogRecordsTextFilter"
        },
        "LogStreamCreateRequest": {
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "title": "Name"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "title": "LogStreamCreateRequest"
        },
        "LogStreamResponse": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "name": {
              "type": "string",
              "title": "Name"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            }
          },
          "type": "object",
          "required": [
            "id",
            "created_at",
            "updated_at",
            "name",
            "project_id"
          ],
          "title": "LogStreamResponse"
        },
        "LogStreamUpdateRequest": {
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "title": "Name"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "title": "LogStreamUpdateRequest"
        },
        "LoggingMethod": {
          "type": "string",
          "enum": [
            "playground",
            "python_client",
            "typescript_client",
            "api_direct"
          ],
          "title": "LoggingMethod"
        },
        "MAPResponse": {
          "properties": {
            "map": {
              "type": "number",
              "title": "Map"
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold"
            },
            "ap_per_class": {
              "$ref": "#/components/schemas/BarChart"
            },
            "error_scores": {
              "$ref": "#/components/schemas/BarChart"
            }
          },
          "type": "object",
          "required": [
            "map",
            "map_threshold",
            "ap_per_class",
            "error_scores"
          ],
          "title": "MAPResponse",
          "description": "The main metric for Object Detection.\n\nmAP, or mean Average Precision, is an Object Detection metric that provides you with a general sense of the\nperformance of your model.\n\nmAP is not simply the average precision for each class, it is much more technical\nhttps://towardsdatascience.com/breaking-down-mean-average-precision-map-ae462f623a52\n\nWe also provide each error and its \"score\", which represents how much the model\nwould have improved by fixing each value"
        },
        "Messages-Input": {
          "items": {
            "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
          },
          "type": "array",
          "title": "Messages"
        },
        "Messages-Output": {
          "items": {
            "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
          },
          "type": "array",
          "title": "Messages"
        },
        "MetaFilter": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            },
            "greater_than": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Greater Than"
            },
            "less_than": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Less Than"
            },
            "isin": {
              "anyOf": [
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Isin"
            },
            "is_equal": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Equal"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "title": "MetaFilter",
          "description": "A class for filtering arbitrary metadata columns."
        },
        "MetaInfo": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            },
            "is_categorical": {
              "type": "boolean",
              "title": "Is Categorical"
            },
            "is_continuous": {
              "type": "boolean",
              "title": "Is Continuous"
            },
            "unique_values": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Unique Values"
            },
            "unique_values_full": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Unique Values Full"
            },
            "unique_count": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Unique Count"
            },
            "unique_count_full": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Unique Count Full"
            },
            "max": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max"
            },
            "min": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Min"
            },
            "mean": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Mean"
            },
            "zeros": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Zeros"
            },
            "zeros_pct": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Zeros Pct"
            },
            "negative": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Negative"
            },
            "negative_pct": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Negative Pct"
            },
            "missing": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Missing"
            },
            "missing_pct": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Missing Pct"
            },
            "high_cardinality": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "High Cardinality"
            }
          },
          "type": "object",
          "required": [
            "name",
            "is_categorical",
            "is_continuous"
          ],
          "title": "MetaInfo",
          "description": "Class for describing a metadata column.\n\nMetadata columns and tabular data columns are similar, but metadata columns\n\na meta column is categorical if it is of string/object type with \u003C= 50 unique values a meta column is continuous if\nit is of float/int type\n\nThus, a column of string type with \u003E 50 unique values is neither continuous nor categorical in our case."
        },
        "MetadataFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "metadata",
              "title": "Name",
              "default": "metadata"
            },
            "filter_type": {
              "type": "string",
              "const": "map",
              "title": "Filter Type",
              "default": "map"
            },
            "operator": {
              "type": "string",
              "enum": [
                "one_of",
                "not_in",
                "eq",
                "ne"
              ],
              "title": "Operator"
            },
            "key": {
              "type": "string",
              "title": "Key"
            },
            "value": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ],
              "title": "Value"
            }
          },
          "type": "object",
          "required": [
            "operator",
            "key",
            "value"
          ],
          "title": "MetadataFilter",
          "description": "Filters on metadata key-value pairs in scorer jobs."
        },
        "Method": {
          "type": "string",
          "enum": [
            "GET",
            "PUT"
          ],
          "title": "Method"
        },
        "MetricComputation": {
          "properties": {
            "value": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "type": "array"
                },
                {
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Value"
            },
            "execution_time": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Execution Time"
            },
            "status": {
              "type": "string"
            },
            "error_message": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Error Message"
            }
          },
          "type": "object",
          "title": "MetricComputation"
        },
        "MetricComputing": {
          "properties": {
            "scorer_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorerType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status_type": {
              "type": "string",
              "const": "computing",
              "title": "Status Type",
              "default": "computing"
            },
            "message": {
              "type": "string",
              "title": "Message",
              "default": "Metric is computing."
            }
          },
          "type": "object",
          "title": "MetricComputing"
        },
        "MetricCritique": {
          "properties": {
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Run Id"
            },
            "metric": {
              "type": "string",
              "title": "Metric"
            },
            "scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scorer Id"
            },
            "row_id": {
              "type": "string",
              "title": "Row Id"
            },
            "critique_info": {
              "$ref": "#/components/schemas/MetricCritiqueContent"
            },
            "metric_inputs": {
              "$ref": "#/components/schemas/MetricInputs"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "is_computed": {
              "type": "boolean",
              "title": "Is Computed"
            },
            "revised_explanation": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Revised Explanation"
            }
          },
          "type": "object",
          "required": [
            "project_id",
            "run_id",
            "metric",
            "row_id",
            "critique_info",
            "metric_inputs",
            "id",
            "is_computed",
            "revised_explanation"
          ],
          "title": "MetricCritique"
        },
        "MetricCritiqueColumn": {
          "properties": {
            "col_name": {
              "type": "string",
              "title": "Col Name"
            },
            "metric_critique_computing": {
              "type": "boolean",
              "title": "Metric Critique Computing"
            }
          },
          "type": "object",
          "required": [
            "col_name",
            "metric_critique_computing"
          ],
          "title": "MetricCritiqueColumn"
        },
        "MetricCritiqueColumnar": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "is_computed": {
              "type": "boolean",
              "title": "Is Computed"
            },
            "revised_explanation": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Revised Explanation"
            },
            "critique_info": {
              "$ref": "#/components/schemas/MetricCritiqueContent"
            }
          },
          "type": "object",
          "required": [
            "id",
            "is_computed",
            "revised_explanation",
            "critique_info"
          ],
          "title": "MetricCritiqueColumnar"
        },
        "MetricCritiqueColumns": {
          "properties": {
            "metric_critique_columns": {
              "items": {
                "$ref": "#/components/schemas/MetricCritiqueColumn"
              },
              "type": "array",
              "title": "Metric Critique Columns"
            }
          },
          "type": "object",
          "required": [
            "metric_critique_columns"
          ],
          "title": "MetricCritiqueColumns"
        },
        "MetricCritiqueContent": {
          "properties": {
            "critique": {
              "type": "string",
              "title": "Critique"
            },
            "intended_value": {
              "type": "boolean",
              "title": "Intended Value"
            },
            "original_explanation": {
              "type": "string",
              "title": "Original Explanation"
            }
          },
          "type": "object",
          "required": [
            "critique",
            "intended_value",
            "original_explanation"
          ],
          "title": "MetricCritiqueContent"
        },
        "MetricCritiqueJobConfiguration-Input": {
          "properties": {
            "project_type": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "prompt_evaluation"
                },
                {
                  "type": "string",
                  "const": "llm_monitor"
                },
                {
                  "type": "string",
                  "const": "gen_ai"
                }
              ],
              "title": "Project Type"
            },
            "metric_name": {
              "type": "string",
              "title": "Metric Name"
            },
            "scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scorer Id"
            },
            "critique_ids": {
              "items": {
                "type": "string",
                "format": "uuid4"
              },
              "type": "array",
              "title": "Critique Ids"
            },
            "recompute_settings": {
              "anyOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/RecomputeSettingsRuns"
                    },
                    {
                      "$ref": "#/components/schemas/RecomputeSettingsProject"
                    },
                    {
                      "$ref": "#/components/schemas/promptgalileo__schemas__metric_critique__RecomputeSettingsObserve"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "mode",
                    "mapping": {
                      "observe_filters": "#/components/schemas/promptgalileo__schemas__metric_critique__RecomputeSettingsObserve",
                      "project": "#/components/schemas/RecomputeSettingsProject",
                      "runs": "#/components/schemas/RecomputeSettingsRuns"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Recompute Settings"
            }
          },
          "type": "object",
          "required": [
            "project_type",
            "metric_name",
            "critique_ids"
          ],
          "title": "MetricCritiqueJobConfiguration",
          "description": "Info necessary to execute a metric critique job."
        },
        "MetricCritiqueJobConfiguration-Output": {
          "properties": {
            "project_type": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "prompt_evaluation"
                },
                {
                  "type": "string",
                  "const": "llm_monitor"
                },
                {
                  "type": "string",
                  "const": "gen_ai"
                }
              ],
              "title": "Project Type"
            },
            "metric_name": {
              "type": "string",
              "title": "Metric Name"
            },
            "scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scorer Id"
            },
            "critique_ids": {
              "items": {
                "type": "string",
                "format": "uuid4"
              },
              "type": "array",
              "title": "Critique Ids"
            },
            "recompute_settings": {
              "anyOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/RecomputeSettingsRuns"
                    },
                    {
                      "$ref": "#/components/schemas/RecomputeSettingsProject"
                    },
                    {
                      "$ref": "#/components/schemas/RecomputeSettingsObserve-Output"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "mode",
                    "mapping": {
                      "observe_filters": "#/components/schemas/RecomputeSettingsObserve-Output",
                      "project": "#/components/schemas/RecomputeSettingsProject",
                      "runs": "#/components/schemas/RecomputeSettingsRuns"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Recompute Settings"
            }
          },
          "type": "object",
          "required": [
            "project_type",
            "metric_name",
            "critique_ids"
          ],
          "title": "MetricCritiqueJobConfiguration",
          "description": "Info necessary to execute a metric critique job."
        },
        "MetricCritiqueScorer": {
          "properties": {
            "scorer_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Scorer Id"
            },
            "metric_critique_computing": {
              "type": "boolean",
              "title": "Metric Critique Computing"
            }
          },
          "type": "object",
          "required": [
            "scorer_id",
            "metric_critique_computing"
          ],
          "title": "MetricCritiqueScorer"
        },
        "MetricCritiqueScorers": {
          "properties": {
            "scorers": {
              "items": {
                "$ref": "#/components/schemas/MetricCritiqueScorer"
              },
              "type": "array",
              "title": "Scorers"
            }
          },
          "type": "object",
          "required": [
            "scorers"
          ],
          "title": "MetricCritiqueScorers"
        },
        "MetricDescriptions": {
          "type": "string",
          "enum": [
            "A measure of the model's own confusion in its output. Higher scores indicate higher uncertainty.",
            "Measures whether the LLM's response is supported by (or baked in) the context provided. ",
            "Measures how well the LLM follows the system instructions provided in the prompt.",
            "Measures how well the workflow's response aligns with the ground truth provided.",
            "Detects whether the model selected the right Tool with the right arguments.",
            "Detects whether the Tool executed successfully (i.e. without errors).",
            "Measures the relevance of the retrieved context to the user's query as the semantic distance between the two.",
            "Measures the potential presence of factual errors or inconsistencies in the model's response.",
            "Classifies the sentiment of the user's input into one of joy, love, fear, surprise, sadness, anger, annoyance, confusion or neutral.",
            "Measures how 'sexist' a user's input might be perceived ranging in the values of 0-1 (1 being more sexist).",
            "Measures the presence and severity of harmful, offensive, or abusive language",
            "Tracks the presence of personal identifiable information in the user's input",
            "Classifies the sentiment in the model's response into one of joy, love, fear, surprise, sadness, anger, annoyance, confusion or neutral.",
            "Measures how 'sexist' a response might be perceived ranging in the values of 0-1 (1 being more sexist).",
            "Measures the presence and severity of harmful, offensive, or abusive language in the model's response",
            "Tracks the presence of personal identifiable information in the LLM's responses",
            "Measures the presence of prompt injection attacks in inputs to the LLM.",
            "Measures the perplexity of the prompt. Lower perplexity score is generally considered to be better because it means the model is less surprised by the text and can predict the next word in a sentence with higher accuracy.",
            "Measures which documents or chunks retrieved were used by the model to generate a response.",
            "Measures how much of the text in the retrieved chunks was used by the model to compose its response.",
            "Measures how much of the text in the retrieved chunks was relevant to the response composed by the model.",
            "A response-level metric measuring 'out of all the information in the context pertinent to the question, how much was covered in the answer?'",
            "BLEU is a case-sensitive measurement of the difference between an model generation and target generation at the sentence-level.",
            "ROUGE measures the unigram overlap between model generation and target generation as a single F-1 score.",
            "Cost of executing the run and does not include any costs incurred for metric calculation.",
            "Cost of all the metrics that call the OpenAI API.",
            "Detects whether the user successfully accomplished or advanced towards their goal.",
            "Detects whether the user successfully accomplished all of their goals.",
            "Measures which documents or chunks retrieved were used by the model to generate a response, and how much of the text in the retrieved chunks was used by the model to compose its response."
          ],
          "title": "MetricDescriptions"
        },
        "MetricError": {
          "properties": {
            "scorer_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorerType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status_type": {
              "type": "string",
              "const": "error",
              "title": "Status Type",
              "default": "error"
            },
            "message": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Message",
              "default": "An error occured."
            }
          },
          "type": "object",
          "title": "MetricError"
        },
        "MetricFailed": {
          "properties": {
            "scorer_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorerType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status_type": {
              "type": "string",
              "const": "failed",
              "title": "Status Type",
              "default": "failed"
            },
            "message": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Message",
              "default": "Metric failed to compute."
            }
          },
          "type": "object",
          "title": "MetricFailed"
        },
        "MetricInputs": {
          "properties": {
            "query": {
              "type": "string",
              "title": "Query"
            },
            "response": {
              "type": "string",
              "title": "Response"
            },
            "ground_truth": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ground Truth"
            },
            "tools": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tools"
            },
            "query_json": {
              "type": "string",
              "title": "Query Json",
              "readOnly": true
            },
            "response_json": {
              "type": "string",
              "title": "Response Json",
              "readOnly": true
            }
          },
          "type": "object",
          "required": [
            "query",
            "response",
            "query_json",
            "response_json"
          ],
          "title": "MetricInputs",
          "description": "Metric inputs for a prompt template.\nInclude an optional inputs_config to help formatting with a prompt template."
        },
        "MetricInsight": {
          "properties": {
            "title": {
              "type": "string",
              "title": "Title"
            },
            "column_name": {
              "type": "string",
              "title": "Column Name"
            },
            "insight_type": {
              "$ref": "#/components/schemas/InsightType"
            },
            "categories": {
              "additionalProperties": {
                "type": "integer"
              },
              "type": "object",
              "title": "Categories"
            },
            "aggregate": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregate"
            },
            "metric_threshold": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricThreshold"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "required": [
            "title",
            "column_name",
            "insight_type",
            "categories"
          ],
          "title": "MetricInsight"
        },
        "MetricNotApplicable": {
          "properties": {
            "scorer_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorerType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status_type": {
              "type": "string",
              "const": "not_applicable",
              "title": "Status Type",
              "default": "not_applicable"
            },
            "message": {
              "type": "string",
              "title": "Message",
              "default": "Metric not applicable."
            }
          },
          "type": "object",
          "title": "MetricNotApplicable"
        },
        "MetricNotComputed": {
          "properties": {
            "scorer_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorerType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status_type": {
              "type": "string",
              "const": "not_computed",
              "title": "Status Type",
              "default": "not_computed"
            },
            "message": {
              "type": "string",
              "title": "Message",
              "default": "Metric not computed."
            }
          },
          "type": "object",
          "title": "MetricNotComputed"
        },
        "MetricPending": {
          "properties": {
            "scorer_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorerType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status_type": {
              "type": "string",
              "const": "pending",
              "title": "Status Type",
              "default": "pending"
            }
          },
          "type": "object",
          "title": "MetricPending"
        },
        "MetricSuccess": {
          "properties": {
            "scorer_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorerType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status_type": {
              "type": "string",
              "const": "success",
              "title": "Status Type",
              "default": "success"
            },
            "value": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "$ref": "#/components/schemas/Segment"
                },
                {
                  "$ref": "#/components/schemas/HallucinationSegment"
                },
                {
                  "$ref": "#/components/schemas/Document-Output"
                },
                {
                  "$ref": "#/components/schemas/FeedbackRatingDB"
                },
                {
                  "$ref": "#/components/schemas/FeedbackAggregate"
                },
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "format": "uuid"
                      },
                      {
                        "type": "string",
                        "format": "date-time"
                      },
                      {
                        "$ref": "#/components/schemas/Segment"
                      },
                      {
                        "$ref": "#/components/schemas/HallucinationSegment"
                      },
                      {
                        "$ref": "#/components/schemas/Document-Output"
                      },
                      {
                        "$ref": "#/components/schemas/FeedbackRatingDB"
                      },
                      {
                        "$ref": "#/components/schemas/FeedbackAggregate"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "items": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "integer"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "string",
                          "format": "uuid"
                        },
                        {
                          "type": "string",
                          "format": "date-time"
                        },
                        {
                          "$ref": "#/components/schemas/Segment"
                        },
                        {
                          "$ref": "#/components/schemas/HallucinationSegment"
                        },
                        {
                          "$ref": "#/components/schemas/Document-Output"
                        },
                        {
                          "$ref": "#/components/schemas/FeedbackRatingDB"
                        },
                        {
                          "$ref": "#/components/schemas/FeedbackAggregate"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "type": "array"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "items": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "integer"
                          },
                          {
                            "type": "number"
                          },
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "string",
                            "format": "uuid"
                          },
                          {
                            "type": "string",
                            "format": "date-time"
                          },
                          {
                            "$ref": "#/components/schemas/Segment"
                          },
                          {
                            "$ref": "#/components/schemas/HallucinationSegment"
                          },
                          {
                            "$ref": "#/components/schemas/Document-Output"
                          },
                          {
                            "$ref": "#/components/schemas/FeedbackRatingDB"
                          },
                          {
                            "$ref": "#/components/schemas/FeedbackAggregate"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Value"
            },
            "display_value": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Display Value"
            },
            "explanation": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Explanation"
            },
            "rationale": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Rationale"
            },
            "cost": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Cost"
            },
            "model_alias": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Alias"
            },
            "num_judges": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Judges"
            },
            "critique": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricCritiqueColumnar"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "required": [
            "value"
          ],
          "title": "MetricSuccess"
        },
        "MetricThreshold": {
          "properties": {
            "inverted": {
              "type": "boolean",
              "title": "Inverted",
              "description": "Whether the column should be inverted for thresholds, i.e. if True, lower is better.",
              "default": false
            },
            "buckets": {
              "items": {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "type": "array",
              "title": "Buckets",
              "description": "Threshold buckets for the column. If the column is a metric, these are the thresholds for the column."
            },
            "display_value_levels": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Display Value Levels",
              "description": "Ordered list of strings that raw values get transformed to for displaying."
            }
          },
          "type": "object",
          "title": "MetricThreshold"
        },
        "MetricWeight": {
          "properties": {
            "label": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Label"
            },
            "group_label": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/GroupLabel"
                },
                {
                  "type": "null"
                }
              ]
            },
            "description": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricDescriptions"
                },
                {
                  "type": "null"
                }
              ]
            },
            "weight": {
              "type": "number",
              "title": "Weight",
              "default": 0.5
            }
          },
          "type": "object",
          "title": "MetricWeight"
        },
        "Metrics-Input": {
          "properties": {
            "duration_ns": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Duration Ns",
              "description": "Duration of the step in milliseconds."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Metrics"
        },
        "MetricsRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "meta_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Cols"
            }
          },
          "type": "object",
          "title": "MetricsRequest"
        },
        "MetricsResponse": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "meta_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Cols"
            },
            "f1": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "F1"
            },
            "recall": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Recall"
            },
            "precision": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Precision"
            },
            "accuracy": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Accuracy"
            },
            "data_error_potential": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Data Error Potential"
            },
            "confidence": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Confidence"
            },
            "multi_label_task_metrics": {
              "$ref": "#/components/schemas/MultiLabelTaskMetrics",
              "default": {
                "labels": [],
                "recall": [],
                "f1": [],
                "precision": []
              }
            }
          },
          "type": "object",
          "title": "MetricsResponse"
        },
        "MistralIntegration": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "name": {
              "type": "string",
              "const": "mistral",
              "title": "Name",
              "default": "mistral"
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            }
          },
          "type": "object",
          "title": "MistralIntegration"
        },
        "MistralIntegrationCreate": {
          "properties": {
            "token": {
              "type": "string",
              "title": "Token"
            }
          },
          "type": "object",
          "required": [
            "token"
          ],
          "title": "MistralIntegrationCreate"
        },
        "Model-Input": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            },
            "alias": {
              "type": "string",
              "title": "Alias"
            },
            "integration": {
              "$ref": "#/components/schemas/LLMIntegration",
              "default": "openai"
            },
            "user_role": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Role"
            },
            "assistant_role": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Assistant Role"
            },
            "system_supported": {
              "type": "boolean",
              "title": "System Supported",
              "default": false
            },
            "input_token_limit": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Input Token Limit"
            },
            "output_token_limit": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output Token Limit"
            },
            "token_limit": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token Limit"
            },
            "output_price": {
              "type": "number",
              "title": "Output Price",
              "default": 0
            },
            "input_price": {
              "type": "number",
              "title": "Input Price",
              "default": 0
            },
            "cost_by": {
              "$ref": "#/components/schemas/ModelCostBy",
              "default": "tokens"
            },
            "is_chat": {
              "type": "boolean",
              "title": "Is Chat",
              "default": false
            },
            "provides_log_probs": {
              "type": "boolean",
              "title": "Provides Log Probs",
              "default": false
            },
            "formatting_tokens": {
              "type": "integer",
              "title": "Formatting Tokens",
              "default": 0
            },
            "response_prefix_tokens": {
              "type": "integer",
              "title": "Response Prefix Tokens",
              "default": 0
            },
            "api_version": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Api Version"
            },
            "params_map": {
              "$ref": "#/components/schemas/RunParamsMap"
            },
            "output_map": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OutputMap"
                },
                {
                  "type": "null"
                }
              ]
            },
            "input_map": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/InputMap"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "required": [
            "name",
            "alias"
          ],
          "title": "Model"
        },
        "Model-Output": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            },
            "alias": {
              "type": "string",
              "title": "Alias"
            },
            "integration": {
              "$ref": "#/components/schemas/LLMIntegration",
              "default": "openai"
            },
            "user_role": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Role"
            },
            "assistant_role": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Assistant Role"
            },
            "system_supported": {
              "type": "boolean",
              "title": "System Supported",
              "default": false
            },
            "input_token_limit": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Input Token Limit"
            },
            "output_token_limit": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output Token Limit"
            },
            "token_limit": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token Limit"
            },
            "output_price": {
              "type": "number",
              "title": "Output Price",
              "default": 0
            },
            "input_price": {
              "type": "number",
              "title": "Input Price",
              "default": 0
            },
            "cost_by": {
              "$ref": "#/components/schemas/ModelCostBy",
              "default": "tokens"
            },
            "is_chat": {
              "type": "boolean",
              "title": "Is Chat",
              "default": false
            },
            "provides_log_probs": {
              "type": "boolean",
              "title": "Provides Log Probs",
              "default": false
            },
            "formatting_tokens": {
              "type": "integer",
              "title": "Formatting Tokens",
              "default": 0
            },
            "response_prefix_tokens": {
              "type": "integer",
              "title": "Response Prefix Tokens",
              "default": 0
            },
            "api_version": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Api Version"
            },
            "params_map": {
              "$ref": "#/components/schemas/RunParamsMap"
            },
            "output_map": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OutputMap"
                },
                {
                  "type": "null"
                }
              ]
            },
            "input_map": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/InputMap"
                },
                {
                  "type": "null"
                }
              ]
            },
            "completion_only": {
              "type": "boolean",
              "title": "Completion Only",
              "description": "Check if the model is completion only.\n\nCompletion only models are not designed to handle message formats, and only work\nwith completion requests.",
              "readOnly": true
            }
          },
          "type": "object",
          "required": [
            "name",
            "alias",
            "completion_only"
          ],
          "title": "Model"
        },
        "ModelCostBy": {
          "type": "string",
          "enum": [
            "tokens",
            "characters"
          ],
          "title": "ModelCostBy"
        },
        "ModelInfo": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            },
            "alias": {
              "type": "string",
              "title": "Alias"
            },
            "integration": {
              "$ref": "#/components/schemas/LLMIntegration",
              "default": "openai"
            },
            "user_role": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Role"
            },
            "assistant_role": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Assistant Role"
            },
            "system_supported": {
              "type": "boolean",
              "title": "System Supported",
              "default": false
            },
            "completion_only": {
              "type": "boolean",
              "title": "Completion Only",
              "description": "Check if the model is completion only.\n\nCompletion only models are not designed to handle message formats, and only work\nwith completion requests.",
              "readOnly": true
            }
          },
          "type": "object",
          "required": [
            "name",
            "alias",
            "completion_only"
          ],
          "title": "ModelInfo",
          "description": "Model information that is useful to surface to the UI and in other contexts.\n\nThis is a subset of all of the information we store about the model. We need a lot more\ninformation to actually execute requests against the model, but that is not necessary\nto surface to the user."
        },
        "ModelKind": {
          "type": "string",
          "enum": [
            "transformers",
            "setfit"
          ],
          "title": "ModelKind"
        },
        "ModelMetrics": {
          "properties": {
            "precision": {
              "type": "number",
              "title": "Precision"
            },
            "recall": {
              "type": "number",
              "title": "Recall"
            },
            "f1": {
              "type": "number",
              "title": "F1"
            },
            "confidence": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Confidence"
            },
            "accuracy": {
              "type": "number",
              "title": "Accuracy"
            },
            "multi_label_task_metrics": {
              "$ref": "#/components/schemas/MultiLabelTaskMetrics",
              "default": {
                "labels": [],
                "recall": [],
                "f1": [],
                "precision": []
              }
            },
            "dep_distribution": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Distribution"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "required": [
            "precision",
            "recall",
            "f1",
            "accuracy"
          ],
          "title": "ModelMetrics"
        },
        "ModelType": {
          "type": "string",
          "enum": [
            "slm",
            "llm"
          ],
          "title": "ModelType"
        },
        "ModelUploadStatus": {
          "type": "string",
          "enum": [
            "pending",
            "completed",
            "failed"
          ],
          "title": "ModelUploadStatus"
        },
        "MultiLabelCoOccurrence": {
          "properties": {
            "num_samples": {
              "type": "integer",
              "title": "Num Samples"
            },
            "percent_samples": {
              "type": "number",
              "title": "Percent Samples"
            },
            "co_occurrences": {
              "items": {
                "$ref": "#/components/schemas/LabelCoOccurences"
              },
              "type": "array",
              "title": "Co Occurrences"
            }
          },
          "type": "object",
          "required": [
            "num_samples",
            "percent_samples",
            "co_occurrences"
          ],
          "title": "MultiLabelCoOccurrence",
          "description": "Label co-occurrence across tasks."
        },
        "MultiLabelTaskMetrics": {
          "properties": {
            "labels": {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "type": "array",
              "title": "Labels"
            },
            "recall": {
              "items": {
                "type": "number"
              },
              "type": "array",
              "title": "Recall",
              "default": []
            },
            "f1": {
              "items": {
                "type": "number"
              },
              "type": "array",
              "title": "F1",
              "default": []
            },
            "precision": {
              "items": {
                "type": "number"
              },
              "type": "array",
              "title": "Precision",
              "default": []
            }
          },
          "type": "object",
          "title": "MultiLabelTaskMetrics",
          "description": "Metrics per task for multi-label models."
        },
        "NodeNameFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "node_name",
              "title": "Name",
              "default": "node_name"
            },
            "filter_type": {
              "type": "string",
              "const": "string",
              "title": "Filter Type",
              "default": "string"
            },
            "value": {
              "type": "string",
              "title": "Value"
            },
            "operator": {
              "type": "string",
              "enum": [
                "eq",
                "ne",
                "contains"
              ],
              "title": "Operator"
            },
            "case_sensitive": {
              "type": "boolean",
              "title": "Case Sensitive",
              "default": true
            }
          },
          "type": "object",
          "required": [
            "value",
            "operator"
          ],
          "title": "NodeNameFilter",
          "description": "Filters on node names in scorer jobs."
        },
        "NodeType": {
          "type": "string",
          "enum": [
            "chain",
            "chat",
            "llm",
            "retriever",
            "tool",
            "agent",
            "workflow",
            "trace"
          ],
          "title": "NodeType"
        },
        "NoiseType": {
          "type": "string",
          "enum": [
            "Label Noise",
            "Feature Noise",
            "None"
          ],
          "title": "NoiseType"
        },
        "ObserveProjectSettings": {
          "properties": {
            "scorers_config": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorersConfig-Output"
                },
                {
                  "type": "null"
                }
              ]
            },
            "alerts_configuration": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AlertsConfiguration-Output"
                },
                {
                  "type": "null"
                }
              ]
            },
            "scorers_configuration": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorersConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            },
            "registered_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/RegisteredScorer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorers Configuration"
            },
            "generated_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/GeneratedScorerConfig"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorers Configuration"
            },
            "customized_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/CustomizedScorer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Customized Scorers Configuration"
            }
          },
          "type": "object",
          "title": "ObserveProjectSettings"
        },
        "OpenAIFunction": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "title": "OpenAIFunction"
        },
        "OpenAIIntegration": {
          "properties": {
            "organization_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            },
            "id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "name": {
              "type": "string",
              "const": "openai",
              "title": "Name",
              "default": "openai"
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            }
          },
          "type": "object",
          "title": "OpenAIIntegration"
        },
        "OpenAIIntegrationCreate": {
          "properties": {
            "organization_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Id"
            },
            "token": {
              "type": "string",
              "title": "Token"
            }
          },
          "type": "object",
          "required": [
            "token"
          ],
          "title": "OpenAIIntegrationCreate"
        },
        "OpenAIToolChoice": {
          "properties": {
            "type": {
              "type": "string",
              "title": "Type",
              "default": "function"
            },
            "function": {
              "$ref": "#/components/schemas/OpenAIFunction"
            }
          },
          "type": "object",
          "required": [
            "function"
          ],
          "title": "OpenAIToolChoice"
        },
        "Operator": {
          "type": "string",
          "enum": [
            "eq",
            "ne",
            "gt",
            "gte",
            "lt",
            "lte",
            "in",
            "not_in",
            "contains",
            "has_all",
            "between",
            "like"
          ],
          "title": "Operator"
        },
        "OrganizationAction": {
          "type": "string",
          "enum": [
            "rename",
            "delete"
          ],
          "title": "OrganizationAction"
        },
        "OrganizationCreate": {
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "title": "Name"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "title": "OrganizationCreate"
        },
        "OrganizationCreatedAtSort": {
          "properties": {
            "name": {
              "type": "string",
              "const": "created_at",
              "title": "Name",
              "default": "created_at"
            },
            "ascending": {
              "type": "boolean",
              "title": "Ascending",
              "default": true
            },
            "sort_type": {
              "type": "string",
              "const": "column",
              "title": "Sort Type",
              "default": "column"
            }
          },
          "type": "object",
          "title": "OrganizationCreatedAtSort"
        },
        "OrganizationDB": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "permissions": {
              "items": {
                "$ref": "#/components/schemas/Permission"
              },
              "type": "array",
              "title": "Permissions",
              "default": []
            },
            "name": {
              "type": "string",
              "title": "Name"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            }
          },
          "type": "object",
          "required": [
            "id",
            "name",
            "created_at",
            "updated_at"
          ],
          "title": "OrganizationDB"
        },
        "OrganizationIsMemberFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "is_member",
              "title": "Name",
              "default": "is_member"
            },
            "value": {
              "type": "boolean",
              "title": "Value"
            }
          },
          "type": "object",
          "required": [
            "value"
          ],
          "title": "OrganizationIsMemberFilter"
        },
        "OrganizationNameFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "name",
              "title": "Name",
              "default": "name"
            },
            "operator": {
              "type": "string",
              "enum": [
                "eq",
                "ne",
                "contains",
                "one_of",
                "not_in"
              ],
              "title": "Operator"
            },
            "value": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ],
              "title": "Value"
            },
            "case_sensitive": {
              "type": "boolean",
              "title": "Case Sensitive",
              "default": true
            }
          },
          "type": "object",
          "required": [
            "operator",
            "value"
          ],
          "title": "OrganizationNameFilter"
        },
        "OrganizationNameSort": {
          "properties": {
            "name": {
              "type": "string",
              "const": "name",
              "title": "Name",
              "default": "name"
            },
            "ascending": {
              "type": "boolean",
              "title": "Ascending",
              "default": true
            },
            "sort_type": {
              "type": "string",
              "const": "column",
              "title": "Sort Type",
              "default": "column"
            }
          },
          "type": "object",
          "title": "OrganizationNameSort"
        },
        "OutputMap": {
          "properties": {
            "response": {
              "type": "string",
              "title": "Response"
            },
            "token_count": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token Count"
            },
            "input_token_count": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Input Token Count"
            },
            "output_token_count": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output Token Count"
            },
            "completion_reason": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Completion Reason"
            }
          },
          "type": "object",
          "required": [
            "response"
          ],
          "title": "OutputMap"
        },
        "OutputPIIScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "output_pii",
              "title": "Name",
              "default": "output_pii"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            }
          },
          "type": "object",
          "title": "OutputPIIScorer"
        },
        "OutputSexistScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "output_sexist",
              "title": "Name",
              "default": "output_sexist"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            }
          },
          "type": "object",
          "title": "OutputSexistScorer"
        },
        "OutputToneScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "output_tone",
              "title": "Name",
              "default": "output_tone"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            }
          },
          "type": "object",
          "title": "OutputToneScorer"
        },
        "OutputToxicityScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "output_toxicity",
              "title": "Name",
              "default": "output_toxicity"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            }
          },
          "type": "object",
          "title": "OutputToxicityScorer"
        },
        "OverrideAction-Input": {
          "properties": {
            "type": {
              "type": "string",
              "const": "OVERRIDE",
              "title": "Type",
              "default": "OVERRIDE"
            },
            "subscriptions": {
              "items": {
                "$ref": "#/components/schemas/SubscriptionConfig"
              },
              "type": "array",
              "title": "Subscriptions",
              "description": "List of subscriptions to send a notification to when this action is applied and the ruleset status matches any of the configured statuses."
            },
            "choices": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "minItems": 1,
              "title": "Choices",
              "description": "List of choices to override the response with. If there are multiple choices, one will be chosen at random when applying this action."
            }
          },
          "type": "object",
          "required": [
            "choices"
          ],
          "title": "OverrideAction"
        },
        "OverrideAction-Output": {
          "properties": {
            "type": {
              "type": "string",
              "const": "OVERRIDE",
              "title": "Type",
              "default": "OVERRIDE"
            },
            "subscriptions": {
              "items": {
                "$ref": "#/components/schemas/SubscriptionConfig"
              },
              "type": "array",
              "title": "Subscriptions",
              "description": "List of subscriptions to send a notification to when this action is applied and the ruleset status matches any of the configured statuses."
            },
            "choices": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "minItems": 1,
              "title": "Choices",
              "description": "List of choices to override the response with. If there are multiple choices, one will be chosen at random when applying this action."
            }
          },
          "type": "object",
          "required": [
            "choices"
          ],
          "title": "OverrideAction"
        },
        "PassthroughAction-Input": {
          "properties": {
            "type": {
              "type": "string",
              "const": "PASSTHROUGH",
              "title": "Type",
              "default": "PASSTHROUGH"
            },
            "subscriptions": {
              "items": {
                "$ref": "#/components/schemas/SubscriptionConfig"
              },
              "type": "array",
              "title": "Subscriptions",
              "description": "List of subscriptions to send a notification to when this action is applied and the ruleset status matches any of the configured statuses."
            }
          },
          "type": "object",
          "title": "PassthroughAction"
        },
        "PassthroughAction-Output": {
          "properties": {
            "type": {
              "type": "string",
              "const": "PASSTHROUGH",
              "title": "Type",
              "default": "PASSTHROUGH"
            },
            "subscriptions": {
              "items": {
                "$ref": "#/components/schemas/SubscriptionConfig"
              },
              "type": "array",
              "title": "Subscriptions",
              "description": "List of subscriptions to send a notification to when this action is applied and the ruleset status matches any of the configured statuses."
            }
          },
          "type": "object",
          "title": "PassthroughAction"
        },
        "PasswordResetEmailResponse": {
          "properties": {
  
          },
          "type": "object",
          "title": "PasswordResetEmailResponse"
        },
        "PasswordResetResponse": {
          "properties": {
            "pathname": {
              "type": "string",
              "title": "Pathname"
            }
          },
          "type": "object",
          "required": [
            "pathname"
          ],
          "title": "PasswordResetResponse"
        },
        "Payload": {
          "properties": {
            "input": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Input",
              "description": "Input text to be processed."
            },
            "output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output",
              "description": "Output text to be processed."
            }
          },
          "type": "object",
          "title": "Payload"
        },
        "Permission": {
          "properties": {
            "action": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/UserAction"
                },
                {
                  "$ref": "#/components/schemas/GroupAction"
                },
                {
                  "$ref": "#/components/schemas/GroupMemberAction"
                },
                {
                  "$ref": "#/components/schemas/ProjectAction"
                },
                {
                  "$ref": "#/components/schemas/RegisteredScorerAction"
                },
                {
                  "$ref": "#/components/schemas/ApiKeyAction"
                },
                {
                  "$ref": "#/components/schemas/GeneratedScorerAction"
                },
                {
                  "$ref": "#/components/schemas/DatasetAction"
                },
                {
                  "$ref": "#/components/schemas/IntegrationAction"
                },
                {
                  "$ref": "#/components/schemas/OrganizationAction"
                }
              ],
              "title": "Action"
            },
            "allowed": {
              "type": "boolean",
              "title": "Allowed"
            },
            "message": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Message"
            }
          },
          "type": "object",
          "required": [
            "action",
            "allowed"
          ],
          "title": "Permission"
        },
        "PolygonData": {
          "properties": {
            "id": {
              "type": "integer",
              "title": "Id"
            },
            "is_active": {
              "type": "boolean",
              "title": "Is Active"
            },
            "pred": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Pred"
            },
            "gold": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Gold"
            },
            "is_pred": {
              "type": "boolean",
              "title": "Is Pred"
            },
            "is_gold": {
              "type": "boolean",
              "title": "Is Gold"
            },
            "data_error_potential": {
              "type": "number",
              "title": "Data Error Potential"
            },
            "contours": {
              "items": {
  
              },
              "type": "array",
              "title": "Contours"
            },
            "error_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SemSegErrorType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "background_error_pct": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Background Error Pct"
            },
            "area": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Area"
            },
            "accuracy": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Accuracy"
            },
            "size": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PolygonSize"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "required": [
            "id",
            "is_active",
            "is_pred",
            "is_gold",
            "data_error_potential",
            "contours"
          ],
          "title": "PolygonData"
        },
        "PolygonSize": {
          "type": "string",
          "enum": [
            "extra_small",
            "small",
            "medium",
            "large",
            "extra_large"
          ],
          "title": "PolygonSize"
        },
        "PreviewDatasetRequest": {
          "properties": {
            "column_mapping": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ColumnMapping"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "title": "PreviewDatasetRequest"
        },
        "ProjectAction": {
          "type": "string",
          "enum": [
            "update",
            "delete",
            "rename",
            "share",
            "create_run",
            "delete_run",
            "rename_run",
            "move_run",
            "export_data",
            "configure_human_feedback",
            "record_human_feedback",
            "log_data",
            "toggle_metric",
            "edit_alert",
            "create_stage",
            "edit_stage",
            "configure_crown_logic",
            "delete_data",
            "set_metric",
            "edit_run_tags",
            "dismiss_alert",
            "edit_slice",
            "edit_edit"
          ],
          "title": "ProjectAction"
        },
        "ProjectBookmarkFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "bookmark",
              "title": "Name",
              "default": "bookmark"
            },
            "value": {
              "type": "boolean",
              "title": "Value"
            }
          },
          "type": "object",
          "required": [
            "value"
          ],
          "title": "ProjectBookmarkFilter"
        },
        "ProjectBookmarkSort": {
          "properties": {
            "name": {
              "type": "string",
              "const": "bookmark",
              "title": "Name",
              "default": "bookmark"
            },
            "ascending": {
              "type": "boolean",
              "title": "Ascending",
              "default": true
            },
            "sort_type": {
              "type": "string",
              "const": "custom",
              "title": "Sort Type",
              "default": "custom"
            }
          },
          "type": "object",
          "title": "ProjectBookmarkSort"
        },
        "ProjectCollectionParams": {
          "properties": {
            "filters": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ProjectIDFilter"
                  },
                  {
                    "$ref": "#/components/schemas/ProjectNameFilter"
                  },
                  {
                    "$ref": "#/components/schemas/ProjectTypeFilter"
                  },
                  {
                    "$ref": "#/components/schemas/ProjectCreatorFilter"
                  },
                  {
                    "$ref": "#/components/schemas/ProjectCreatedAtFilter"
                  },
                  {
                    "$ref": "#/components/schemas/ProjectUpdatedAtFilter"
                  },
                  {
                    "$ref": "#/components/schemas/ProjectRunsFilter"
                  },
                  {
                    "$ref": "#/components/schemas/ProjectBookmarkFilter"
                  }
                ],
                "discriminator": {
                  "propertyName": "name",
                  "mapping": {
                    "bookmark": "#/components/schemas/ProjectBookmarkFilter",
                    "created_at": "#/components/schemas/ProjectCreatedAtFilter",
                    "creator": "#/components/schemas/ProjectCreatorFilter",
                    "id": "#/components/schemas/ProjectIDFilter",
                    "name": "#/components/schemas/ProjectNameFilter",
                    "runs": "#/components/schemas/ProjectRunsFilter",
                    "type": "#/components/schemas/ProjectTypeFilter",
                    "updated_at": "#/components/schemas/ProjectUpdatedAtFilter"
                  }
                }
              },
              "type": "array",
              "title": "Filters"
            },
            "sort": {
              "anyOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ProjectNameSort"
                    },
                    {
                      "$ref": "#/components/schemas/ProjectTypeSort"
                    },
                    {
                      "$ref": "#/components/schemas/ProjectCreatedAtSort"
                    },
                    {
                      "$ref": "#/components/schemas/ProjectUpdatedAtSort"
                    },
                    {
                      "$ref": "#/components/schemas/ProjectRunsSort"
                    },
                    {
                      "$ref": "#/components/schemas/ProjectBookmarkSort"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "name",
                    "mapping": {
                      "bookmark": "#/components/schemas/ProjectBookmarkSort",
                      "created_at": "#/components/schemas/ProjectCreatedAtSort",
                      "name": "#/components/schemas/ProjectNameSort",
                      "runs": "#/components/schemas/ProjectRunsSort",
                      "type": "#/components/schemas/ProjectTypeSort",
                      "updated_at": "#/components/schemas/ProjectUpdatedAtSort"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sort",
              "default": {
                "name": "created_at",
                "ascending": false,
                "sort_type": "column"
              }
            }
          },
          "type": "object",
          "title": "ProjectCollectionParams"
        },
        "ProjectCreate": {
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "title": "Name"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            },
            "type": {
              "$ref": "#/components/schemas/ProjectType",
              "default": "training_inference"
            },
            "create_example_templates": {
              "type": "boolean",
              "title": "Create Example Templates",
              "default": false
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "title": "ProjectCreate"
        },
        "ProjectCreateResponse": {
          "properties": {
            "name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            },
            "type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProjectType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            }
          },
          "type": "object",
          "required": [
            "id",
            "created_at",
            "updated_at"
          ],
          "title": "ProjectCreateResponse"
        },
        "ProjectCreatedAtFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "created_at",
              "title": "Name",
              "default": "created_at"
            },
            "value": {
              "type": "string",
              "format": "date-time",
              "title": "Value"
            },
            "operator": {
              "type": "string",
              "enum": [
                "eq",
                "ne",
                "gt",
                "gte",
                "lt",
                "lte"
              ],
              "title": "Operator"
            }
          },
          "type": "object",
          "required": [
            "value",
            "operator"
          ],
          "title": "ProjectCreatedAtFilter"
        },
        "ProjectCreatedAtSort": {
          "properties": {
            "name": {
              "type": "string",
              "const": "created_at",
              "title": "Name",
              "default": "created_at"
            },
            "ascending": {
              "type": "boolean",
              "title": "Ascending",
              "default": true
            },
            "sort_type": {
              "type": "string",
              "const": "column",
              "title": "Sort Type",
              "default": "column"
            }
          },
          "type": "object",
          "title": "ProjectCreatedAtSort"
        },
        "ProjectCreatorFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "creator",
              "title": "Name",
              "default": "creator"
            },
            "value": {
              "type": "string",
              "format": "uuid4",
              "title": "Value"
            }
          },
          "type": "object",
          "required": [
            "value"
          ],
          "title": "ProjectCreatorFilter"
        },
        "ProjectDB": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "permissions": {
              "items": {
                "$ref": "#/components/schemas/Permission"
              },
              "type": "array",
              "title": "Permissions",
              "default": []
            },
            "name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            },
            "created_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Created By"
            },
            "type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProjectType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "runs": {
              "items": {
                "$ref": "#/components/schemas/RunDB"
              },
              "type": "array",
              "title": "Runs"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "bookmark": {
              "type": "boolean",
              "title": "Bookmark",
              "default": false
            }
          },
          "type": "object",
          "required": [
            "id",
            "created_by",
            "runs",
            "created_at",
            "updated_at"
          ],
          "title": "ProjectDB"
        },
        "ProjectDBThin": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "permissions": {
              "items": {
                "$ref": "#/components/schemas/Permission"
              },
              "type": "array",
              "title": "Permissions",
              "default": []
            },
            "name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            },
            "created_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Created By"
            },
            "type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProjectType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "runs": {
              "items": {
                "$ref": "#/components/schemas/RunDBThin"
              },
              "type": "array",
              "title": "Runs"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "bookmark": {
              "type": "boolean",
              "title": "Bookmark",
              "default": false
            }
          },
          "type": "object",
          "required": [
            "id",
            "created_by",
            "runs",
            "created_at",
            "updated_at"
          ],
          "title": "ProjectDBThin"
        },
        "ProjectDeleteResponse": {
          "properties": {
            "message": {
              "type": "string",
              "title": "Message"
            }
          },
          "type": "object",
          "required": [
            "message"
          ],
          "title": "ProjectDeleteResponse"
        },
        "ProjectIDFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "id",
              "title": "Name",
              "default": "id"
            },
            "value": {
              "type": "string",
              "format": "uuid4",
              "title": "Value"
            }
          },
          "type": "object",
          "required": [
            "value"
          ],
          "title": "ProjectIDFilter"
        },
        "ProjectIntegration": {
          "properties": {
            "models": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Models"
            },
            "scorer_models": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Scorer Models"
            }
          },
          "type": "object",
          "required": [
            "models",
            "scorer_models"
          ],
          "title": "ProjectIntegration"
        },
        "ProjectIntegrationsResponse": {
          "properties": {
            "integrations": {
              "additionalProperties": {
                "$ref": "#/components/schemas/ProjectIntegration"
              },
              "propertyNames": {
                "$ref": "#/components/schemas/LLMIntegration"
              },
              "type": "object",
              "title": "Integrations"
            }
          },
          "type": "object",
          "required": [
            "integrations"
          ],
          "title": "ProjectIntegrationsResponse"
        },
        "ProjectNameFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "name",
              "title": "Name",
              "default": "name"
            },
            "operator": {
              "type": "string",
              "enum": [
                "eq",
                "ne",
                "contains",
                "one_of",
                "not_in"
              ],
              "title": "Operator"
            },
            "value": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ],
              "title": "Value"
            },
            "case_sensitive": {
              "type": "boolean",
              "title": "Case Sensitive",
              "default": true
            }
          },
          "type": "object",
          "required": [
            "operator",
            "value"
          ],
          "title": "ProjectNameFilter"
        },
        "ProjectNameSort": {
          "properties": {
            "name": {
              "type": "string",
              "const": "name",
              "title": "Name",
              "default": "name"
            },
            "ascending": {
              "type": "boolean",
              "title": "Ascending",
              "default": true
            },
            "sort_type": {
              "type": "string",
              "const": "column",
              "title": "Sort Type",
              "default": "column"
            }
          },
          "type": "object",
          "title": "ProjectNameSort"
        },
        "ProjectRunSummary": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "name": {
              "type": "string",
              "title": "Name"
            },
            "task_type": {
              "$ref": "#/components/schemas/TaskType"
            },
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "labels": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Labels"
            },
            "num_samples": {
              "type": "integer",
              "title": "Num Samples"
            },
            "metrics": {
              "$ref": "#/components/schemas/ModelMetrics"
            },
            "slices": {
              "items": {
                "$ref": "#/components/schemas/SliceMetrics"
              },
              "type": "array",
              "title": "Slices"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "avg_samples": {
              "type": "number",
              "title": "Avg Samples"
            },
            "hard_sample_pct": {
              "type": "number",
              "title": "Hard Sample Pct"
            },
            "hard_sample_metrics": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ModelMetrics"
                },
                {
                  "type": "null"
                }
              ]
            },
            "num_spans": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Spans"
            },
            "spans_per_sample": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Spans Per Sample"
            },
            "spans_per_class": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Spans Per Class"
            },
            "data_edits": {
              "items": {
                "$ref": "#/components/schemas/EditSummary"
              },
              "type": "array",
              "title": "Data Edits",
              "default": []
            }
          },
          "type": "object",
          "required": [
            "id",
            "name",
            "task_type",
            "labels",
            "num_samples",
            "metrics",
            "slices",
            "updated_at",
            "avg_samples",
            "hard_sample_pct"
          ],
          "title": "ProjectRunSummary"
        },
        "ProjectRunsFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "runs",
              "title": "Name",
              "default": "runs"
            },
            "value": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                }
              ],
              "title": "Value"
            },
            "operator": {
              "type": "string",
              "enum": [
                "eq",
                "ne",
                "gt",
                "gte",
                "lt",
                "lte",
                "between"
              ],
              "title": "Operator"
            }
          },
          "type": "object",
          "required": [
            "value",
            "operator"
          ],
          "title": "ProjectRunsFilter"
        },
        "ProjectRunsSort": {
          "properties": {
            "name": {
              "type": "string",
              "const": "runs",
              "title": "Name",
              "default": "runs"
            },
            "ascending": {
              "type": "boolean",
              "title": "Ascending",
              "default": true
            },
            "sort_type": {
              "type": "string",
              "const": "custom",
              "title": "Sort Type",
              "default": "custom"
            }
          },
          "type": "object",
          "title": "ProjectRunsSort"
        },
        "ProjectSettingsDB": {
          "properties": {
            "scorers_config": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorersConfig-Output"
                },
                {
                  "type": "null"
                }
              ]
            },
            "metric_weights_configuration": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "$ref": "#/components/schemas/MetricWeight"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Weights Configuration"
            },
            "alerts_configuration": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AlertsConfiguration-Output"
                },
                {
                  "type": "null"
                }
              ]
            },
            "scorers_configuration": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorersConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            },
            "registered_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/RegisteredScorer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorers Configuration"
            },
            "generated_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/GeneratedScorerConfig"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorers Configuration"
            },
            "customized_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/CustomizedScorer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Customized Scorers Configuration"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            }
          },
          "type": "object",
          "required": [
            "project_id",
            "id",
            "created_at",
            "updated_at"
          ],
          "title": "ProjectSettingsDB"
        },
        "ProjectType": {
          "type": "string",
          "enum": [
            "training_inference",
            "prompt_evaluation",
            "llm_monitor",
            "protect",
            "gen_ai"
          ],
          "title": "ProjectType"
        },
        "ProjectTypeFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "type",
              "title": "Name",
              "default": "type"
            },
            "value": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProjectType"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/ProjectType"
                  },
                  "type": "array"
                }
              ],
              "title": "Value"
            },
            "operator": {
              "type": "string",
              "enum": [
                "eq",
                "ne",
                "one_of",
                "not_in"
              ],
              "title": "Operator"
            }
          },
          "type": "object",
          "required": [
            "value",
            "operator"
          ],
          "title": "ProjectTypeFilter"
        },
        "ProjectTypeSort": {
          "properties": {
            "name": {
              "type": "string",
              "const": "type",
              "title": "Name",
              "default": "type"
            },
            "ascending": {
              "type": "boolean",
              "title": "Ascending",
              "default": true
            },
            "sort_type": {
              "type": "string",
              "const": "column",
              "title": "Sort Type",
              "default": "column"
            }
          },
          "type": "object",
          "title": "ProjectTypeSort"
        },
        "ProjectUpdate": {
          "properties": {
            "name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            },
            "type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProjectType"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "title": "ProjectUpdate"
        },
        "ProjectUpdateResponse": {
          "properties": {
            "name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            },
            "type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProjectType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            }
          },
          "type": "object",
          "required": [
            "id",
            "created_at",
            "updated_at"
          ],
          "title": "ProjectUpdateResponse"
        },
        "ProjectUpdatedAtFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "updated_at",
              "title": "Name",
              "default": "updated_at"
            },
            "value": {
              "type": "string",
              "format": "date-time",
              "title": "Value"
            },
            "operator": {
              "type": "string",
              "enum": [
                "eq",
                "ne",
                "gt",
                "gte",
                "lt",
                "lte"
              ],
              "title": "Operator"
            }
          },
          "type": "object",
          "required": [
            "value",
            "operator"
          ],
          "title": "ProjectUpdatedAtFilter"
        },
        "ProjectUpdatedAtSort": {
          "properties": {
            "name": {
              "type": "string",
              "const": "updated_at",
              "title": "Name",
              "default": "updated_at"
            },
            "ascending": {
              "type": "boolean",
              "title": "Ascending",
              "default": true
            },
            "sort_type": {
              "type": "string",
              "const": "column",
              "title": "Sort Type",
              "default": "column"
            }
          },
          "type": "object",
          "title": "ProjectUpdatedAtSort"
        },
        "PromptChainIngestBatchRequest": {
          "properties": {
            "rows": {
              "items": {
                "$ref": "#/components/schemas/ChainRow"
              },
              "type": "array",
              "title": "Rows"
            },
            "scorers": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AgenticWorkflowSuccessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/AgenticSessionSuccessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/BleuScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ChunkAttributionUtilizationScorer"
                  },
                  {
                    "$ref": "#/components/schemas/CompletenessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ContextAdherenceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ContextRelevanceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/CorrectnessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/GroundTruthAdherenceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputPIIScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputSexistScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputToneScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputToxicityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InstructionAdherenceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputPIIScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputSexistScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputToneScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputToxicityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/PromptInjectionScorer"
                  },
                  {
                    "$ref": "#/components/schemas/PromptPerplexityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/RougeScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ToolErrorRateScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ToolSelectionQualityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/UncertaintyScorer"
                  }
                ],
                "discriminator": {
                  "propertyName": "name",
                  "mapping": {
                    "agentic_session_success": "#/components/schemas/AgenticSessionSuccessScorer",
                    "agentic_workflow_success": "#/components/schemas/AgenticWorkflowSuccessScorer",
                    "bleu": "#/components/schemas/BleuScorer",
                    "chunk_attribution_utilization": "#/components/schemas/ChunkAttributionUtilizationScorer",
                    "completeness": "#/components/schemas/CompletenessScorer",
                    "context_adherence": "#/components/schemas/ContextAdherenceScorer",
                    "context_relevance": "#/components/schemas/ContextRelevanceScorer",
                    "correctness": "#/components/schemas/CorrectnessScorer",
                    "ground_truth_adherence": "#/components/schemas/GroundTruthAdherenceScorer",
                    "input_pii": "#/components/schemas/InputPIIScorer",
                    "input_sexist": "#/components/schemas/InputSexistScorer",
                    "input_tone": "#/components/schemas/InputToneScorer",
                    "input_toxicity": "#/components/schemas/InputToxicityScorer",
                    "instruction_adherence": "#/components/schemas/InstructionAdherenceScorer",
                    "output_pii": "#/components/schemas/OutputPIIScorer",
                    "output_sexist": "#/components/schemas/OutputSexistScorer",
                    "output_tone": "#/components/schemas/OutputToneScorer",
                    "output_toxicity": "#/components/schemas/OutputToxicityScorer",
                    "prompt_injection": "#/components/schemas/PromptInjectionScorer",
                    "prompt_perplexity": "#/components/schemas/PromptPerplexityScorer",
                    "rouge": "#/components/schemas/RougeScorer",
                    "tool_error_rate": "#/components/schemas/ToolErrorRateScorer",
                    "tool_selection_quality": "#/components/schemas/ToolSelectionQualityScorer",
                    "uncertainty": "#/components/schemas/UncertaintyScorer"
                  }
                }
              },
              "type": "array",
              "title": "Scorers"
            },
            "prompt_registered_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/RegisteredScorer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Registered Scorers Configuration"
            },
            "generated_scorers": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/GeneratedScorerConfig"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorers"
            },
            "prompt_scorers_configuration": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorersConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            },
            "prompt_customized_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/CustomizedAgenticSessionSuccessGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedAgenticWorkflowSuccessGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedChunkAttributionUtilizationGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedCompletenessGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedFactualityGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedGroundednessGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedInstructionAdherenceGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedGroundTruthAdherenceGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedToolSelectionQualityGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedToolErrorRateGPTScorer-Input"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "scorer_name",
                      "mapping": {
                        "_customized_agentic_session_success": "#/components/schemas/CustomizedAgenticSessionSuccessGPTScorer-Input",
                        "_customized_agentic_workflow_success": "#/components/schemas/CustomizedAgenticWorkflowSuccessGPTScorer-Input",
                        "_customized_chunk_attribution_utilization_gpt": "#/components/schemas/CustomizedChunkAttributionUtilizationGPTScorer-Input",
                        "_customized_completeness_gpt": "#/components/schemas/CustomizedCompletenessGPTScorer-Input",
                        "_customized_factuality": "#/components/schemas/CustomizedFactualityGPTScorer-Input",
                        "_customized_ground_truth_adherence": "#/components/schemas/CustomizedGroundTruthAdherenceGPTScorer-Input",
                        "_customized_groundedness": "#/components/schemas/CustomizedGroundednessGPTScorer-Input",
                        "_customized_instruction_adherence": "#/components/schemas/CustomizedInstructionAdherenceGPTScorer-Input",
                        "_customized_tool_error_rate": "#/components/schemas/CustomizedToolErrorRateGPTScorer-Input",
                        "_customized_tool_selection_quality": "#/components/schemas/CustomizedToolSelectionQualityGPTScorer-Input"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Customized Scorers Configuration"
            },
            "total_chains": {
              "type": "integer",
              "title": "Total Chains",
              "description": "Total number of chains / workflows in the batch. This should match the unique root ID count and is used to determine if all chains have been ingested."
            },
            "timeout_minutes": {
              "type": "integer",
              "title": "Timeout Minutes",
              "description": "Minutes to wait before concluding ingestion, regardless of how many batches of chains / chains have been successfully ingested."
            }
          },
          "type": "object",
          "required": [
            "total_chains"
          ],
          "title": "PromptChainIngestBatchRequest"
        },
        "PromptChainIngestBatchResponse": {
          "properties": {
            "num_rows": {
              "type": "integer",
              "title": "Num Rows"
            },
            "message": {
              "type": "string",
              "title": "Message"
            },
            "job_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Job Id"
            },
            "link": {
              "type": "string",
              "title": "Link"
            },
            "num_chains": {
              "type": "integer",
              "title": "Num Chains"
            },
            "total_chains": {
              "type": "integer",
              "title": "Total Chains"
            }
          },
          "type": "object",
          "required": [
            "num_rows",
            "message",
            "job_id",
            "link",
            "num_chains",
            "total_chains"
          ],
          "title": "PromptChainIngestBatchResponse"
        },
        "PromptChainIngestRequest": {
          "properties": {
            "rows": {
              "items": {
                "$ref": "#/components/schemas/ChainRow"
              },
              "type": "array",
              "title": "Rows"
            },
            "scorers": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AgenticWorkflowSuccessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/AgenticSessionSuccessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/BleuScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ChunkAttributionUtilizationScorer"
                  },
                  {
                    "$ref": "#/components/schemas/CompletenessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ContextAdherenceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ContextRelevanceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/CorrectnessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/GroundTruthAdherenceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputPIIScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputSexistScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputToneScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputToxicityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InstructionAdherenceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputPIIScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputSexistScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputToneScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputToxicityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/PromptInjectionScorer"
                  },
                  {
                    "$ref": "#/components/schemas/PromptPerplexityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/RougeScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ToolErrorRateScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ToolSelectionQualityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/UncertaintyScorer"
                  }
                ],
                "discriminator": {
                  "propertyName": "name",
                  "mapping": {
                    "agentic_session_success": "#/components/schemas/AgenticSessionSuccessScorer",
                    "agentic_workflow_success": "#/components/schemas/AgenticWorkflowSuccessScorer",
                    "bleu": "#/components/schemas/BleuScorer",
                    "chunk_attribution_utilization": "#/components/schemas/ChunkAttributionUtilizationScorer",
                    "completeness": "#/components/schemas/CompletenessScorer",
                    "context_adherence": "#/components/schemas/ContextAdherenceScorer",
                    "context_relevance": "#/components/schemas/ContextRelevanceScorer",
                    "correctness": "#/components/schemas/CorrectnessScorer",
                    "ground_truth_adherence": "#/components/schemas/GroundTruthAdherenceScorer",
                    "input_pii": "#/components/schemas/InputPIIScorer",
                    "input_sexist": "#/components/schemas/InputSexistScorer",
                    "input_tone": "#/components/schemas/InputToneScorer",
                    "input_toxicity": "#/components/schemas/InputToxicityScorer",
                    "instruction_adherence": "#/components/schemas/InstructionAdherenceScorer",
                    "output_pii": "#/components/schemas/OutputPIIScorer",
                    "output_sexist": "#/components/schemas/OutputSexistScorer",
                    "output_tone": "#/components/schemas/OutputToneScorer",
                    "output_toxicity": "#/components/schemas/OutputToxicityScorer",
                    "prompt_injection": "#/components/schemas/PromptInjectionScorer",
                    "prompt_perplexity": "#/components/schemas/PromptPerplexityScorer",
                    "rouge": "#/components/schemas/RougeScorer",
                    "tool_error_rate": "#/components/schemas/ToolErrorRateScorer",
                    "tool_selection_quality": "#/components/schemas/ToolSelectionQualityScorer",
                    "uncertainty": "#/components/schemas/UncertaintyScorer"
                  }
                }
              },
              "type": "array",
              "title": "Scorers"
            },
            "prompt_registered_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/RegisteredScorer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Registered Scorers Configuration"
            },
            "generated_scorers": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/GeneratedScorerConfig"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Scorers"
            },
            "prompt_scorers_configuration": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorersConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            },
            "prompt_customized_scorers_configuration": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/CustomizedAgenticSessionSuccessGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedAgenticWorkflowSuccessGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedChunkAttributionUtilizationGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedCompletenessGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedFactualityGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedGroundednessGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedInstructionAdherenceGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedGroundTruthAdherenceGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedToolSelectionQualityGPTScorer-Input"
                      },
                      {
                        "$ref": "#/components/schemas/CustomizedToolErrorRateGPTScorer-Input"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "scorer_name",
                      "mapping": {
                        "_customized_agentic_session_success": "#/components/schemas/CustomizedAgenticSessionSuccessGPTScorer-Input",
                        "_customized_agentic_workflow_success": "#/components/schemas/CustomizedAgenticWorkflowSuccessGPTScorer-Input",
                        "_customized_chunk_attribution_utilization_gpt": "#/components/schemas/CustomizedChunkAttributionUtilizationGPTScorer-Input",
                        "_customized_completeness_gpt": "#/components/schemas/CustomizedCompletenessGPTScorer-Input",
                        "_customized_factuality": "#/components/schemas/CustomizedFactualityGPTScorer-Input",
                        "_customized_ground_truth_adherence": "#/components/schemas/CustomizedGroundTruthAdherenceGPTScorer-Input",
                        "_customized_groundedness": "#/components/schemas/CustomizedGroundednessGPTScorer-Input",
                        "_customized_instruction_adherence": "#/components/schemas/CustomizedInstructionAdherenceGPTScorer-Input",
                        "_customized_tool_error_rate": "#/components/schemas/CustomizedToolErrorRateGPTScorer-Input",
                        "_customized_tool_selection_quality": "#/components/schemas/CustomizedToolSelectionQualityGPTScorer-Input"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Customized Scorers Configuration"
            }
          },
          "type": "object",
          "title": "PromptChainIngestRequest"
        },
        "PromptChainIngestResponse": {
          "properties": {
            "num_rows": {
              "type": "integer",
              "title": "Num Rows"
            },
            "message": {
              "type": "string",
              "title": "Message"
            },
            "job_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Job Id"
            },
            "link": {
              "type": "string",
              "title": "Link"
            }
          },
          "type": "object",
          "required": [
            "num_rows",
            "message",
            "job_id",
            "link"
          ],
          "title": "PromptChainIngestResponse"
        },
        "PromptDatasetDB": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "dataset_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Dataset Id"
            },
            "file_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "File Name"
            },
            "message": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Message"
            },
            "num_rows": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Rows"
            },
            "rows": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Rows"
            }
          },
          "type": "object",
          "required": [
            "id",
            "dataset_id"
          ],
          "title": "PromptDatasetDB"
        },
        "PromptFilterParams": {
          "properties": {
            "filters": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RangePromptFilterParam"
                  },
                  {
                    "$ref": "#/components/schemas/ValuePromptFilterParam"
                  },
                  {
                    "$ref": "#/components/schemas/CategoricalPromptFilterParam"
                  }
                ],
                "discriminator": {
                  "propertyName": "filter_type",
                  "mapping": {
                    "category": "#/components/schemas/CategoricalPromptFilterParam",
                    "range": "#/components/schemas/RangePromptFilterParam",
                    "value": "#/components/schemas/ValuePromptFilterParam"
                  }
                }
              },
              "type": "array",
              "title": "Filters",
              "description": "A list of filters."
            }
          },
          "type": "object",
          "title": "PromptFilterParams"
        },
        "PromptGroupResponse": {
          "properties": {
            "group_label": {
              "type": "string",
              "title": "Group Label"
            },
            "group_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Group Name"
            },
            "group_description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Group Description"
            },
            "group_icon": {
              "type": "string",
              "title": "Group Icon",
              "default": "Puzzle"
            },
            "columns": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Columns"
            }
          },
          "type": "object",
          "required": [
            "group_label",
            "columns"
          ],
          "title": "PromptGroupResponse",
          "description": "Contains relevant data for prompt column group."
        },
        "PromptInjectionScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "prompt_injection",
              "title": "Name",
              "default": "prompt_injection"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            }
          },
          "type": "object",
          "title": "PromptInjectionScorer"
        },
        "PromptOptimizationConfiguration": {
          "properties": {
            "prompt": {
              "type": "string",
              "title": "Prompt"
            },
            "evaluation_criteria": {
              "type": "string",
              "title": "Evaluation Criteria"
            },
            "task_description": {
              "type": "string",
              "title": "Task Description"
            },
            "includes_target": {
              "type": "boolean",
              "title": "Includes Target"
            },
            "num_rows": {
              "type": "integer",
              "title": "Num Rows"
            },
            "iterations": {
              "type": "integer",
              "title": "Iterations"
            },
            "max_tokens": {
              "type": "integer",
              "title": "Max Tokens"
            },
            "temperature": {
              "type": "number",
              "title": "Temperature"
            },
            "generation_model_alias": {
              "type": "string",
              "title": "Generation Model Alias"
            },
            "evaluation_model_alias": {
              "type": "string",
              "title": "Evaluation Model Alias"
            },
            "integration_name": {
              "$ref": "#/components/schemas/LLMIntegration",
              "default": "openai"
            }
          },
          "type": "object",
          "required": [
            "prompt",
            "evaluation_criteria",
            "task_description",
            "includes_target",
            "num_rows",
            "iterations",
            "max_tokens",
            "temperature",
            "generation_model_alias",
            "evaluation_model_alias"
          ],
          "title": "PromptOptimizationConfiguration",
          "description": "Configuration for prompt optimization."
        },
        "PromptPerplexityScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "prompt_perplexity",
              "title": "Name",
              "default": "prompt_perplexity"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            }
          },
          "type": "object",
          "title": "PromptPerplexityScorer"
        },
        "PromptRow": {
          "properties": {
            "hallucination_severity": {
              "type": "integer",
              "maximum": 2,
              "minimum": 0,
              "title": "Hallucination Severity",
              "default": 0
            },
            "index": {
              "type": "integer",
              "title": "Index"
            },
            "prompt": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt"
            },
            "response": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Response"
            },
            "target": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Target"
            },
            "node_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Node Id"
            },
            "node_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/NodeType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "node_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Node Name"
            },
            "node_input": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Node Input"
            },
            "node_output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Node Output"
            },
            "chain_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Chain Id"
            },
            "chain_root_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Chain Root Id"
            },
            "has_children": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Has Children"
            },
            "inputs": {
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "type": "object",
              "title": "Inputs"
            },
            "metrics": {
              "$ref": "#/components/schemas/api__schemas__content__prompt_row__Metrics"
            },
            "segments": {
              "items": {
                "$ref": "#/components/schemas/HallucinationSegment"
              },
              "type": "array",
              "title": "Segments"
            },
            "response_segments": {
              "items": {
                "$ref": "#/components/schemas/HallucinationSegment"
              },
              "type": "array",
              "title": "Response Segments"
            },
            "hallucination": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Hallucination"
            },
            "bleu": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Bleu"
            },
            "rouge": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Rouge"
            },
            "cost": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Cost"
            },
            "prompt_segments": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/HallucinationSegment"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prompt Segments"
            },
            "prompt_hallucination_severity": {
              "type": "integer",
              "maximum": 2,
              "minimum": 0,
              "title": "Prompt Hallucination Severity",
              "default": 0
            }
          },
          "type": "object",
          "required": [
            "index"
          ],
          "title": "PromptRow"
        },
        "PromptRowColumn": {
          "properties": {
            "job_status": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/JobStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Job status used for computing the column. Only set for metrics columns that have a separate scorer job."
            },
            "job_progress_message": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Job Progress Message",
              "description": "Progress message to show the users on hover in case the job is in progress."
            },
            "job_error_message": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Job Error Message",
              "description": "Error message to show the users on hover in case the job fails or errors out."
            },
            "scorer_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scorer Name",
              "description": "Scorer Name executed by the job."
            },
            "job_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorerType"
                },
                {
                  "type": "null"
                }
              ],
              "description": "If a column is associated with a basic or a plus scorer. Defaults to None for columns not associated with either."
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the column."
            },
            "label": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Label",
              "description": "Display label of the column in the UI."
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description",
              "description": "Description of the column."
            },
            "group_label": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Group Label",
              "description": "Display label of the group (super column) in the UI."
            },
            "group_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Group Name",
              "description": "Name of the group (super column)."
            },
            "group_description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Group Description",
              "description": "Description of the group (super column)."
            },
            "data_type": {
              "$ref": "#/components/schemas/DataTypeOptions",
              "description": "Data type of the column. This is used to determine how to format the data on the UI.",
              "default": "unknown"
            },
            "metric_threshold": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricThreshold"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Thresholds for the column, if this is a metrics column."
            },
            "sortable": {
              "type": "boolean",
              "title": "Sortable",
              "description": "Whether the column is sortable.",
              "default": true
            },
            "filterable": {
              "type": "boolean",
              "title": "Filterable",
              "description": "Whether the column is filterable by value. Doesn't include categorical filters",
              "default": true
            },
            "metric_infos": {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/MetricNotComputed"
                  },
                  {
                    "$ref": "#/components/schemas/MetricPending"
                  },
                  {
                    "$ref": "#/components/schemas/MetricComputing"
                  },
                  {
                    "$ref": "#/components/schemas/MetricNotApplicable"
                  },
                  {
                    "$ref": "#/components/schemas/MetricSuccess"
                  },
                  {
                    "$ref": "#/components/schemas/MetricError"
                  },
                  {
                    "$ref": "#/components/schemas/MetricFailed"
                  }
                ]
              },
              "type": "array",
              "title": "Metric Infos",
              "description": "Metric values with metadata."
            },
            "values": {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "format": "uuid"
                  },
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "$ref": "#/components/schemas/Segment"
                  },
                  {
                    "$ref": "#/components/schemas/HallucinationSegment"
                  },
                  {
                    "$ref": "#/components/schemas/Document-Output"
                  },
                  {
                    "$ref": "#/components/schemas/FeedbackRatingDB"
                  },
                  {
                    "$ref": "#/components/schemas/FeedbackAggregate"
                  },
                  {
                    "items": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "integer"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "string",
                          "format": "uuid"
                        },
                        {
                          "type": "string",
                          "format": "date-time"
                        },
                        {
                          "$ref": "#/components/schemas/Segment"
                        },
                        {
                          "$ref": "#/components/schemas/HallucinationSegment"
                        },
                        {
                          "$ref": "#/components/schemas/Document-Output"
                        },
                        {
                          "$ref": "#/components/schemas/FeedbackRatingDB"
                        },
                        {
                          "$ref": "#/components/schemas/FeedbackAggregate"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "type": "array"
                  },
                  {
                    "items": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "integer"
                          },
                          {
                            "type": "number"
                          },
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "string",
                            "format": "uuid"
                          },
                          {
                            "type": "string",
                            "format": "date-time"
                          },
                          {
                            "$ref": "#/components/schemas/Segment"
                          },
                          {
                            "$ref": "#/components/schemas/HallucinationSegment"
                          },
                          {
                            "$ref": "#/components/schemas/Document-Output"
                          },
                          {
                            "$ref": "#/components/schemas/FeedbackRatingDB"
                          },
                          {
                            "$ref": "#/components/schemas/FeedbackAggregate"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  {
                    "items": {
                      "items": {
                        "items": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "integer"
                            },
                            {
                              "type": "number"
                            },
                            {
                              "type": "boolean"
                            },
                            {
                              "type": "string",
                              "format": "uuid"
                            },
                            {
                              "type": "string",
                              "format": "date-time"
                            },
                            {
                              "$ref": "#/components/schemas/Segment"
                            },
                            {
                              "$ref": "#/components/schemas/HallucinationSegment"
                            },
                            {
                              "$ref": "#/components/schemas/Document-Output"
                            },
                            {
                              "$ref": "#/components/schemas/FeedbackRatingDB"
                            },
                            {
                              "$ref": "#/components/schemas/FeedbackAggregate"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "type": "array"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "type": "array",
              "title": "Values",
              "description": "Values of the column."
            },
            "display_values": {
              "anyOf": [
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Display Values",
              "description": "Display values of the column. This is used to display the values in the UI if we want them to be different from the actual values."
            },
            "job_info": {
              "anyOf": [
                {
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/JobInfo"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Job Info",
              "description": "Job info used for computing the column. Only present for metrics columns that have a separate scorer job."
            },
            "alert": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Alert"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Alert for a given column with title and message"
            },
            "source": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Source",
              "description": "Source DF of the column."
            },
            "can_critique_column": {
              "type": "boolean",
              "title": "Can Critique Column",
              "default": false
            },
            "metric_critique_computing": {
              "type": "boolean",
              "title": "Metric Critique Computing",
              "default": false
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "title": "PromptRowColumn"
        },
        "PromptRunColumn": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the column."
            },
            "label": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Label",
              "description": "Display label of the column in the UI."
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description",
              "description": "Description of the column."
            },
            "group_label": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Group Label",
              "description": "Display label of the group (super column) in the UI."
            },
            "group_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Group Name",
              "description": "Name of the group (super column)."
            },
            "group_description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Group Description",
              "description": "Description of the group (super column)."
            },
            "data_type": {
              "$ref": "#/components/schemas/DataTypeOptions",
              "description": "Data type of the column. This is used to determine how to format the data on the UI.",
              "default": "unknown"
            },
            "metric_threshold": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricThreshold"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Thresholds for the column, if this is a metrics column."
            },
            "sortable": {
              "type": "boolean",
              "title": "Sortable",
              "description": "Whether the column is sortable.",
              "default": true
            },
            "filterable": {
              "type": "boolean",
              "title": "Filterable",
              "description": "Whether the column is filterable by value. Doesn't include categorical filters",
              "default": true
            },
            "metric_infos": {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/MetricNotComputed"
                  },
                  {
                    "$ref": "#/components/schemas/MetricPending"
                  },
                  {
                    "$ref": "#/components/schemas/MetricComputing"
                  },
                  {
                    "$ref": "#/components/schemas/MetricNotApplicable"
                  },
                  {
                    "$ref": "#/components/schemas/MetricSuccess"
                  },
                  {
                    "$ref": "#/components/schemas/MetricError"
                  },
                  {
                    "$ref": "#/components/schemas/MetricFailed"
                  }
                ]
              },
              "type": "array",
              "title": "Metric Infos",
              "description": "Metric values with metadata."
            },
            "values": {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "format": "uuid"
                  },
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "$ref": "#/components/schemas/Segment"
                  },
                  {
                    "$ref": "#/components/schemas/HallucinationSegment"
                  },
                  {
                    "$ref": "#/components/schemas/Document-Output"
                  },
                  {
                    "$ref": "#/components/schemas/FeedbackRatingDB"
                  },
                  {
                    "$ref": "#/components/schemas/FeedbackAggregate"
                  },
                  {
                    "items": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "integer"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "string",
                          "format": "uuid"
                        },
                        {
                          "type": "string",
                          "format": "date-time"
                        },
                        {
                          "$ref": "#/components/schemas/Segment"
                        },
                        {
                          "$ref": "#/components/schemas/HallucinationSegment"
                        },
                        {
                          "$ref": "#/components/schemas/Document-Output"
                        },
                        {
                          "$ref": "#/components/schemas/FeedbackRatingDB"
                        },
                        {
                          "$ref": "#/components/schemas/FeedbackAggregate"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "type": "array"
                  },
                  {
                    "items": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "integer"
                          },
                          {
                            "type": "number"
                          },
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "string",
                            "format": "uuid"
                          },
                          {
                            "type": "string",
                            "format": "date-time"
                          },
                          {
                            "$ref": "#/components/schemas/Segment"
                          },
                          {
                            "$ref": "#/components/schemas/HallucinationSegment"
                          },
                          {
                            "$ref": "#/components/schemas/Document-Output"
                          },
                          {
                            "$ref": "#/components/schemas/FeedbackRatingDB"
                          },
                          {
                            "$ref": "#/components/schemas/FeedbackAggregate"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  {
                    "items": {
                      "items": {
                        "items": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "integer"
                            },
                            {
                              "type": "number"
                            },
                            {
                              "type": "boolean"
                            },
                            {
                              "type": "string",
                              "format": "uuid"
                            },
                            {
                              "type": "string",
                              "format": "date-time"
                            },
                            {
                              "$ref": "#/components/schemas/Segment"
                            },
                            {
                              "$ref": "#/components/schemas/HallucinationSegment"
                            },
                            {
                              "$ref": "#/components/schemas/Document-Output"
                            },
                            {
                              "$ref": "#/components/schemas/FeedbackRatingDB"
                            },
                            {
                              "$ref": "#/components/schemas/FeedbackAggregate"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "type": "array"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "type": "array",
              "title": "Values",
              "description": "Values of the column."
            },
            "display_values": {
              "anyOf": [
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Display Values",
              "description": "Display values of the column. This is used to display the values in the UI if we want them to be different from the actual values."
            },
            "job_info": {
              "anyOf": [
                {
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/JobInfo"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Job Info",
              "description": "Job info used for computing the column. Only present for metrics columns that have a separate scorer job."
            },
            "alert": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Alert"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Alert for a given column with title and message"
            },
            "job_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorerType"
                },
                {
                  "type": "null"
                }
              ],
              "description": "If a column is associated with a basic or a plus scorer. Defaults to None for columns not associated with either."
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "title": "PromptRunColumn"
        },
        "PromptRunSettings-Input": {
          "properties": {
            "logprobs": {
              "type": "boolean",
              "title": "Logprobs",
              "default": true
            },
            "top_logprobs": {
              "type": "integer",
              "title": "Top Logprobs",
              "default": 5
            },
            "echo": {
              "type": "boolean",
              "title": "Echo",
              "default": false
            },
            "n": {
              "type": "integer",
              "title": "N",
              "default": 1
            },
            "deployment_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Deployment Name"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o mini"
            },
            "temperature": {
              "type": "number",
              "title": "Temperature",
              "default": 1
            },
            "max_tokens": {
              "type": "integer",
              "title": "Max Tokens",
              "default": 256
            },
            "stop_sequences": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stop Sequences"
            },
            "top_p": {
              "type": "number",
              "title": "Top P",
              "default": 1
            },
            "top_k": {
              "type": "integer",
              "title": "Top K",
              "default": 40
            },
            "frequency_penalty": {
              "type": "number",
              "title": "Frequency Penalty",
              "default": 0
            },
            "presence_penalty": {
              "type": "number",
              "title": "Presence Penalty",
              "default": 0
            },
            "tools": {
              "anyOf": [
                {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tools"
            },
            "tool_choice": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/OpenAIToolChoice"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tool Choice"
            },
            "response_format": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Response Format"
            },
            "known_models": {
              "items": {
                "$ref": "#/components/schemas/Model-Input"
              },
              "type": "array",
              "title": "Known Models"
            }
          },
          "type": "object",
          "title": "PromptRunSettings",
          "description": "Prompt run settings."
        },
        "PromptRunSettings-Output": {
          "properties": {
            "logprobs": {
              "type": "boolean",
              "title": "Logprobs",
              "default": true
            },
            "top_logprobs": {
              "type": "integer",
              "title": "Top Logprobs",
              "default": 5
            },
            "echo": {
              "type": "boolean",
              "title": "Echo",
              "default": false
            },
            "n": {
              "type": "integer",
              "title": "N",
              "default": 1
            },
            "deployment_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Deployment Name"
            },
            "model_alias": {
              "type": "string",
              "title": "Model Alias",
              "default": "GPT-4o mini"
            },
            "temperature": {
              "type": "number",
              "title": "Temperature",
              "default": 1
            },
            "max_tokens": {
              "type": "integer",
              "title": "Max Tokens",
              "default": 256
            },
            "stop_sequences": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stop Sequences"
            },
            "top_p": {
              "type": "number",
              "title": "Top P",
              "default": 1
            },
            "top_k": {
              "type": "integer",
              "title": "Top K",
              "default": 40
            },
            "frequency_penalty": {
              "type": "number",
              "title": "Frequency Penalty",
              "default": 0
            },
            "presence_penalty": {
              "type": "number",
              "title": "Presence Penalty",
              "default": 0
            },
            "tools": {
              "type": "string",
              "title": "Tools"
            },
            "tool_choice": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/OpenAIToolChoice"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tool Choice"
            },
            "response_format": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Response Format"
            }
          },
          "type": "object",
          "title": "PromptRunSettings",
          "description": "Prompt run settings."
        },
        "PromptSampleIDs": {
          "properties": {
            "total_samples": {
              "type": "integer",
              "title": "Total Samples"
            },
            "sample_indices": {
              "additionalProperties": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              "propertyNames": {
                "format": "uuid4"
              },
              "type": "object",
              "title": "Sample Indices"
            }
          },
          "type": "object",
          "required": [
            "total_samples",
            "sample_indices"
          ],
          "title": "PromptSampleIDs"
        },
        "PutPromptScoreRequest": {
          "properties": {
            "metric_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metric Name"
            },
            "scores": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scores"
            },
            "indices": {
              "anyOf": [
                {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Indices"
            },
            "aggregates": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Aggregates"
            },
            "registered_scorer_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registered Scorer Id"
            }
          },
          "type": "object",
          "title": "PutPromptScoreRequest"
        },
        "PutPromptScoreResponse": {
          "properties": {
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "job_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Job Id"
            },
            "scorer_name": {
              "type": "string",
              "title": "Scorer Name"
            }
          },
          "type": "object",
          "required": [
            "project_id",
            "run_id",
            "job_id",
            "scorer_name"
          ],
          "title": "PutPromptScoreResponse"
        },
        "QueryDatasetParams": {
          "properties": {
            "filters": {
              "items": {
                "$ref": "#/components/schemas/DatasetContentFilter"
              },
              "type": "array",
              "title": "Filters"
            },
            "sort": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/DatasetContentSortClause"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "title": "QueryDatasetParams"
        },
        "QueryFilterV1": {
          "properties": {
            "col_name": {
              "type": "string",
              "title": "Col Name"
            },
            "value": {
              "title": "Value"
            },
            "operator": {
              "$ref": "#/components/schemas/Operator"
            },
            "json_field_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FieldType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "value_is_column": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Value Is Column",
              "default": false
            },
            "json_field": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Json Field"
            },
            "alternate_json_field": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Alternate Json Field"
            }
          },
          "type": "object",
          "required": [
            "col_name",
            "value",
            "operator"
          ],
          "title": "QueryFilterV1"
        },
        "QueryOrganizationParams": {
          "properties": {
            "filters": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/OrganizationNameFilter"
                  },
                  {
                    "$ref": "#/components/schemas/OrganizationIsMemberFilter"
                  }
                ],
                "discriminator": {
                  "propertyName": "name",
                  "mapping": {
                    "is_member": "#/components/schemas/OrganizationIsMemberFilter",
                    "name": "#/components/schemas/OrganizationNameFilter"
                  }
                }
              },
              "type": "array",
              "title": "Filters"
            },
            "sort": {
              "anyOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/OrganizationCreatedAtSort"
                    },
                    {
                      "$ref": "#/components/schemas/OrganizationNameSort"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "name",
                    "mapping": {
                      "created_at": "#/components/schemas/OrganizationCreatedAtSort",
                      "name": "#/components/schemas/OrganizationNameSort"
                    }
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sort",
              "default": {
                "name": "created_at",
                "ascending": false,
                "sort_type": "column"
              }
            }
          },
          "type": "object",
          "title": "QueryOrganizationParams"
        },
        "RangePromptFilterParam": {
          "properties": {
            "column": {
              "type": "string",
              "title": "Column"
            },
            "filter_type": {
              "type": "string",
              "const": "range",
              "title": "Filter Type"
            },
            "low": {
              "type": "number",
              "title": "Low"
            },
            "high": {
              "type": "number",
              "title": "High"
            }
          },
          "type": "object",
          "required": [
            "column",
            "filter_type",
            "low",
            "high"
          ],
          "title": "RangePromptFilterParam"
        },
        "RecomputeSettingsObserve-Output": {
          "properties": {
            "mode": {
              "type": "string",
              "const": "observe_filters",
              "title": "Mode",
              "default": "observe_filters"
            },
            "filters": {
              "items": {
  
              },
              "type": "array",
              "title": "Filters"
            }
          },
          "type": "object",
          "required": [
            "filters"
          ],
          "title": "RecomputeSettingsObserve"
        },
        "RecomputeSettingsProject": {
          "properties": {
            "mode": {
              "type": "string",
              "const": "project",
              "title": "Mode",
              "default": "project"
            }
          },
          "type": "object",
          "title": "RecomputeSettingsProject"
        },
        "RecomputeSettingsRuns": {
          "properties": {
            "mode": {
              "type": "string",
              "const": "runs",
              "title": "Mode",
              "default": "runs"
            },
            "run_ids": {
              "items": {
                "type": "string",
                "format": "uuid4"
              },
              "type": "array",
              "minItems": 1,
              "title": "Run Ids"
            }
          },
          "type": "object",
          "required": [
            "run_ids"
          ],
          "title": "RecomputeSettingsRuns"
        },
        "RegisteredScorer": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          },
          "type": "object",
          "title": "RegisteredScorer"
        },
        "RegisteredScorerAction": {
          "type": "string",
          "enum": [
            "update",
            "delete"
          ],
          "title": "RegisteredScorerAction"
        },
        "RegisteredScorerConfig": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the scorer to enable."
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "title": "RegisteredScorerConfig"
        },
        "RemoteEditExportRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "all_but": {
              "type": "boolean",
              "title": "All But",
              "default": false
            },
            "file_type": {
              "$ref": "#/components/schemas/FileType",
              "default": "csv"
            },
            "include_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include Cols",
              "default": []
            },
            "col_mapping": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Col Mapping",
              "default": {
  
              }
            },
            "hf_format": {
              "type": "boolean",
              "title": "Hf Format",
              "default": false
            },
            "tagging_schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaggingSchema"
                },
                {
                  "type": "null"
                }
              ]
            },
            "edit_ids": {
              "items": {
                "type": "string",
                "format": "uuid4"
              },
              "type": "array",
              "title": "Edit Ids"
            },
            "edit_overrides": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/EditOverride-Input"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Edit Overrides",
              "default": []
            },
            "only_export_edited": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Only Export Edited",
              "default": false
            },
            "min_reviews": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "title": "Min Reviews"
            },
            "bucket_name": {
              "type": "string",
              "title": "Bucket Name"
            },
            "object_name": {
              "type": "string",
              "title": "Object Name"
            },
            "export_to": {
              "type": "string",
              "title": "Export To",
              "default": "s3"
            }
          },
          "type": "object",
          "required": [
            "edit_ids",
            "bucket_name",
            "object_name"
          ],
          "title": "RemoteEditExportRequest"
        },
        "RemoteEditExportResponse": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "all_but": {
              "type": "boolean",
              "title": "All But",
              "default": false
            },
            "file_type": {
              "$ref": "#/components/schemas/FileType",
              "default": "csv"
            },
            "include_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include Cols",
              "default": []
            },
            "col_mapping": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Col Mapping",
              "default": {
  
              }
            },
            "hf_format": {
              "type": "boolean",
              "title": "Hf Format",
              "default": false
            },
            "tagging_schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaggingSchema"
                },
                {
                  "type": "null"
                }
              ]
            },
            "edit_ids": {
              "items": {
                "type": "string",
                "format": "uuid4"
              },
              "type": "array",
              "title": "Edit Ids"
            },
            "edit_overrides": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/EditOverride-Output"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Edit Overrides",
              "default": []
            },
            "only_export_edited": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Only Export Edited",
              "default": false
            },
            "min_reviews": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "title": "Min Reviews"
            },
            "bucket_name": {
              "type": "string",
              "title": "Bucket Name"
            },
            "object_name": {
              "type": "string",
              "title": "Object Name"
            },
            "export_to": {
              "type": "string",
              "title": "Export To",
              "default": "s3"
            }
          },
          "type": "object",
          "required": [
            "edit_ids",
            "bucket_name",
            "object_name"
          ],
          "title": "RemoteEditExportResponse"
        },
        "RemoteExportRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "all_but": {
              "type": "boolean",
              "title": "All But",
              "default": false
            },
            "file_type": {
              "$ref": "#/components/schemas/FileType",
              "default": "csv"
            },
            "include_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include Cols",
              "default": []
            },
            "col_mapping": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Col Mapping",
              "default": {
  
              }
            },
            "hf_format": {
              "type": "boolean",
              "title": "Hf Format",
              "default": false
            },
            "tagging_schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaggingSchema"
                },
                {
                  "type": "null"
                }
              ]
            },
            "bucket_name": {
              "type": "string",
              "title": "Bucket Name"
            },
            "object_name": {
              "type": "string",
              "title": "Object Name"
            },
            "export_to": {
              "type": "string",
              "title": "Export To",
              "default": "s3"
            }
          },
          "type": "object",
          "required": [
            "bucket_name",
            "object_name"
          ],
          "title": "RemoteExportRequest"
        },
        "RemoteExportResponse": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "all_but": {
              "type": "boolean",
              "title": "All But",
              "default": false
            },
            "file_type": {
              "$ref": "#/components/schemas/FileType",
              "default": "csv"
            },
            "include_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Include Cols",
              "default": []
            },
            "col_mapping": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Col Mapping",
              "default": {
  
              }
            },
            "hf_format": {
              "type": "boolean",
              "title": "Hf Format",
              "default": false
            },
            "tagging_schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaggingSchema"
                },
                {
                  "type": "null"
                }
              ]
            },
            "bucket_name": {
              "type": "string",
              "title": "Bucket Name"
            },
            "object_name": {
              "type": "string",
              "title": "Object Name"
            },
            "export_to": {
              "type": "string",
              "title": "Export To",
              "default": "s3"
            }
          },
          "type": "object",
          "required": [
            "bucket_name",
            "object_name"
          ],
          "title": "RemoteExportResponse"
        },
        "Request": {
          "properties": {
            "prioritized_rulesets": {
              "items": {
                "$ref": "#/components/schemas/Ruleset"
              },
              "type": "array",
              "title": "Prioritized Rulesets",
              "description": "Rulesets to be applied to the payload."
            },
            "payload": {
              "$ref": "#/components/schemas/Payload",
              "description": "Payload to be processed."
            },
            "project_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Name",
              "description": "Project name."
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id",
              "description": "Project ID."
            },
            "stage_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stage Name",
              "description": "Stage name."
            },
            "stage_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stage Id",
              "description": "Stage ID."
            },
            "stage_version": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stage Version",
              "description": "Stage version to use for the request, if it's a central stage with a previously registered version."
            },
            "timeout": {
              "type": "number",
              "title": "Timeout",
              "description": "Optional timeout for the guardrail execution in seconds. This is not the timeout for the request. If not set, a default timeout of 5 minutes will be used.",
              "default": 300
            },
            "metadata": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metadata",
              "description": "Optional additional metadata. This will be echoed back in the response."
            },
            "headers": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Headers",
              "description": "Optional additional HTTP headers that should be included in the response."
            }
          },
          "type": "object",
          "required": [
            "payload"
          ],
          "title": "Request"
        },
        "ResourceKind": {
          "type": "string",
          "enum": [
            "system_user",
            "user",
            "group",
            "group_member",
            "project",
            "integration",
            "registered_scorer",
            "generated_scorer",
            "api_key",
            "dataset",
            "stage",
            "stage_version",
            "organization",
            "usage_limit"
          ],
          "title": "ResourceKind"
        },
        "Response": {
          "properties": {
            "status": {
              "type": "string",
              "description": "Status of the request after processing the rules."
            },
            "text": {
              "type": "string",
              "title": "Text",
              "description": "Text from the request after processing the rules."
            },
            "trace_metadata": {
              "$ref": "#/components/schemas/TraceMetadata"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "text",
            "trace_metadata"
          ],
          "title": "Response"
        },
        "RetrieverSpan": {
          "properties": {
            "type": {
              "type": "string",
              "const": "retriever",
              "title": "Type",
              "description": "Type: must be `retriever`",
              "default": "retriever"
            },
            "input": {
              "type": "string",
              "title": "Input",
              "description": "Input query to the retriever."
            },
            "output": {
              "items": {
                "$ref": "#/components/schemas/Document-Input"
              },
              "type": "array",
              "title": "Output",
              "description": "Documents retrieved from the retriever."
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At",
              "description": "Timestamp of the step's creation"
            },
            "user_metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "User Metadata",
              "description": "Metadata associated with this step."
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Tags",
              "description": "Tags associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "metrics": {
              "$ref": "#/components/schemas/Metrics-Input",
              "description": "Metrics associated with this step."
            }
          },
          "type": "object",
          "required": [
            "input",
            "output"
          ],
          "title": "RetrieverSpan"
        },
        "RetrieverSpanRecord": {
          "properties": {
            "type": {
              "type": "string",
              "const": "retriever",
              "title": "Type",
              "description": "Type: must be `retriever`",
              "default": "retriever"
            },
            "input": {
              "type": "string",
              "title": "Input",
              "description": "Input query to the retriever."
            },
            "output": {
              "items": {
                "$ref": "#/components/schemas/Document-Output"
              },
              "type": "array",
              "title": "Output",
              "description": "Documents retrieved from the retriever."
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At",
              "description": "Timestamp of the step's creation"
            },
            "user_metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "User Metadata",
              "description": "Metadata associated with this step."
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Tags",
              "description": "Tags associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "metrics": {
              "$ref": "#/components/schemas/galileo_core__schemas__logging__step__Metrics",
              "description": "Metrics associated with this step."
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "ID",
              "description": "Galileo ID of the trace or span"
            },
            "trace_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Trace ID",
              "description": "Galileo ID of the trace containing the span (or the same value as id for a trace)"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project ID",
              "description": "Galileo ID of the project associated with this trace or span"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run ID",
              "description": "Galileo ID of the run (log stream or experiment) associated with this trace or span"
            },
            "updated_at": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Updated At",
              "description": "Timestamp of the trace or span's last update"
            },
            "has_children": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Has Children",
              "description": "Whether or not this trace or span has child spans"
            },
            "metrics_batch_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metrics Batch Id",
              "description": "Galileo ID of the metrics batch associated with this trace or span"
            },
            "metric_info": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TransactionMetricInfo"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Detailed information about the metrics associated with this trace or span"
            },
            "parent_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Parent ID",
              "description": "Galileo ID of the parent of this span"
            }
          },
          "type": "object",
          "required": [
            "input",
            "output",
            "id",
            "trace_id",
            "project_id",
            "run_id",
            "parent_id"
          ],
          "title": "RetrieverSpanRecord"
        },
        "RetrieverStep": {
          "properties": {
            "type": {
              "type": "string",
              "const": "retriever",
              "title": "Type",
              "description": "Type of the step. By default, it is set to retriever.",
              "default": "retriever"
            },
            "input": {
              "type": "string",
              "title": "Input",
              "description": "Input query to the retriever."
            },
            "output": {
              "items": {
                "$ref": "#/components/schemas/Document-Input"
              },
              "type": "array",
              "title": "Output",
              "description": "Documents retrieved from the retriever. This can be a list of strings or `Document`s."
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at_ns": {
              "type": "integer",
              "title": "Created At Ns",
              "description": "Timestamp of the step's creation, as nanoseconds since epoch."
            },
            "duration_ns": {
              "type": "integer",
              "title": "Duration Ns",
              "description": "Duration of the step in nanoseconds.",
              "default": 0
            },
            "metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "Metadata",
              "description": "Metadata associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "ground_truth": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ground Truth",
              "description": "Ground truth expected output for the step."
            }
          },
          "type": "object",
          "required": [
            "input"
          ],
          "title": "RetrieverStep"
        },
        "RollbackRequest": {
          "properties": {
            "rollback_version": {
              "type": "integer",
              "title": "Rollback Version"
            }
          },
          "type": "object",
          "required": [
            "rollback_version"
          ],
          "title": "RollbackRequest"
        },
        "RootModel_Sequence_WeeklyChangelog__": {
          "items": {
            "$ref": "#/components/schemas/WeeklyChangelog"
          },
          "type": "array",
          "title": "RootModel[Sequence[WeeklyChangelog]]"
        },
        "RootModel_Union_InferenceRunResults__SplitRunResults__": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/InferenceRunResults"
            },
            {
              "$ref": "#/components/schemas/SplitRunResults"
            }
          ],
          "title": "RootModel[Union[InferenceRunResults, SplitRunResults]]"
        },
        "RougeScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "rouge",
              "title": "Name",
              "default": "rouge"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            }
          },
          "type": "object",
          "title": "RougeScorer"
        },
        "Rule": {
          "properties": {
            "metric": {
              "type": "string",
              "title": "Metric",
              "description": "Name of the metric."
            },
            "operator": {
              "$ref": "#/components/schemas/RuleOperator",
              "description": "Operator to use for comparison."
            },
            "target_value": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "integer"
                },
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Target Value",
              "description": "Value to compare with for this metric (right hand side)."
            }
          },
          "type": "object",
          "required": [
            "metric",
            "operator",
            "target_value"
          ],
          "title": "Rule"
        },
        "RuleOperator": {
          "type": "string",
          "enum": [
            "gt",
            "lt",
            "gte",
            "lte",
            "eq",
            "neq",
            "contains",
            "all",
            "any",
            "empty",
            "not_empty"
          ],
          "title": "RuleOperator"
        },
        "RuleResult": {
          "properties": {
            "status": {
              "type": "string",
              "description": "Status of the execution."
            },
            "metric": {
              "type": "string",
              "title": "Metric",
              "description": "Name of the metric."
            },
            "operator": {
              "$ref": "#/components/schemas/RuleOperator",
              "description": "Operator to use for comparison."
            },
            "target_value": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "integer"
                },
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Target Value",
              "description": "Value to compare with for this metric (right hand side)."
            },
            "value": {
              "anyOf": [
                {
  
                },
                {
                  "type": "null"
                }
              ],
              "title": "Value",
              "description": "Result of the metric computation."
            },
            "execution_time": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Execution Time",
              "description": "Execution time for the rule in seconds."
            }
          },
          "type": "object",
          "required": [
            "metric",
            "operator",
            "target_value"
          ],
          "title": "RuleResult"
        },
        "Ruleset": {
          "properties": {
            "rules": {
              "items": {
                "$ref": "#/components/schemas/Rule"
              },
              "type": "array",
              "minItems": 1,
              "title": "Rules",
              "description": "List of rules to evaluate. Atleast 1 rule is required."
            },
            "action": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OverrideAction-Input"
                },
                {
                  "$ref": "#/components/schemas/PassthroughAction-Input"
                }
              ],
              "title": "Action",
              "description": "Action to take if all the rules are met.",
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "OVERRIDE": "#/components/schemas/OverrideAction-Input",
                  "PASSTHROUGH": "#/components/schemas/PassthroughAction-Input"
                }
              }
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description",
              "description": "Description of the ruleset."
            }
          },
          "type": "object",
          "title": "Ruleset"
        },
        "RulesetResult": {
          "properties": {
            "status": {
              "type": "string",
              "description": "Status of the execution."
            },
            "rules": {
              "items": {
                "$ref": "#/components/schemas/Rule"
              },
              "type": "array",
              "minItems": 1,
              "title": "Rules",
              "description": "List of rules to evaluate. Atleast 1 rule is required."
            },
            "action": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OverrideAction-Output"
                },
                {
                  "$ref": "#/components/schemas/PassthroughAction-Output"
                }
              ],
              "title": "Action",
              "description": "Action to take if all the rules are met.",
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "OVERRIDE": "#/components/schemas/OverrideAction-Output",
                  "PASSTHROUGH": "#/components/schemas/PassthroughAction-Output"
                }
              }
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description",
              "description": "Description of the ruleset."
            },
            "rule_results": {
              "items": {
                "$ref": "#/components/schemas/RuleResult"
              },
              "type": "array",
              "title": "Rule Results",
              "description": "Results of the rule execution."
            }
          },
          "type": "object",
          "title": "RulesetResult"
        },
        "RulesetsMixin": {
          "properties": {
            "prioritized_rulesets": {
              "items": {
                "$ref": "#/components/schemas/Ruleset"
              },
              "type": "array",
              "title": "Prioritized Rulesets",
              "description": "Rulesets to be applied to the payload."
            }
          },
          "type": "object",
          "title": "RulesetsMixin"
        },
        "RunCreate": {
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "title": "Name"
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            },
            "num_samples": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Samples"
            },
            "winner": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Winner"
            },
            "dataset_hash": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Dataset Hash"
            },
            "task_type": {
              "type": "integer",
              "title": "Task Type"
            },
            "run_tags": {
              "items": {
                "$ref": "#/components/schemas/RunTagCreateRequest"
              },
              "type": "array",
              "title": "Run Tags"
            }
          },
          "type": "object",
          "required": [
            "name",
            "task_type"
          ],
          "title": "RunCreate"
        },
        "RunDB": {
          "properties": {
            "name": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            },
            "created_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Created By"
            },
            "num_samples": {
              "type": "integer",
              "title": "Num Samples"
            },
            "winner": {
              "type": "boolean",
              "title": "Winner"
            },
            "dataset_hash": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Dataset Hash"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "task_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaskType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "last_updated_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Last Updated By"
            },
            "run_tags": {
              "items": {
                "$ref": "#/components/schemas/RunTagDB"
              },
              "type": "array",
              "title": "Run Tags"
            },
            "example_content_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Example Content Id"
            },
            "creator": {
              "$ref": "#/components/schemas/UserDB"
            },
            "logged_splits": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Logged Splits"
            },
            "logged_inference_names": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Logged Inference Names"
            }
          },
          "type": "object",
          "required": [
            "created_by",
            "num_samples",
            "winner",
            "id",
            "created_at",
            "updated_at",
            "last_updated_by",
            "creator",
            "logged_splits",
            "logged_inference_names"
          ],
          "title": "RunDB"
        },
        "RunDBThin": {
          "properties": {
            "name": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            },
            "created_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Created By"
            },
            "num_samples": {
              "type": "integer",
              "title": "Num Samples"
            },
            "winner": {
              "type": "boolean",
              "title": "Winner"
            },
            "dataset_hash": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Dataset Hash"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "task_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaskType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "last_updated_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Last Updated By"
            },
            "run_tags": {
              "items": {
                "$ref": "#/components/schemas/RunTagDB"
              },
              "type": "array",
              "title": "Run Tags"
            },
            "example_content_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Example Content Id"
            },
            "creator": {
              "$ref": "#/components/schemas/UserDB"
            }
          },
          "type": "object",
          "required": [
            "created_by",
            "num_samples",
            "winner",
            "id",
            "created_at",
            "updated_at",
            "last_updated_by",
            "creator"
          ],
          "title": "RunDBThin"
        },
        "RunDBThinWithProjectName": {
          "properties": {
            "name": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            },
            "created_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Created By"
            },
            "num_samples": {
              "type": "integer",
              "title": "Num Samples"
            },
            "winner": {
              "type": "boolean",
              "title": "Winner"
            },
            "dataset_hash": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Dataset Hash"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "task_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaskType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "last_updated_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Last Updated By"
            },
            "run_tags": {
              "items": {
                "$ref": "#/components/schemas/RunTagDB"
              },
              "type": "array",
              "title": "Run Tags"
            },
            "example_content_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Example Content Id"
            },
            "creator": {
              "$ref": "#/components/schemas/UserDB"
            },
            "project_name": {
              "type": "string",
              "title": "Project Name"
            }
          },
          "type": "object",
          "required": [
            "created_by",
            "num_samples",
            "winner",
            "id",
            "created_at",
            "updated_at",
            "last_updated_by",
            "creator",
            "project_name"
          ],
          "title": "RunDBThinWithProjectName"
        },
        "RunLinkResponse": {
          "properties": {
            "link": {
              "type": "string",
              "title": "Link"
            }
          },
          "type": "object",
          "required": [
            "link"
          ],
          "title": "RunLinkResponse"
        },
        "RunMetricCreateRequest": {
          "properties": {
            "key": {
              "type": "string",
              "title": "Key"
            },
            "value": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Value"
            },
            "object_value": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FeedbackAggregate"
                },
                {
                  "type": "null"
                }
              ]
            },
            "epoch": {
              "type": "integer",
              "title": "Epoch",
              "default": 0
            },
            "extra": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            }
          },
          "type": "object",
          "required": [
            "key"
          ],
          "title": "RunMetricCreateRequest"
        },
        "RunMetricDB": {
          "properties": {
            "key": {
              "type": "string",
              "title": "Key"
            },
            "value": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Value"
            },
            "object_value": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FeedbackAggregate"
                },
                {
                  "type": "null"
                }
              ]
            },
            "epoch": {
              "type": "integer",
              "title": "Epoch",
              "default": 0
            },
            "extra": {
              "anyOf": [
                {
                  "items": {
  
                  },
                  "type": "array"
                },
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            }
          },
          "type": "object",
          "required": [
            "key",
            "run_id",
            "created_at",
            "updated_at"
          ],
          "title": "RunMetricDB"
        },
        "RunParamsMap": {
          "properties": {
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model"
            },
            "temperature": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Temperature"
            },
            "max_tokens": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max Tokens"
            },
            "stop_sequences": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Stop Sequences"
            },
            "top_p": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Top P"
            },
            "top_k": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Top K"
            },
            "frequency_penalty": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Frequency Penalty"
            },
            "presence_penalty": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Presence Penalty"
            },
            "echo": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Echo"
            },
            "logprobs": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Logprobs"
            },
            "top_logprobs": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Top Logprobs"
            },
            "n": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "N"
            },
            "api_version": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Api Version"
            },
            "tools": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tools"
            },
            "tool_choice": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tool Choice"
            },
            "response_format": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Response Format"
            },
            "deployment_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Deployment Name"
            }
          },
          "type": "object",
          "title": "RunParamsMap",
          "description": "Maps the internal settings parameters (left) to the serialized parameters (right) we want to send in the API\nrequests."
        },
        "RunResults": {
          "properties": {
            "split_total_sample_count": {
              "type": "integer",
              "title": "Split Total Sample Count"
            },
            "split_total_span_count": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Split Total Span Count"
            },
            "sample_count": {
              "type": "integer",
              "title": "Sample Count"
            },
            "span_count": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Span Count"
            },
            "sample_hard_percentage": {
              "type": "number",
              "title": "Sample Hard Percentage"
            },
            "sample_easy_percentage": {
              "type": "number",
              "title": "Sample Easy Percentage"
            },
            "sample_misclassified_percentage": {
              "type": "number",
              "title": "Sample Misclassified Percentage"
            },
            "has_next_page": {
              "type": "boolean",
              "title": "Has Next Page"
            },
            "data_metrics": {
              "items": {
                "$ref": "#/components/schemas/DataRow"
              },
              "type": "array",
              "title": "Data Metrics",
              "default": []
            },
            "labels": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Labels"
            },
            "hard_samples_threshold": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Hard Samples Threshold"
            },
            "easy_samples_threshold": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Easy Samples Threshold"
            },
            "top_erroneous_words": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "integer"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Top Erroneous Words"
            }
          },
          "type": "object",
          "required": [
            "split_total_sample_count",
            "sample_count",
            "sample_hard_percentage",
            "sample_easy_percentage",
            "sample_misclassified_percentage",
            "has_next_page",
            "labels"
          ],
          "title": "RunResults"
        },
        "RunScorerSettingsRequest-Input": {
          "properties": {
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id",
              "description": "ID of the run."
            },
            "scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerConfig"
              },
              "type": "array",
              "title": "Scorers",
              "description": "List of Galileo scorers to enable."
            }
          },
          "type": "object",
          "required": [
            "run_id"
          ],
          "title": "RunScorerSettingsRequest"
        },
        "RunScorerSettingsRequest-Output": {
          "properties": {
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id",
              "description": "ID of the run."
            },
            "scorers": {
              "items": {
                "$ref": "#/components/schemas/ScorerConfig"
              },
              "type": "array",
              "title": "Scorers",
              "description": "List of Galileo scorers to enable."
            }
          },
          "type": "object",
          "required": [
            "run_id"
          ],
          "title": "RunScorerSettingsRequest"
        },
        "RunTagCreateRequest": {
          "properties": {
            "key": {
              "type": "string",
              "maxLength": 256,
              "title": "Key"
            },
            "value": {
              "type": "string",
              "maxLength": 256,
              "title": "Value"
            },
            "tag_type": {
              "type": "string",
              "title": "Tag Type"
            }
          },
          "type": "object",
          "required": [
            "key",
            "value",
            "tag_type"
          ],
          "title": "RunTagCreateRequest"
        },
        "RunTagDB": {
          "properties": {
            "key": {
              "type": "string",
              "maxLength": 256,
              "title": "Key"
            },
            "value": {
              "type": "string",
              "maxLength": 256,
              "title": "Value"
            },
            "tag_type": {
              "type": "string",
              "title": "Tag Type"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "created_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Created By"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            }
          },
          "type": "object",
          "required": [
            "key",
            "value",
            "tag_type",
            "project_id",
            "run_id",
            "created_by",
            "id",
            "created_at",
            "updated_at"
          ],
          "title": "RunTagDB"
        },
        "RunUpdateRequest": {
          "properties": {
            "name": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          },
          "type": "object",
          "title": "RunUpdateRequest"
        },
        "ScoreAggregate": {
          "properties": {
            "feedback_type": {
              "type": "string",
              "const": "score",
              "title": "Feedback Type",
              "default": "score"
            },
            "average": {
              "type": "number",
              "title": "Average"
            },
            "unrated_count": {
              "type": "integer",
              "title": "Unrated Count"
            }
          },
          "type": "object",
          "required": [
            "average",
            "unrated_count"
          ],
          "title": "ScoreAggregate"
        },
        "ScoreConstraints": {
          "properties": {
            "feedback_type": {
              "type": "string",
              "const": "score",
              "title": "Feedback Type"
            },
            "min": {
              "type": "integer",
              "minimum": 0,
              "title": "Min"
            },
            "max": {
              "type": "integer",
              "minimum": 0,
              "title": "Max"
            }
          },
          "type": "object",
          "required": [
            "feedback_type",
            "min",
            "max"
          ],
          "title": "ScoreConstraints"
        },
        "ScoreRating": {
          "properties": {
            "feedback_type": {
              "type": "string",
              "const": "score",
              "title": "Feedback Type",
              "default": "score"
            },
            "value": {
              "type": "integer",
              "title": "Value"
            }
          },
          "type": "object",
          "required": [
            "value"
          ],
          "title": "ScoreRating"
        },
        "ScorerConfig": {
          "properties": {
            "model_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Name"
            },
            "num_judges": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Judges"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            },
            "scorer_type": {
              "$ref": "#/components/schemas/ScorerTypes"
            },
            "model_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ModelType"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Type of model to use for this scorer. slm maps to luna, and llm maps to plus"
            }
          },
          "type": "object",
          "required": [
            "id",
            "scorer_type"
          ],
          "title": "ScorerConfig",
          "description": "Used for configuring a scorer for a scorer job."
        },
        "ScorerCreatedAtFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "created_at",
              "title": "Name",
              "default": "created_at"
            },
            "value": {
              "type": "string",
              "format": "date-time",
              "title": "Value"
            },
            "operator": {
              "type": "string",
              "enum": [
                "eq",
                "ne",
                "gt",
                "gte",
                "lt",
                "lte"
              ],
              "title": "Operator"
            }
          },
          "type": "object",
          "required": [
            "value",
            "operator"
          ],
          "title": "ScorerCreatedAtFilter"
        },
        "ScorerCreatorFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "creator",
              "title": "Name",
              "default": "creator"
            },
            "value": {
              "type": "string",
              "format": "uuid4",
              "title": "Value"
            }
          },
          "type": "object",
          "required": [
            "value"
          ],
          "title": "ScorerCreatorFilter"
        },
        "ScorerDefaults": {
          "properties": {
            "model_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Name"
            },
            "num_judges": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Judges"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            }
          },
          "type": "object",
          "title": "ScorerDefaults"
        },
        "ScorerName": {
          "type": "string",
          "enum": [
            "_completeness_gpt",
            "_context_relevance",
            "_chunk_attribution_utilization_gpt",
            "_factuality",
            "_groundedness",
            "_latency",
            "_prompt_perplexity",
            "_protect_status",
            "_pii",
            "_input_pii",
            "_sexist",
            "_input_sexist",
            "_tone",
            "_input_tone",
            "_toxicity",
            "_input_toxicity",
            "_user_registered",
            "_user_submitted",
            "_user_generated",
            "_uncertainty",
            "_bleu",
            "_cost",
            "_rouge",
            "_prompt_injection",
            "_rag_nli",
            "_adherence_nli",
            "_completeness_nli",
            "_chunk_attribution_utilization_nli",
            "_instruction_adherence",
            "_ground_truth_adherence",
            "_tool_selection_quality",
            "_tool_error_rate",
            "_agentic_session_success",
            "_agentic_workflow_success",
            "_generic_wizard",
            "_customized_completeness_gpt",
            "_customized_factuality",
            "_customized_groundedness",
            "_customized_chunk_attribution_utilization_gpt",
            "_customized_instruction_adherence",
            "_customized_ground_truth_adherence",
            "_customized_tool_selection_quality",
            "_customized_tool_error_rate",
            "_customized_agentic_session_success",
            "_customized_agentic_workflow_success"
          ],
          "title": "ScorerName"
        },
        "ScorerNameFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "name",
              "title": "Name",
              "default": "name"
            },
            "operator": {
              "type": "string",
              "enum": [
                "eq",
                "ne",
                "contains",
                "one_of",
                "not_in"
              ],
              "title": "Operator"
            },
            "value": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ],
              "title": "Value"
            },
            "case_sensitive": {
              "type": "boolean",
              "title": "Case Sensitive",
              "default": true
            }
          },
          "type": "object",
          "required": [
            "operator",
            "value"
          ],
          "title": "ScorerNameFilter"
        },
        "ScorerResponse": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "name": {
              "type": "string",
              "title": "Name"
            },
            "scorer_type": {
              "$ref": "#/components/schemas/ScorerTypes"
            },
            "defaults": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorerDefaults"
                },
                {
                  "type": "null"
                }
              ]
            },
            "latest_version": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BaseScorerVersionResponse"
                },
                {
                  "type": "null"
                }
              ]
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Tags"
            },
            "included_fields": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Included Fields",
              "description": "Fields that can be used in the scorer to configure it. i.e. model, num_judges, etc. This enables the ui to know which fields a user can configure when they're setting a scorer"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            },
            "created_at": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created At"
            },
            "updated_at": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Updated At"
            }
          },
          "type": "object",
          "required": [
            "id",
            "name",
            "scorer_type",
            "tags"
          ],
          "title": "ScorerResponse"
        },
        "ScorerTagsFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "tags",
              "title": "Name",
              "default": "tags"
            },
            "value": {
              "type": "string",
              "title": "Value"
            },
            "operator": {
              "type": "string",
              "enum": [
                "contains",
                "not_in"
              ],
              "title": "Operator"
            }
          },
          "type": "object",
          "required": [
            "value",
            "operator"
          ],
          "title": "ScorerTagsFilter"
        },
        "ScorerType": {
          "type": "string",
          "enum": [
            "Luna",
            "Plus"
          ],
          "title": "ScorerType"
        },
        "ScorerTypeFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "scorer_type",
              "title": "Name",
              "default": "scorer_type"
            },
            "value": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorerTypes"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/ScorerTypes"
                  },
                  "type": "array"
                }
              ],
              "title": "Value"
            },
            "operator": {
              "type": "string",
              "enum": [
                "eq",
                "ne",
                "one_of",
                "not_in"
              ],
              "title": "Operator"
            }
          },
          "type": "object",
          "required": [
            "value",
            "operator"
          ],
          "title": "ScorerTypeFilter"
        },
        "ScorerTypes": {
          "type": "string",
          "enum": [
            "llm",
            "code",
            "preset"
          ],
          "title": "ScorerTypes"
        },
        "ScorerUpdatedAtFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "updated_at",
              "title": "Name",
              "default": "updated_at"
            },
            "value": {
              "type": "string",
              "format": "date-time",
              "title": "Value"
            },
            "operator": {
              "type": "string",
              "enum": [
                "eq",
                "ne",
                "gt",
                "gte",
                "lt",
                "lte"
              ],
              "title": "Operator"
            }
          },
          "type": "object",
          "required": [
            "value",
            "operator"
          ],
          "title": "ScorerUpdatedAtFilter"
        },
        "ScorersConfig-Input": {
          "properties": {
            "scorers": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AgenticWorkflowSuccessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/AgenticSessionSuccessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/BleuScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ChunkAttributionUtilizationScorer"
                  },
                  {
                    "$ref": "#/components/schemas/CompletenessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ContextAdherenceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ContextRelevanceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/CorrectnessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/GroundTruthAdherenceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputPIIScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputSexistScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputToneScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputToxicityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InstructionAdherenceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputPIIScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputSexistScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputToneScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputToxicityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/PromptInjectionScorer"
                  },
                  {
                    "$ref": "#/components/schemas/PromptPerplexityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/RougeScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ToolErrorRateScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ToolSelectionQualityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/UncertaintyScorer"
                  }
                ],
                "discriminator": {
                  "propertyName": "name",
                  "mapping": {
                    "agentic_session_success": "#/components/schemas/AgenticSessionSuccessScorer",
                    "agentic_workflow_success": "#/components/schemas/AgenticWorkflowSuccessScorer",
                    "bleu": "#/components/schemas/BleuScorer",
                    "chunk_attribution_utilization": "#/components/schemas/ChunkAttributionUtilizationScorer",
                    "completeness": "#/components/schemas/CompletenessScorer",
                    "context_adherence": "#/components/schemas/ContextAdherenceScorer",
                    "context_relevance": "#/components/schemas/ContextRelevanceScorer",
                    "correctness": "#/components/schemas/CorrectnessScorer",
                    "ground_truth_adherence": "#/components/schemas/GroundTruthAdherenceScorer",
                    "input_pii": "#/components/schemas/InputPIIScorer",
                    "input_sexist": "#/components/schemas/InputSexistScorer",
                    "input_tone": "#/components/schemas/InputToneScorer",
                    "input_toxicity": "#/components/schemas/InputToxicityScorer",
                    "instruction_adherence": "#/components/schemas/InstructionAdherenceScorer",
                    "output_pii": "#/components/schemas/OutputPIIScorer",
                    "output_sexist": "#/components/schemas/OutputSexistScorer",
                    "output_tone": "#/components/schemas/OutputToneScorer",
                    "output_toxicity": "#/components/schemas/OutputToxicityScorer",
                    "prompt_injection": "#/components/schemas/PromptInjectionScorer",
                    "prompt_perplexity": "#/components/schemas/PromptPerplexityScorer",
                    "rouge": "#/components/schemas/RougeScorer",
                    "tool_error_rate": "#/components/schemas/ToolErrorRateScorer",
                    "tool_selection_quality": "#/components/schemas/ToolSelectionQualityScorer",
                    "uncertainty": "#/components/schemas/UncertaintyScorer"
                  }
                }
              },
              "type": "array",
              "title": "Scorers",
              "description": "List of Galileo scorers to enable."
            },
            "registered_scorers": {
              "items": {
                "$ref": "#/components/schemas/RegisteredScorer"
              },
              "type": "array",
              "title": "Registered Scorers",
              "description": "List of user registered scorers to enable."
            },
            "generated_scorers": {
              "items": {
                "$ref": "#/components/schemas/GeneratedScorer"
              },
              "type": "array",
              "title": "Generated Scorers",
              "description": "List of user generated scorers to enable."
            }
          },
          "type": "object",
          "title": "ScorersConfig"
        },
        "ScorersConfig-Output": {
          "properties": {
            "scorers": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AgenticWorkflowSuccessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/AgenticSessionSuccessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/BleuScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ChunkAttributionUtilizationScorer"
                  },
                  {
                    "$ref": "#/components/schemas/CompletenessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ContextAdherenceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ContextRelevanceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/CorrectnessScorer"
                  },
                  {
                    "$ref": "#/components/schemas/GroundTruthAdherenceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputPIIScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputSexistScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputToneScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InputToxicityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/InstructionAdherenceScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputPIIScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputSexistScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputToneScorer"
                  },
                  {
                    "$ref": "#/components/schemas/OutputToxicityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/PromptInjectionScorer"
                  },
                  {
                    "$ref": "#/components/schemas/PromptPerplexityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/RougeScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ToolErrorRateScorer"
                  },
                  {
                    "$ref": "#/components/schemas/ToolSelectionQualityScorer"
                  },
                  {
                    "$ref": "#/components/schemas/UncertaintyScorer"
                  }
                ],
                "discriminator": {
                  "propertyName": "name",
                  "mapping": {
                    "agentic_session_success": "#/components/schemas/AgenticSessionSuccessScorer",
                    "agentic_workflow_success": "#/components/schemas/AgenticWorkflowSuccessScorer",
                    "bleu": "#/components/schemas/BleuScorer",
                    "chunk_attribution_utilization": "#/components/schemas/ChunkAttributionUtilizationScorer",
                    "completeness": "#/components/schemas/CompletenessScorer",
                    "context_adherence": "#/components/schemas/ContextAdherenceScorer",
                    "context_relevance": "#/components/schemas/ContextRelevanceScorer",
                    "correctness": "#/components/schemas/CorrectnessScorer",
                    "ground_truth_adherence": "#/components/schemas/GroundTruthAdherenceScorer",
                    "input_pii": "#/components/schemas/InputPIIScorer",
                    "input_sexist": "#/components/schemas/InputSexistScorer",
                    "input_tone": "#/components/schemas/InputToneScorer",
                    "input_toxicity": "#/components/schemas/InputToxicityScorer",
                    "instruction_adherence": "#/components/schemas/InstructionAdherenceScorer",
                    "output_pii": "#/components/schemas/OutputPIIScorer",
                    "output_sexist": "#/components/schemas/OutputSexistScorer",
                    "output_tone": "#/components/schemas/OutputToneScorer",
                    "output_toxicity": "#/components/schemas/OutputToxicityScorer",
                    "prompt_injection": "#/components/schemas/PromptInjectionScorer",
                    "prompt_perplexity": "#/components/schemas/PromptPerplexityScorer",
                    "rouge": "#/components/schemas/RougeScorer",
                    "tool_error_rate": "#/components/schemas/ToolErrorRateScorer",
                    "tool_selection_quality": "#/components/schemas/ToolSelectionQualityScorer",
                    "uncertainty": "#/components/schemas/UncertaintyScorer"
                  }
                }
              },
              "type": "array",
              "title": "Scorers",
              "description": "List of Galileo scorers to enable."
            },
            "registered_scorers": {
              "items": {
                "$ref": "#/components/schemas/RegisteredScorer"
              },
              "type": "array",
              "title": "Registered Scorers",
              "description": "List of user registered scorers to enable."
            },
            "generated_scorers": {
              "items": {
                "$ref": "#/components/schemas/GeneratedScorer"
              },
              "type": "array",
              "title": "Generated Scorers",
              "description": "List of user generated scorers to enable."
            }
          },
          "type": "object",
          "title": "ScorersConfig"
        },
        "ScorersConfiguration": {
          "properties": {
            "latency": {
              "type": "boolean",
              "title": "Latency",
              "default": true
            },
            "cost": {
              "type": "boolean",
              "title": "Cost",
              "default": true
            },
            "pii": {
              "type": "boolean",
              "title": "Pii",
              "default": false
            },
            "input_pii": {
              "type": "boolean",
              "title": "Input Pii",
              "default": false
            },
            "bleu": {
              "type": "boolean",
              "title": "Bleu",
              "default": true
            },
            "rouge": {
              "type": "boolean",
              "title": "Rouge",
              "default": true
            },
            "protect_status": {
              "type": "boolean",
              "title": "Protect Status",
              "default": true
            },
            "context_relevance": {
              "type": "boolean",
              "title": "Context Relevance",
              "default": false
            },
            "toxicity": {
              "type": "boolean",
              "title": "Toxicity",
              "default": false
            },
            "input_toxicity": {
              "type": "boolean",
              "title": "Input Toxicity",
              "default": false
            },
            "tone": {
              "type": "boolean",
              "title": "Tone",
              "default": false
            },
            "input_tone": {
              "type": "boolean",
              "title": "Input Tone",
              "default": false
            },
            "sexist": {
              "type": "boolean",
              "title": "Sexist",
              "default": false
            },
            "input_sexist": {
              "type": "boolean",
              "title": "Input Sexist",
              "default": false
            },
            "prompt_injection": {
              "type": "boolean",
              "title": "Prompt Injection",
              "default": false
            },
            "adherence_nli": {
              "type": "boolean",
              "title": "Adherence Nli",
              "default": false
            },
            "chunk_attribution_utilization_nli": {
              "type": "boolean",
              "title": "Chunk Attribution Utilization Nli",
              "default": false
            },
            "completeness_nli": {
              "type": "boolean",
              "title": "Completeness Nli",
              "default": false
            },
            "uncertainty": {
              "type": "boolean",
              "title": "Uncertainty",
              "default": false
            },
            "factuality": {
              "type": "boolean",
              "title": "Factuality",
              "default": false
            },
            "groundedness": {
              "type": "boolean",
              "title": "Groundedness",
              "default": false
            },
            "prompt_perplexity": {
              "type": "boolean",
              "title": "Prompt Perplexity",
              "default": false
            },
            "chunk_attribution_utilization_gpt": {
              "type": "boolean",
              "title": "Chunk Attribution Utilization Gpt",
              "default": false
            },
            "completeness_gpt": {
              "type": "boolean",
              "title": "Completeness Gpt",
              "default": false
            },
            "instruction_adherence": {
              "type": "boolean",
              "title": "Instruction Adherence",
              "default": false
            },
            "ground_truth_adherence": {
              "type": "boolean",
              "title": "Ground Truth Adherence",
              "default": false
            },
            "tool_selection_quality": {
              "type": "boolean",
              "title": "Tool Selection Quality",
              "default": false
            },
            "tool_error_rate": {
              "type": "boolean",
              "title": "Tool Error Rate",
              "default": false
            },
            "agentic_session_success": {
              "type": "boolean",
              "title": "Agentic Session Success",
              "default": false
            },
            "agentic_workflow_success": {
              "type": "boolean",
              "title": "Agentic Workflow Success",
              "default": false
            }
          },
          "type": "object",
          "title": "ScorersConfiguration",
          "description": "Configure which scorers to enable for a particular prompt run.\n\nThe keys here are sorted by their approximate execution time to execute the scorers that we anticipate will be the\nfastest first, and the slowest last."
        },
        "Segment": {
          "properties": {
            "start": {
              "type": "integer",
              "title": "Start"
            },
            "end": {
              "type": "integer",
              "title": "End"
            },
            "value": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "title": "Value"
            },
            "prob": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Prob"
            }
          },
          "type": "object",
          "required": [
            "start",
            "end",
            "value"
          ],
          "title": "Segment"
        },
        "SegmentationMetricsResponse": {
          "properties": {
            "mean_iou": {
              "type": "number",
              "title": "Mean Iou"
            },
            "boundary_iou": {
              "type": "number",
              "title": "Boundary Iou"
            },
            "dice_coefficient": {
              "type": "number",
              "title": "Dice Coefficient"
            },
            "mean_iou_per_class": {
              "$ref": "#/components/schemas/BarChart"
            },
            "boundary_iou_per_class": {
              "$ref": "#/components/schemas/BarChart"
            },
            "dice_per_class": {
              "$ref": "#/components/schemas/BarChart"
            }
          },
          "type": "object",
          "required": [
            "mean_iou",
            "boundary_iou",
            "dice_coefficient",
            "mean_iou_per_class",
            "boundary_iou_per_class",
            "dice_per_class"
          ],
          "title": "SegmentationMetricsResponse",
          "description": "The main metric for Semantic Segmentation.\n\nIoU, or Intersection over Union, is an Semantic Segmentation metric that provides you with a general sense of the\nperformance of your model.\n\nIoU is defined as the intersection of the predicted and ground truth masks Mean IoU is the average IoU across all\nclasses Boundary IoU is the IoU for the boundary of the mask, which protects against   bias towards larger masks\nhttps://learnopencv.com/intersection-over-union-iou-in-object-detection-and-segmentation/"
        },
        "SemSegErrorType": {
          "type": "string",
          "enum": [
            "class_confusion",
            "classification",
            "background",
            "missed",
            "None"
          ],
          "title": "SemSegErrorType"
        },
        "Seq2SeqMetricsResponse": {
          "properties": {
            "average_data_error_potential": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Data Error Potential"
            },
            "average_bleu": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Bleu"
            },
            "average_rouge": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Average Rouge"
            }
          },
          "type": "object",
          "title": "Seq2SeqMetricsResponse",
          "description": "Returns Seq2Seq specific metrics.\n\nBleu and Rouge are the most common metrics for Seq2Seq models We also include average data error potential"
        },
        "Seq2SeqSegment": {
          "properties": {
            "start": {
              "type": "integer",
              "title": "Start"
            },
            "end": {
              "type": "integer",
              "title": "End"
            },
            "data_error_potential": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Data Error Potential"
            },
            "generated_uncertainty": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Generated Uncertainty"
            },
            "top_k_tokens": {
              "items": {
                "$ref": "#/components/schemas/TopKToken"
              },
              "type": "array",
              "title": "Top K Tokens",
              "default": []
            },
            "segment_probability": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Segment Probability"
            }
          },
          "type": "object",
          "required": [
            "start",
            "end"
          ],
          "title": "Seq2SeqSegment"
        },
        "SimilarToResponse": {
          "properties": {
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "split": {
              "$ref": "#/components/schemas/Split"
            },
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "inference_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Inference Name"
            },
            "from_split": {
              "$ref": "#/components/schemas/Split"
            },
            "from_inference_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "From Inference Name"
            },
            "similar_ids": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Similar Ids"
            }
          },
          "type": "object",
          "required": [
            "project_id",
            "run_id",
            "split",
            "from_split",
            "similar_ids"
          ],
          "title": "SimilarToResponse"
        },
        "SliceCreate": {
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "title": "Name"
            },
            "logic": {
              "$ref": "#/components/schemas/FilterParams"
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            }
          },
          "type": "object",
          "required": [
            "name",
            "logic"
          ],
          "title": "SliceCreate"
        },
        "SliceCreateResponse": {
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "title": "Name"
            },
            "logic": {
              "$ref": "#/components/schemas/FilterParams"
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            }
          },
          "type": "object",
          "required": [
            "name",
            "logic",
            "id",
            "created_at",
            "updated_at"
          ],
          "title": "SliceCreateResponse"
        },
        "SliceDB": {
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "title": "Name"
            },
            "logic": {
              "$ref": "#/components/schemas/FilterParams"
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            }
          },
          "type": "object",
          "required": [
            "name",
            "logic",
            "id",
            "created_at",
            "updated_at"
          ],
          "title": "SliceDB"
        },
        "SliceDeleteResponse": {
          "properties": {
            "message": {
              "type": "string",
              "title": "Message"
            }
          },
          "type": "object",
          "required": [
            "message"
          ],
          "title": "SliceDeleteResponse"
        },
        "SliceMetrics": {
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "title": "Name"
            },
            "logic": {
              "$ref": "#/components/schemas/FilterParams"
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            },
            "metrics": {
              "$ref": "#/components/schemas/ModelMetrics"
            }
          },
          "type": "object",
          "required": [
            "name",
            "logic",
            "metrics"
          ],
          "title": "SliceMetrics"
        },
        "SliceUpdate": {
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "title": "Name"
            },
            "logic": {
              "$ref": "#/components/schemas/FilterParams"
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            }
          },
          "type": "object",
          "required": [
            "name",
            "logic"
          ],
          "title": "SliceUpdate"
        },
        "SliceUpdateResponse": {
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "title": "Name"
            },
            "logic": {
              "$ref": "#/components/schemas/FilterParams"
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            },
            "created_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created By"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            }
          },
          "type": "object",
          "required": [
            "name",
            "logic",
            "id",
            "created_at",
            "updated_at"
          ],
          "title": "SliceUpdateResponse"
        },
        "SocialLoginRequest": {
          "properties": {
            "id_token": {
              "type": "string",
              "title": "Id Token"
            },
            "provider": {
              "$ref": "#/components/schemas/SocialProvider"
            }
          },
          "type": "object",
          "required": [
            "id_token",
            "provider"
          ],
          "title": "SocialLoginRequest"
        },
        "SocialProvider": {
          "type": "string",
          "enum": [
            "google",
            "github",
            "okta",
            "azure-ad",
            "custom"
          ],
          "title": "SocialProvider"
        },
        "SortClause": {
          "properties": {
            "col_name": {
              "type": "string",
              "title": "Col Name"
            },
            "sort_dir": {
              "$ref": "#/components/schemas/SortDirection"
            },
            "json_field": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Json Field"
            },
            "json_field_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FieldType"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "required": [
            "col_name",
            "sort_dir"
          ],
          "title": "SortClause"
        },
        "SortDirection": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "title": "SortDirection"
        },
        "Span": {
          "properties": {
            "id": {
              "type": "integer",
              "title": "Id"
            },
            "span_start": {
              "type": "integer",
              "title": "Span Start"
            },
            "span_end": {
              "type": "integer",
              "title": "Span End"
            },
            "gold": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Gold"
            },
            "pred": {
              "type": "string",
              "title": "Pred"
            },
            "data_error_potential": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Data Error Potential"
            },
            "confidence": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Confidence"
            },
            "x": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X"
            },
            "y": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Y"
            },
            "is_active": {
              "type": "boolean",
              "title": "Is Active"
            },
            "error_type": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Error Type"
            },
            "is_on_the_boundary": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is On The Boundary"
            },
            "is_drifted": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Drifted"
            }
          },
          "type": "object",
          "required": [
            "id",
            "span_start",
            "span_end",
            "pred",
            "is_active"
          ],
          "title": "Span"
        },
        "Split": {
          "type": "string",
          "enum": [
            "training",
            "validation",
            "test",
            "inference"
          ],
          "title": "Split"
        },
        "SplitRunResults": {
          "properties": {
            "split_name": {
              "$ref": "#/components/schemas/Split"
            },
            "split_run_results": {
              "$ref": "#/components/schemas/RunResults"
            }
          },
          "type": "object",
          "required": [
            "split_name",
            "split_run_results"
          ],
          "title": "SplitRunResults"
        },
        "StageDB": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the stage. Must be unique within the project."
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id",
              "description": "ID of the project to which this stage belongs."
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description",
              "description": "Optional human-readable description of the goals of this guardrail."
            },
            "type": {
              "$ref": "#/components/schemas/StageType",
              "description": "Type of the stage.",
              "default": "local"
            },
            "paused": {
              "type": "boolean",
              "title": "Paused",
              "description": "Whether the action is enabled. If False, the action will not be applied.",
              "default": false
            },
            "created_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Created By"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "version": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Version"
            }
          },
          "type": "object",
          "required": [
            "name",
            "project_id",
            "created_by",
            "id"
          ],
          "title": "StageDB"
        },
        "StageMetadata": {
          "properties": {
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "stage_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Stage Id"
            },
            "stage_name": {
              "type": "string",
              "title": "Stage Name"
            },
            "stage_version": {
              "type": "integer",
              "title": "Stage Version"
            },
            "stage_type": {
              "$ref": "#/components/schemas/StageType"
            }
          },
          "type": "object",
          "required": [
            "project_id",
            "stage_id",
            "stage_name",
            "stage_version",
            "stage_type"
          ],
          "title": "StageMetadata"
        },
        "StageType": {
          "type": "string",
          "enum": [
            "local",
            "central"
          ],
          "title": "StageType"
        },
        "StageWithRulesets": {
          "properties": {
            "prioritized_rulesets": {
              "items": {
                "$ref": "#/components/schemas/Ruleset"
              },
              "type": "array",
              "title": "Prioritized Rulesets",
              "description": "Rulesets to be applied to the payload."
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the stage. Must be unique within the project."
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id",
              "description": "ID of the project to which this stage belongs."
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description",
              "description": "Optional human-readable description of the goals of this guardrail."
            },
            "type": {
              "$ref": "#/components/schemas/StageType",
              "description": "Type of the stage.",
              "default": "local"
            },
            "paused": {
              "type": "boolean",
              "title": "Paused",
              "description": "Whether the action is enabled. If False, the action will not be applied.",
              "default": false
            }
          },
          "type": "object",
          "required": [
            "name",
            "project_id"
          ],
          "title": "StageWithRulesets"
        },
        "StarAggregate": {
          "properties": {
            "feedback_type": {
              "type": "string",
              "const": "star",
              "title": "Feedback Type",
              "default": "star"
            },
            "average": {
              "type": "number",
              "title": "Average"
            },
            "counts": {
              "additionalProperties": {
                "type": "integer"
              },
              "type": "object",
              "title": "Counts"
            },
            "unrated_count": {
              "type": "integer",
              "title": "Unrated Count"
            }
          },
          "type": "object",
          "required": [
            "average",
            "counts",
            "unrated_count"
          ],
          "title": "StarAggregate"
        },
        "StarConstraints": {
          "properties": {
            "feedback_type": {
              "type": "string",
              "const": "star",
              "title": "Feedback Type"
            }
          },
          "type": "object",
          "required": [
            "feedback_type"
          ],
          "title": "StarConstraints"
        },
        "StarRating": {
          "properties": {
            "feedback_type": {
              "type": "string",
              "const": "star",
              "title": "Feedback Type",
              "default": "star"
            },
            "value": {
              "type": "integer",
              "maximum": 5,
              "minimum": 1,
              "title": "Value"
            }
          },
          "type": "object",
          "required": [
            "value"
          ],
          "title": "StarRating"
        },
        "StepMetric": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            },
            "value": {
              "title": "Value"
            }
          },
          "type": "object",
          "required": [
            "name",
            "value"
          ],
          "title": "StepMetric"
        },
        "StepType": {
          "type": "string",
          "enum": [
            "llm",
            "retriever",
            "tool",
            "workflow",
            "trace"
          ],
          "title": "StepType"
        },
        "StepWithChildren": {
          "properties": {
            "type": {
              "$ref": "#/components/schemas/NodeType",
              "description": "Type of the step. By default, it is set to workflow.",
              "default": "workflow"
            },
            "input": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/Document-Input"
                },
                {
                  "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                },
                {
                  "type": "object"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/Document-Input"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                }
              ],
              "title": "Input",
              "description": "Input to the step."
            },
            "output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/Document-Input"
                },
                {
                  "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                },
                {
                  "type": "object"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/Document-Input"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                }
              ],
              "title": "Output",
              "description": "Output of the step.",
              "default": ""
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at_ns": {
              "type": "integer",
              "title": "Created At Ns",
              "description": "Timestamp of the step's creation, as nanoseconds since epoch."
            },
            "duration_ns": {
              "type": "integer",
              "title": "Duration Ns",
              "description": "Duration of the step in nanoseconds.",
              "default": 0
            },
            "metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "Metadata",
              "description": "Metadata associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "ground_truth": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ground Truth",
              "description": "Ground truth expected output for the step."
            },
            "steps": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WorkflowStep"
                  },
                  {
                    "$ref": "#/components/schemas/ChainStep"
                  },
                  {
                    "$ref": "#/components/schemas/LlmStep"
                  },
                  {
                    "$ref": "#/components/schemas/RetrieverStep"
                  },
                  {
                    "$ref": "#/components/schemas/ToolStep"
                  },
                  {
                    "$ref": "#/components/schemas/AgentStep"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "agent": "#/components/schemas/AgentStep",
                    "chain": "#/components/schemas/ChainStep",
                    "llm": "#/components/schemas/LlmStep",
                    "retriever": "#/components/schemas/RetrieverStep",
                    "tool": "#/components/schemas/ToolStep",
                    "workflow": "#/components/schemas/WorkflowStep"
                  }
                }
              },
              "type": "array",
              "title": "Steps",
              "description": "Steps in the workflow."
            },
            "parent": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/StepWithChildren"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Parent node of the current node. For internal use only."
            }
          },
          "type": "object",
          "required": [
            "input"
          ],
          "title": "StepWithChildren"
        },
        "SubscriptionConfig": {
          "properties": {
            "statuses": {
              "items": {
                "$ref": "#/components/schemas/ExecutionStatus"
              },
              "type": "array",
              "title": "Statuses",
              "description": "List of statuses that will cause a notification to be sent to the configured URL.",
              "default": [
                "triggered"
              ]
            },
            "url": {
              "type": "string",
              "minLength": 1,
              "format": "uri",
              "title": "Url",
              "description": "URL to send the event to. This can be a webhook URL, a message queue URL, an event bus or a custom endpoint that can receive an HTTP POST request."
            }
          },
          "type": "object",
          "required": [
            "url"
          ],
          "title": "SubscriptionConfig"
        },
        "SummaryIDRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "meta_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Cols"
            },
            "include_emb": {
              "type": "boolean",
              "title": "Include Emb",
              "default": true
            },
            "page_num": {
              "type": "integer",
              "title": "Page Num",
              "default": 0
            },
            "hard_easy_threshold": {
              "type": "boolean",
              "title": "Hard Easy Threshold",
              "default": false
            },
            "sort_by": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sort By"
            },
            "sort_by_id_list": {
              "type": "boolean",
              "title": "Sort By Id List",
              "default": false
            },
            "sort_ascending": {
              "type": "boolean",
              "title": "Sort Ascending",
              "default": false
            }
          },
          "type": "object",
          "title": "SummaryIDRequest"
        },
        "SummaryIDResponse": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "meta_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Cols"
            },
            "include_emb": {
              "type": "boolean",
              "title": "Include Emb",
              "default": true
            },
            "page_num": {
              "type": "integer",
              "title": "Page Num",
              "default": 0
            },
            "hard_easy_threshold": {
              "type": "boolean",
              "title": "Hard Easy Threshold",
              "default": false
            },
            "sort_by": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sort By"
            },
            "sort_by_id_list": {
              "type": "boolean",
              "title": "Sort By Id List",
              "default": false
            },
            "sort_ascending": {
              "type": "boolean",
              "title": "Sort Ascending",
              "default": false
            },
            "ids": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Ids"
            }
          },
          "type": "object",
          "required": [
            "ids"
          ],
          "title": "SummaryIDResponse"
        },
        "SummaryRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "meta_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Cols"
            },
            "include_emb": {
              "type": "boolean",
              "title": "Include Emb",
              "default": true
            },
            "page_num": {
              "type": "integer",
              "title": "Page Num",
              "default": 0
            },
            "hard_easy_threshold": {
              "type": "boolean",
              "title": "Hard Easy Threshold",
              "default": false
            },
            "sort_by": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sort By"
            },
            "sort_by_id_list": {
              "type": "boolean",
              "title": "Sort By Id List",
              "default": false
            },
            "sort_ascending": {
              "type": "boolean",
              "title": "Sort Ascending",
              "default": false
            }
          },
          "type": "object",
          "title": "SummaryRequest"
        },
        "SystemRole": {
          "type": "string",
          "enum": [
            "system_admin",
            "system_user"
          ],
          "title": "SystemRole"
        },
        "SystemUserDB": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "email": {
              "type": "string",
              "title": "Email"
            },
            "first_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "First Name"
            },
            "last_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Name"
            },
            "email_is_verified": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Email Is Verified"
            },
            "role": {
              "$ref": "#/components/schemas/SystemRole"
            },
            "auth_method": {
              "type": "string",
              "title": "Auth Method"
            }
          },
          "type": "object",
          "required": [
            "id",
            "created_at",
            "updated_at",
            "email",
            "role",
            "auth_method"
          ],
          "title": "SystemUserDB"
        },
        "TaggingSchema": {
          "type": "string",
          "enum": [
            "BIO",
            "BIOES",
            "BILOU"
          ],
          "title": "TaggingSchema",
          "description": "Supported NER Tagging schemas.\n\nA tagging schema is a definition of the way NER data is formatted. The schema\nletters define the tags used within it.\n    ex:\n        BIOES - B means before (a token), I means in (a token),\n            E means end (of a token), S means single (length token)\nSee https://en.wikipedia.org/wiki/Inside%E2%80%93outside%E2%80%93beginning_(tagging)"
        },
        "TagsAggregate": {
          "properties": {
            "feedback_type": {
              "type": "string",
              "const": "tags",
              "title": "Feedback Type",
              "default": "tags"
            },
            "counts": {
              "additionalProperties": {
                "type": "integer"
              },
              "type": "object",
              "title": "Counts"
            },
            "unrated_count": {
              "type": "integer",
              "title": "Unrated Count"
            }
          },
          "type": "object",
          "required": [
            "counts",
            "unrated_count"
          ],
          "title": "TagsAggregate"
        },
        "TagsConstraints": {
          "properties": {
            "feedback_type": {
              "type": "string",
              "const": "tags",
              "title": "Feedback Type"
            },
            "tags": {
              "items": {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              "type": "array",
              "title": "Tags"
            },
            "allow_other": {
              "type": "boolean",
              "title": "Allow Other",
              "default": false
            }
          },
          "type": "object",
          "required": [
            "feedback_type",
            "tags"
          ],
          "title": "TagsConstraints"
        },
        "TagsRating": {
          "properties": {
            "feedback_type": {
              "type": "string",
              "const": "tags",
              "title": "Feedback Type",
              "default": "tags"
            },
            "value": {
              "items": {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              "type": "array",
              "title": "Value"
            }
          },
          "type": "object",
          "required": [
            "value"
          ],
          "title": "TagsRating"
        },
        "TargetLabels": {
          "properties": {
            "label": {
              "type": "string",
              "title": "Label"
            },
            "co_occurrence": {
              "type": "number",
              "title": "Co Occurrence"
            }
          },
          "type": "object",
          "required": [
            "label",
            "co_occurrence"
          ],
          "title": "TargetLabels",
          "description": "Structure for each target label in a co-occurence response."
        },
        "TaskResponse": {
          "properties": {
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "tasks": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Tasks"
            }
          },
          "type": "object",
          "required": [
            "project_id",
            "run_id",
            "tasks"
          ],
          "title": "TaskResponse",
          "description": "Response for the available task-labels of a multi-label model."
        },
        "TaskType": {
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
          "title": "TaskType",
          "description": "Valid task types for modeling.\n\nWe store these as ints instead of strings because we will be looking this up in the database frequently."
        },
        "TextConstraints": {
          "properties": {
            "feedback_type": {
              "type": "string",
              "const": "text",
              "title": "Feedback Type"
            }
          },
          "type": "object",
          "required": [
            "feedback_type"
          ],
          "title": "TextConstraints"
        },
        "TextRating": {
          "properties": {
            "feedback_type": {
              "type": "string",
              "const": "text",
              "title": "Feedback Type",
              "default": "text"
            },
            "value": {
              "type": "string",
              "minLength": 1,
              "title": "Value"
            }
          },
          "type": "object",
          "required": [
            "value"
          ],
          "title": "TextRating"
        },
        "ThresholdRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            }
          },
          "type": "object",
          "title": "ThresholdRequest"
        },
        "ThresholdResponse": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "easy_samples_threshold": {
              "type": "number",
              "title": "Easy Samples Threshold"
            },
            "hard_samples_threshold": {
              "type": "number",
              "title": "Hard Samples Threshold"
            }
          },
          "type": "object",
          "required": [
            "easy_samples_threshold",
            "hard_samples_threshold"
          ],
          "title": "ThresholdResponse"
        },
        "Token": {
          "properties": {
            "access_token": {
              "type": "string",
              "title": "Access Token"
            },
            "token_type": {
              "type": "string",
              "title": "Token Type",
              "default": "bearer"
            }
          },
          "type": "object",
          "required": [
            "access_token"
          ],
          "title": "Token"
        },
        "ToolCall": {
          "properties": {
            "id": {
              "type": "string",
              "title": "Id"
            },
            "function": {
              "$ref": "#/components/schemas/ToolCallFunction"
            }
          },
          "type": "object",
          "required": [
            "id",
            "function"
          ],
          "title": "ToolCall"
        },
        "ToolCallFunction": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            },
            "arguments": {
              "type": "string",
              "title": "Arguments"
            }
          },
          "type": "object",
          "required": [
            "name",
            "arguments"
          ],
          "title": "ToolCallFunction"
        },
        "ToolErrorRateScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "tool_error_rate",
              "title": "Name",
              "default": "tool_error_rate"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            },
            "type": {
              "type": "string",
              "const": "plus",
              "title": "Type",
              "default": "plus"
            },
            "model_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Name",
              "description": "Alias of the model to use for the scorer."
            }
          },
          "type": "object",
          "title": "ToolErrorRateScorer"
        },
        "ToolErrorRateTemplate": {
          "properties": {
            "metric_system_prompt": {
              "type": "string",
              "title": "Metric System Prompt",
              "default": "One or more functions have been called, and you will receive their output. The output format could be a string containing the tool's result, it could be in JSON or XML format with additional metadata and information, or it could be a list of the outputs in any such format.\n\nYour task is to determine whether at least one function call didn't execute correctly and errored out. If at least one call failed, then you should consider the entire call as a failure. \nYou should NOT evaluate any other aspect of the tool call. In particular you should not evaluate whether the output is well formatted, coherent or contains spelling mistakes.\n\nIf you conclude that the call failed, provide an explanation as to why. You may summarize any error message you encounter. If the call was successful, no explanation is needed.\n\nRespond in the following JSON format:\n\n```\n{\n   \"function_errored_out\": boolean,\n   \"explanation\": string\n}\n```\n\n- **\"function_errored_out\"**: Use `false` if all tool calls were successful, and `true` if at least one errored out.\n\n- **\"explanation\"**: If a tool call failed, provide your step-by-step reasoning to determine why it might have failed. If all tool calls were succesful, leave this blank.\n\nYou must respond with a valid JSON object; don't forget to escape special characters."
            },
            "metric_description": {
              "type": "string",
              "title": "Metric Description",
              "default": "I have a multi-turn chatbot application where the assistant is an agent that has access to tools. I want a metric to evaluate whether a tool invocation was successful or if it resulted in an error."
            },
            "value_field_name": {
              "type": "string",
              "title": "Value Field Name",
              "default": "function_errored_out"
            },
            "explanation_field_name": {
              "type": "string",
              "title": "Explanation Field Name",
              "description": "Field name to look for in the chainpoll response, for the explanation.",
              "default": "explanation"
            },
            "template": {
              "type": "string",
              "title": "Template",
              "default": "Tools output:\n```\n{response}\n```"
            },
            "metric_few_shot_examples": {
              "items": {
                "$ref": "#/components/schemas/FewShotExample"
              },
              "type": "array",
              "title": "Metric Few Shot Examples",
              "default": [
                {
                  "generation_prompt_and_response": "Tools output:\n```\n0\n```",
                  "evaluating_response": "{\n  \"function_errored_out\": false,\n  \"explanation\": \"\"\n}"
                },
                {
                  "generation_prompt_and_response": "Tools output:\n```\n{\n  \"error\": \"InvalidFunctionArgumentException\",\n  \"status_code\": 400\n}\n```",
                  "evaluating_response": "{\n  \"function_errored_out\": true,\n  \"explanation\": \"The call failed due to an InvalidFunctionArgumentException.\",\n}"
                }
              ]
            }
          },
          "type": "object",
          "title": "ToolErrorRateTemplate",
          "description": "Template for the tool error rate metric,\ncontaining all the info necessary to send the tool error rate prompt."
        },
        "ToolSelectionQualityScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "tool_selection_quality",
              "title": "Name",
              "default": "tool_selection_quality"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            },
            "type": {
              "type": "string",
              "const": "plus",
              "title": "Type",
              "default": "plus"
            },
            "model_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Name",
              "description": "Alias of the model to use for the scorer."
            },
            "num_judges": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 10,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Judges",
              "description": "Number of judges for the scorer."
            }
          },
          "type": "object",
          "title": "ToolSelectionQualityScorer"
        },
        "ToolSelectionQualityTemplate": {
          "properties": {
            "metric_system_prompt": {
              "type": "string",
              "title": "Metric System Prompt",
              "default": "You will receive the chat history from a chatbot application. At the end of the  conversation, it will be the bot’s turn to act. The bot has several options: it can reflect and plan its next steps, choose to call tools, or respond directly to the user. If the bot opts to use tools, the tools execute separately, and the bot will subsequently review the output from those tools. Ultimately, the bot should reply to the user, choosing the relevant parts of the tools' output.\n\nYour task is to evaluate the bot's decision-making process and ensure it follows these guidelines:\n- If all user queries have already been answered and can be found in the chat history, the bot should not call tools.\n- If no suitable tools are available to assist with user queries, the bot should not call tools.\n- If the chat history contains all the necessary information to directly answer all user queries, the bot should not call tools.\n- If the bot decided to call tools, the tools and argument values selected must relate to at least part of one user query.\n- If the bot decided to call tools, all arguments marked as \"required\" in the tools' schema must be provided with values.\n\nRemember that there are many ways the bot's actions can comply with these rules. Your role is to determine whether the bot fundamentally violated any of these rules, not whether it chose the most optimal response.\n\nRespond in the following JSON format:\n```\n{\n    \"explanation\": string,\n    \"bot_answer_follows_rules\": boolean\n}\n```\n\n- **\"explanation\"**: Provide your step-by-step reasoning to determine whether the bot's reply follows the above-mentioned guidelines.\n\n- **\"bot_answer_follows_rules\"**: Respond `true` if you believe the bot followed the above guidelines, respond `false` otherwise.\n\nYou must respond with a valid JSON object; don't forget to escape special characters."
            },
            "metric_description": {
              "type": "string",
              "title": "Metric Description",
              "default": "I have a multi-turn chatbot application where the assistant is an agent that has access to tools. I want a metric that assesses whether the assistant made the correct decision in choosing to either use tools or to directly respond, and in cases where it uses tools, whether it selected the correct tools with the correct arguments."
            },
            "value_field_name": {
              "type": "string",
              "title": "Value Field Name",
              "default": "bot_answer_follows_rules"
            },
            "explanation_field_name": {
              "type": "string",
              "title": "Explanation Field Name",
              "description": "Field name to look for in the chainpoll response, for the explanation.",
              "default": "explanation"
            },
            "template": {
              "type": "string",
              "title": "Template",
              "default": "Chatbot history:\n```\n{query}\n```\n\nThe bot's available tools:\n```\n{tools}\n```\n\nThe answer to evaluate:\n```\n{response}\n```"
            },
            "metric_few_shot_examples": {
              "items": {
                "$ref": "#/components/schemas/FewShotExample"
              },
              "type": "array",
              "title": "Metric Few Shot Examples",
              "default": [
                {
                  "generation_prompt_and_response": "Chatbot history:\n```\nhuman: Do the genuses Sapium and Aristotelia belong to the same family?\n```\n\nThe bot's available tools:\n```\n[{'name': 'Search',\n  'description': 'Search for the query',\n  'parameters': {'type': 'object',\n   'properties': {'query': {'type': 'string',\n     'description': 'the query to search'}},\n   'required': ['query']}},\n {'name': 'Lookup',\n  'description': 'Lookup the keyword',\n  'parameters': {'type': 'object',\n   'properties': {'keyword': {'type': 'string',\n     'description': 'the keyword to lookup'}},\n   'required': ['keyword']}}]\n```\n\nThe answer to evaluate:\n```\n{\"Thought\": \"I need to search Sapium and Aristotelia, find their families, then find if they are the same.\", \"Action\": {\"name\": \"Search\", \"arguments\": {\"query\": \"Sapium\"}}}\n```",
                  "evaluating_response": "{\n    \"explanation\": \"The user asked if the genuses Sapium and Aristotelia belong to the same family. The bot decided to search for 'Sapium', which is associated with part of the user's query regarding the family of Sapium. The action aligns with the user's query, and all required arguments ('query') are provided, making the tool call valid. Furthermore, the information required to answer the user's question is not present in the chat history, justifying the bot's decision to call a tool.\",\n    \"bot_answer_follows_rules\": true\n}"
                }
              ]
            }
          },
          "type": "object",
          "title": "ToolSelectionQualityTemplate",
          "description": "Template for the tool selection quality metric,\ncontaining all the info necessary to send the tool selection quality prompt."
        },
        "ToolSpan": {
          "properties": {
            "type": {
              "type": "string",
              "const": "tool",
              "title": "Type",
              "description": "Type: must be `tool`",
              "default": "tool"
            },
            "input": {
              "type": "string",
              "title": "Input",
              "description": "Input to the tool step."
            },
            "output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output",
              "description": "Output of the tool step."
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At",
              "description": "Timestamp of the step's creation"
            },
            "user_metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "User Metadata",
              "description": "Metadata associated with this step."
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Tags",
              "description": "Tags associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "metrics": {
              "$ref": "#/components/schemas/Metrics-Input",
              "description": "Metrics associated with this step."
            },
            "tool_call_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tool Call Id",
              "description": "Tool call ID."
            }
          },
          "type": "object",
          "required": [
            "input"
          ],
          "title": "ToolSpan"
        },
        "ToolSpanRecord": {
          "properties": {
            "type": {
              "type": "string",
              "const": "tool",
              "title": "Type",
              "description": "Type: must be `tool`",
              "default": "tool"
            },
            "input": {
              "type": "string",
              "title": "Input",
              "description": "Input to the tool step."
            },
            "output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output",
              "description": "Output of the tool step."
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At",
              "description": "Timestamp of the step's creation"
            },
            "user_metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "User Metadata",
              "description": "Metadata associated with this step."
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Tags",
              "description": "Tags associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "metrics": {
              "$ref": "#/components/schemas/galileo_core__schemas__logging__step__Metrics",
              "description": "Metrics associated with this step."
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "ID",
              "description": "Galileo ID of the trace or span"
            },
            "trace_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Trace ID",
              "description": "Galileo ID of the trace containing the span (or the same value as id for a trace)"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project ID",
              "description": "Galileo ID of the project associated with this trace or span"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run ID",
              "description": "Galileo ID of the run (log stream or experiment) associated with this trace or span"
            },
            "updated_at": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Updated At",
              "description": "Timestamp of the trace or span's last update"
            },
            "has_children": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Has Children",
              "description": "Whether or not this trace or span has child spans"
            },
            "metrics_batch_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metrics Batch Id",
              "description": "Galileo ID of the metrics batch associated with this trace or span"
            },
            "metric_info": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TransactionMetricInfo"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Detailed information about the metrics associated with this trace or span"
            },
            "parent_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Parent ID",
              "description": "Galileo ID of the parent of this span"
            },
            "tool_call_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tool Call Id",
              "description": "Tool call ID."
            }
          },
          "type": "object",
          "required": [
            "input",
            "id",
            "trace_id",
            "project_id",
            "run_id",
            "parent_id"
          ],
          "title": "ToolSpanRecord"
        },
        "ToolStep": {
          "properties": {
            "type": {
              "type": "string",
              "const": "tool",
              "title": "Type",
              "description": "Type of the step. By default, it is set to tool.",
              "default": "tool"
            },
            "input": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/Document-Input"
                },
                {
                  "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                },
                {
                  "type": "object"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/Document-Input"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                }
              ],
              "title": "Input",
              "description": "Input to the step."
            },
            "output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/Document-Input"
                },
                {
                  "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                },
                {
                  "type": "object"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/Document-Input"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                }
              ],
              "title": "Output",
              "description": "Output of the step.",
              "default": ""
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at_ns": {
              "type": "integer",
              "title": "Created At Ns",
              "description": "Timestamp of the step's creation, as nanoseconds since epoch."
            },
            "duration_ns": {
              "type": "integer",
              "title": "Duration Ns",
              "description": "Duration of the step in nanoseconds.",
              "default": 0
            },
            "metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "Metadata",
              "description": "Metadata associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "ground_truth": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ground Truth",
              "description": "Ground truth expected output for the step."
            }
          },
          "type": "object",
          "required": [
            "input"
          ],
          "title": "ToolStep"
        },
        "TopInsightsRequest": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "meta_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Cols"
            }
          },
          "type": "object",
          "title": "TopInsightsRequest"
        },
        "TopInsightsResponse": {
          "properties": {
            "task": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task"
            },
            "filter_params": {
              "$ref": "#/components/schemas/FilterParams",
              "default": {
                "ids": [],
                "span_regex": false,
                "exclude_ids": [],
                "likely_mislabeled_dep_percentile": 0,
                "data_embs": false
              }
            },
            "compare_to": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Split"
                },
                {
                  "type": "null"
                }
              ]
            },
            "map_threshold": {
              "type": "number",
              "title": "Map Threshold",
              "default": 0.5
            },
            "meta_cols": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Meta Cols"
            },
            "top_misclassified_pairs": {
              "items": {
                "type": "object"
              },
              "type": "array",
              "title": "Top Misclassified Pairs",
              "default": []
            },
            "top_misclassified_pairs_percentage": {
              "type": "number",
              "title": "Top Misclassified Pairs Percentage"
            },
            "top_correlation_pairs": {
              "additionalProperties": {
                "type": "number"
              },
              "type": "object",
              "title": "Top Correlation Pairs",
              "default": {
  
              }
            },
            "top_erroneous_words": {
              "additionalProperties": {
                "type": "integer"
              },
              "type": "object",
              "title": "Top Erroneous Words",
              "default": {
  
              }
            }
          },
          "type": "object",
          "required": [
            "top_misclassified_pairs_percentage"
          ],
          "title": "TopInsightsResponse"
        },
        "TopKToken": {
          "properties": {
            "token": {
              "type": "string",
              "title": "Token"
            },
            "prob": {
              "type": "number",
              "title": "Prob"
            }
          },
          "type": "object",
          "required": [
            "token",
            "prob"
          ],
          "title": "TopKToken",
          "description": "Representation of a token and its probability for Segment Top k logprob tokens.\n\nAttributes:\n    token: The text of the token\n    prob: The probability of the token"
        },
        "Trace": {
          "properties": {
            "type": {
              "type": "string",
              "const": "trace",
              "title": "Type",
              "description": "Type: must be `trace`",
              "default": "trace"
            },
            "input": {
              "type": "string",
              "title": "Input",
              "description": "Input to the step."
            },
            "output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output",
              "description": "Output of the step."
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At",
              "description": "Timestamp of the step's creation"
            },
            "user_metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "User Metadata",
              "description": "Metadata associated with this step."
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Tags",
              "description": "Tags associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "metrics": {
              "$ref": "#/components/schemas/Metrics-Input",
              "description": "Metrics associated with this step."
            },
            "spans": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WorkflowSpan"
                  },
                  {
                    "$ref": "#/components/schemas/LlmSpan"
                  },
                  {
                    "$ref": "#/components/schemas/RetrieverSpan"
                  },
                  {
                    "$ref": "#/components/schemas/ToolSpan"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "llm": "#/components/schemas/LlmSpan",
                    "retriever": "#/components/schemas/RetrieverSpan",
                    "tool": "#/components/schemas/ToolSpan",
                    "workflow": "#/components/schemas/WorkflowSpan"
                  }
                }
              },
              "type": "array",
              "title": "Spans",
              "description": "Child spans."
            }
          },
          "type": "object",
          "required": [
            "input"
          ],
          "title": "Trace"
        },
        "TraceMetadata": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id",
              "description": "Unique identifier for the request."
            },
            "received_at": {
              "type": "integer",
              "title": "Received At",
              "description": "Time the request was received by the server in nanoseconds."
            },
            "response_at": {
              "type": "integer",
              "title": "Response At",
              "description": "Time the response was sent by the server in nanoseconds."
            },
            "execution_time": {
              "type": "number",
              "title": "Execution Time",
              "description": "Execution time for the request (in seconds).",
              "default": -1
            }
          },
          "type": "object",
          "title": "TraceMetadata"
        },
        "TraceRecord": {
          "properties": {
            "type": {
              "type": "string",
              "const": "trace",
              "title": "Type",
              "description": "Type: must be `trace`",
              "default": "trace"
            },
            "input": {
              "type": "string",
              "title": "Input",
              "description": "Input to the step."
            },
            "output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output",
              "description": "Output of the step."
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At",
              "description": "Timestamp of the step's creation"
            },
            "user_metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "User Metadata",
              "description": "Metadata associated with this step."
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Tags",
              "description": "Tags associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "metrics": {
              "$ref": "#/components/schemas/galileo_core__schemas__logging__step__Metrics",
              "description": "Metrics associated with this step."
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "ID",
              "description": "Galileo ID of the trace or span"
            },
            "trace_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Trace ID",
              "description": "Galileo ID of the trace containing the span (or the same value as id for a trace)"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project ID",
              "description": "Galileo ID of the project associated with this trace or span"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run ID",
              "description": "Galileo ID of the run (log stream or experiment) associated with this trace or span"
            },
            "updated_at": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Updated At",
              "description": "Timestamp of the trace or span's last update"
            },
            "has_children": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Has Children",
              "description": "Whether or not this trace or span has child spans"
            },
            "metrics_batch_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metrics Batch Id",
              "description": "Galileo ID of the metrics batch associated with this trace or span"
            },
            "metric_info": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TransactionMetricInfo"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Detailed information about the metrics associated with this trace or span"
            }
          },
          "type": "object",
          "required": [
            "input",
            "id",
            "trace_id",
            "project_id",
            "run_id"
          ],
          "title": "TraceRecord"
        },
        "TraceRecordWithChildren": {
          "properties": {
            "spans": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WorkflowSpanRecordWithChildren"
                  },
                  {
                    "$ref": "#/components/schemas/LlmSpanRecord"
                  },
                  {
                    "$ref": "#/components/schemas/ToolSpanRecord"
                  },
                  {
                    "$ref": "#/components/schemas/RetrieverSpanRecord"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "llm": "#/components/schemas/LlmSpanRecord",
                    "retriever": "#/components/schemas/RetrieverSpanRecord",
                    "tool": "#/components/schemas/ToolSpanRecord",
                    "workflow": "#/components/schemas/WorkflowSpanRecordWithChildren"
                  }
                }
              },
              "type": "array",
              "title": "Spans"
            },
            "type": {
              "type": "string",
              "const": "trace",
              "title": "Type",
              "description": "Type: must be `trace`",
              "default": "trace"
            },
            "input": {
              "type": "string",
              "title": "Input",
              "description": "Input to the step."
            },
            "output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output",
              "description": "Output of the step."
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At",
              "description": "Timestamp of the step's creation"
            },
            "user_metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "User Metadata",
              "description": "Metadata associated with this step."
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Tags",
              "description": "Tags associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "metrics": {
              "$ref": "#/components/schemas/galileo_core__schemas__logging__step__Metrics",
              "description": "Metrics associated with this step."
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "ID",
              "description": "Galileo ID of the trace or span"
            },
            "trace_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Trace ID",
              "description": "Galileo ID of the trace containing the span (or the same value as id for a trace)"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project ID",
              "description": "Galileo ID of the project associated with this trace or span"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run ID",
              "description": "Galileo ID of the run (log stream or experiment) associated with this trace or span"
            },
            "updated_at": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Updated At",
              "description": "Timestamp of the trace or span's last update"
            },
            "has_children": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Has Children",
              "description": "Whether or not this trace or span has child spans"
            },
            "metrics_batch_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metrics Batch Id",
              "description": "Galileo ID of the metrics batch associated with this trace or span"
            },
            "metric_info": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TransactionMetricInfo"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Detailed information about the metrics associated with this trace or span"
            }
          },
          "type": "object",
          "required": [
            "input",
            "id",
            "trace_id",
            "project_id",
            "run_id"
          ],
          "title": "TraceRecordWithChildren"
        },
        "TrainJobAuthTokenResponse": {
          "properties": {
            "token": {
              "type": "string",
              "title": "Token"
            },
            "file_url": {
              "type": "string",
              "title": "File Url"
            }
          },
          "type": "object",
          "required": [
            "token",
            "file_url"
          ],
          "title": "TrainJobAuthTokenResponse"
        },
        "TrainJobStatusResponse": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "status": {
              "type": "string",
              "title": "Status"
            },
            "status_message": {
              "type": "string",
              "title": "Status Message"
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            },
            "run_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Run Id"
            },
            "history": {
              "items": {
  
              },
              "type": "array",
              "title": "History"
            },
            "project_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Name"
            },
            "run_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Run Name"
            }
          },
          "type": "object",
          "required": [
            "id",
            "status",
            "status_message",
            "history"
          ],
          "title": "TrainJobStatusResponse"
        },
        "TrainResponse": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            }
          },
          "type": "object",
          "required": [
            "id"
          ],
          "title": "TrainResponse"
        },
        "TrainingModelResponse": {
          "properties": {
            "kind": {
              "$ref": "#/components/schemas/ModelKind"
            },
            "parameters": {
              "type": "object",
              "title": "Parameters"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run Id"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "filename": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filename"
            },
            "storage_url": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Storage Url"
            },
            "upload_status": {
              "$ref": "#/components/schemas/ModelUploadStatus",
              "default": "pending"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "run_name": {
              "type": "string",
              "title": "Run Name"
            },
            "project_name": {
              "type": "string",
              "title": "Project Name"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "kind",
            "parameters",
            "run_id",
            "project_id",
            "id",
            "run_name",
            "project_name"
          ],
          "title": "TrainingModelResponse"
        },
        "TransactionLoggingMethod": {
          "type": "string",
          "enum": [
            "py_langchain",
            "py_langchain_async",
            "js_langchain",
            "py_logger",
            "js_logger",
            "api_direct",
            "workflows"
          ],
          "title": "TransactionLoggingMethod"
        },
        "TransactionMetricInfo": {
          "properties": {
            "chunk_attribution": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Chunk Attribution",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "chunk_length": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Chunk Length",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "chunk_utilized_substrings": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Chunk Utilized Substrings",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "chunk_utilized_substrings_offsets": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Chunk Utilized Substrings Offsets",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "chunk_utilization": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Chunk Utilization",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "chunk_utilized": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Chunk Utilized",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "chunk_relevance": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Chunk Relevance",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "chunk_relevant": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Chunk Relevant",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "chunk_relevant_substrings": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Chunk Relevant Substrings",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "chunk_relevant_substrings_offsets": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Chunk Relevant Substrings Offsets",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "rag_nli_non_adherent_substrings": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Rag Nli Non Adherent Substrings",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "rag_nli_non_adherent_substrings_offsets": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Rag Nli Non Adherent Substrings Offsets",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "chunks_attributed": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Chunks Attributed",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "chunks_length": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Chunks Length",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "chunks_unattributed": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Chunks Unattributed",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "chunks_utilized": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Chunks Utilized",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "completeness_gpt": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Completeness Gpt",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "cost": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Cost",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "factuality": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Factuality",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "groundedness": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Groundedness",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "input_pii": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Input Pii",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "input_pii_spans": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Input Pii Spans",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "input_pii_spans_prob": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Input Pii Spans Prob",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "input_pii_spans_offset": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Input Pii Spans Offset",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "input_sexist": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Input Sexist",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "input_tone": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Input Tone",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "input_toxicity": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Input Toxicity",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "instruction_adherence": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Instruction Adherence",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "latency": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Latency",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "pii": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Pii",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "pii_spans": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Pii Spans",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "pii_spans_prob": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Pii Spans Prob",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "pii_spans_offset": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Pii Spans Offset",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "prompt_perplexity": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Prompt Perplexity",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "protect_status": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Protect Status",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "retriever_attribution": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Retriever Attribution",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "retriever_utilization": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Retriever Utilization",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "sexist": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Sexist",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "toxicity": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Toxicity",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "tone": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Tone",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "prompt_injection": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Prompt Injection",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "tool_selection_quality": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Tool Selection Quality",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "tool_error_rate": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Tool Error Rate",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "agentic_workflow_success": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Agentic Workflow Success",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            },
            "agentic_session_success": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricNotComputed"
                },
                {
                  "$ref": "#/components/schemas/MetricPending"
                },
                {
                  "$ref": "#/components/schemas/MetricComputing"
                },
                {
                  "$ref": "#/components/schemas/MetricNotApplicable"
                },
                {
                  "$ref": "#/components/schemas/MetricSuccess"
                },
                {
                  "$ref": "#/components/schemas/MetricError"
                },
                {
                  "$ref": "#/components/schemas/MetricFailed"
                }
              ],
              "title": "Agentic Session Success",
              "default": {
                "status_type": "not_computed",
                "message": "Metric not computed."
              }
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "TransactionMetricInfo"
        },
        "TransactionMetricsResponse": {
          "properties": {
            "group_by_columns": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Group By Columns"
            },
            "aggregate_metrics": {
              "$ref": "#/components/schemas/AggregateMetrics"
            },
            "bucketed_metrics": {
              "additionalProperties": {
                "items": {
                  "$ref": "#/components/schemas/BucketedMetrics"
                },
                "type": "array"
              },
              "type": "object",
              "title": "Bucketed Metrics"
            }
          },
          "type": "object",
          "required": [
            "group_by_columns",
            "aggregate_metrics",
            "bucketed_metrics"
          ],
          "title": "TransactionMetricsResponse"
        },
        "TransactionRecordBatch": {
          "properties": {
            "records": {
              "items": {
                "$ref": "#/components/schemas/TransactionRecordIngest"
              },
              "type": "array",
              "title": "Records"
            },
            "logging_method": {
              "$ref": "#/components/schemas/TransactionLoggingMethod",
              "default": "api_direct"
            },
            "client_version": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Client Version"
            }
          },
          "type": "object",
          "required": [
            "records"
          ],
          "title": "TransactionRecordBatch"
        },
        "TransactionRecordDB": {
          "properties": {
            "latency_ms": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Latency Ms"
            },
            "time_to_first_token_ms": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Time To First Token Ms"
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code"
            },
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model"
            },
            "num_input_tokens": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Input Tokens"
            },
            "num_output_tokens": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Output Tokens"
            },
            "num_total_tokens": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Total Tokens"
            },
            "finish_reason": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Finish Reason"
            },
            "node_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Node Id"
            },
            "chain_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Chain Id"
            },
            "chain_root_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Chain Root Id"
            },
            "output_logprobs": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output Logprobs"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "temperature": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Temperature"
            },
            "tags": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tags"
            },
            "user_metadata": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Metadata"
            },
            "node_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Node Name"
            },
            "node_type": {
              "$ref": "#/components/schemas/NodeType"
            },
            "has_children": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Has Children"
            },
            "version": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Version"
            },
            "input_text": {
              "type": "string",
              "title": "Input Text"
            },
            "output_text": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output Text"
            },
            "tools": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tools"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "metrics_status": {
              "$ref": "#/components/schemas/TransactionRecordStatus",
              "default": "unprocessed"
            },
            "metrics_batch_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metrics Batch Id"
            },
            "metric_info": {
              "$ref": "#/components/schemas/TransactionMetricInfo"
            },
            "feedback_ratings": {
              "additionalProperties": {
                "$ref": "#/components/schemas/FeedbackRatingDB"
              },
              "propertyNames": {
                "format": "uuid4"
              },
              "type": "object",
              "title": "Feedback Ratings"
            }
          },
          "type": "object",
          "required": [
            "node_id",
            "created_at",
            "node_type",
            "input_text",
            "id",
            "updated_at",
            "project_id",
            "metric_info"
          ],
          "title": "TransactionRecordDB"
        },
        "TransactionRecordIngest": {
          "properties": {
            "latency_ms": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Latency Ms"
            },
            "time_to_first_token_ms": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Time To First Token Ms"
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code"
            },
            "model": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model"
            },
            "num_input_tokens": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Input Tokens"
            },
            "num_output_tokens": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Output Tokens"
            },
            "num_total_tokens": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Num Total Tokens"
            },
            "finish_reason": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Finish Reason"
            },
            "node_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Node Id"
            },
            "chain_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Chain Id"
            },
            "chain_root_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Chain Root Id"
            },
            "output_logprobs": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output Logprobs"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "temperature": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Temperature"
            },
            "tags": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tags"
            },
            "user_metadata": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Metadata"
            },
            "node_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Node Name"
            },
            "node_type": {
              "$ref": "#/components/schemas/NodeType"
            },
            "has_children": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Has Children"
            },
            "version": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Version"
            },
            "input_text": {
              "type": "string",
              "title": "Input Text"
            },
            "output_text": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output Text"
            },
            "tools": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tools"
            }
          },
          "type": "object",
          "required": [
            "node_id",
            "created_at",
            "node_type",
            "input_text"
          ],
          "title": "TransactionRecordIngest"
        },
        "TransactionRecordStatus": {
          "type": "string",
          "enum": [
            "unprocessed",
            "processing",
            "processed"
          ],
          "title": "TransactionRecordStatus"
        },
        "TransactionRecordsResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "columns": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              "type": "object",
              "title": "Columns"
            },
            "rows": {
              "items": {
                "$ref": "#/components/schemas/TransactionRecordDB"
              },
              "type": "array",
              "title": "Rows"
            },
            "filter_options": {
              "additionalProperties": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "type": "object",
              "title": "Filter Options"
            }
          },
          "type": "object",
          "required": [
            "columns",
            "rows"
          ],
          "title": "TransactionRecordsResponse",
          "description": "Rows response with column types for json blobs.\n\ncolumns example:\n{\n  \"metrics\": {\n    \"uncertainty\": \"float\"\n  },\n  \"user_metadata\": {\n    \"source\": \"string\"\n  }\n}"
        },
        "TransactionRowsRequestBody": {
          "properties": {
            "filters": {
              "items": {
                "$ref": "#/components/schemas/QueryFilterV1"
              },
              "type": "array",
              "title": "Filters"
            },
            "sort_spec": {
              "items": {
                "$ref": "#/components/schemas/SortClause"
              },
              "type": "array",
              "title": "Sort Spec",
              "default": [
                {
                  "col_name": "created_at",
                  "sort_dir": "desc"
                }
              ]
            },
            "columns": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Columns"
            }
          },
          "type": "object",
          "title": "TransactionRowsRequestBody"
        },
        "TransferUserResponse": {
          "properties": {
            "message": {
              "type": "string",
              "title": "Message"
            }
          },
          "type": "object",
          "required": [
            "message"
          ],
          "title": "TransferUserResponse"
        },
        "UncertaintyScorer": {
          "properties": {
            "name": {
              "type": "string",
              "const": "uncertainty",
              "title": "Name",
              "default": "uncertainty"
            },
            "filters": {
              "anyOf": [
                {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/NodeNameFilter"
                      },
                      {
                        "$ref": "#/components/schemas/MetadataFilter"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "name",
                      "mapping": {
                        "metadata": "#/components/schemas/MetadataFilter",
                        "node_name": "#/components/schemas/NodeNameFilter"
                      }
                    }
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Filters",
              "description": "List of filters to apply to the scorer."
            }
          },
          "type": "object",
          "title": "UncertaintyScorer"
        },
        "UpdateAlertConfigurationRequest": {
          "properties": {
            "conditions": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/AlertCondition"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Conditions"
            },
            "filters": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AlertNameFilter"
                  }
                ],
                "discriminator": {
                  "propertyName": "name",
                  "mapping": {
                    "node_name": "#/components/schemas/AlertNameFilter"
                  }
                }
              },
              "type": "array",
              "title": "Filters"
            },
            "interval": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Interval"
            },
            "active": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Active"
            },
            "processed_by": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Processed By"
            },
            "last_triggered": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Triggered"
            },
            "last_sent": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Sent"
            },
            "alert_sent": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Alert Sent"
            },
            "counter_since_last_sent": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Counter Since Last Sent"
            },
            "counter": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Counter"
            },
            "schema_version": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AlertMonitorType"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "title": "UpdateAlertConfigurationRequest"
        },
        "UpdateDatasetContentRequest": {
          "properties": {
            "edits": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DatasetAppendRow"
                  },
                  {
                    "$ref": "#/components/schemas/DatasetUpdateRow"
                  },
                  {
                    "$ref": "#/components/schemas/DatasetDeleteRow"
                  },
                  {
                    "$ref": "#/components/schemas/DatasetDeleteColumn"
                  },
                  {
                    "$ref": "#/components/schemas/DatasetRenameColumn"
                  },
                  {
                    "$ref": "#/components/schemas/DatasetAddColumn"
                  }
                ],
                "discriminator": {
                  "propertyName": "edit_type",
                  "mapping": {
                    "add_column": "#/components/schemas/DatasetAddColumn",
                    "append_row": "#/components/schemas/DatasetAppendRow",
                    "delete_column": "#/components/schemas/DatasetDeleteColumn",
                    "delete_row": "#/components/schemas/DatasetDeleteRow",
                    "rename_column": "#/components/schemas/DatasetRenameColumn",
                    "update_row": "#/components/schemas/DatasetUpdateRow"
                  }
                }
              },
              "type": "array",
              "minItems": 1,
              "title": "Edits",
              "error": "Edits list cannot be empty."
            }
          },
          "type": "object",
          "required": [
            "edits"
          ],
          "title": "UpdateDatasetContentRequest"
        },
        "UpdateDatasetRequest": {
          "properties": {
            "name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            },
            "column_mapping": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ColumnMapping"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "title": "UpdateDatasetRequest"
        },
        "UpdateDatasetVersionRequest": {
          "properties": {
            "name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          },
          "type": "object",
          "title": "UpdateDatasetVersionRequest"
        },
        "UpdateGeneratedScorerRequest": {
          "properties": {
            "name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            },
            "instructions": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Instructions"
            },
            "scoreable_node_types": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/NodeType"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scoreable Node Types"
            },
            "scorer_configuration": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/GeneratedScorerConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            },
            "chain_poll_template": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ChainPollTemplate"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "title": "UpdateGeneratedScorerRequest"
        },
        "UpdateRunResponse": {
          "properties": {
            "name": {
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            },
            "created_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Created By"
            },
            "num_samples": {
              "type": "integer",
              "title": "Num Samples"
            },
            "winner": {
              "type": "boolean",
              "title": "Winner"
            },
            "dataset_hash": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Dataset Hash"
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            },
            "task_type": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaskType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "last_updated_by": {
              "type": "string",
              "format": "uuid4",
              "title": "Last Updated By"
            },
            "run_tags": {
              "items": {
                "$ref": "#/components/schemas/RunTagDB"
              },
              "type": "array",
              "title": "Run Tags"
            }
          },
          "type": "object",
          "required": [
            "created_by",
            "num_samples",
            "winner",
            "id",
            "created_at",
            "updated_at",
            "last_updated_by"
          ],
          "title": "UpdateRunResponse"
        },
        "UpdateScorerRequest": {
          "properties": {
            "name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            },
            "tags": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tags"
            },
            "defaults": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScorerDefaults"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "type": "object",
          "title": "UpdateScorerRequest"
        },
        "UpdateUserResponse": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "permissions": {
              "items": {
                "$ref": "#/components/schemas/Permission"
              },
              "type": "array",
              "title": "Permissions",
              "default": []
            },
            "email": {
              "type": "string",
              "title": "Email"
            },
            "first_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "First Name",
              "default": ""
            },
            "last_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Name",
              "default": ""
            },
            "auth_method": {
              "$ref": "#/components/schemas/AuthMethod",
              "default": "email"
            },
            "role": {
              "$ref": "#/components/schemas/UserRole",
              "default": "read_only"
            },
            "email_is_verified": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Email Is Verified"
            },
            "organization_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Organization Id"
            },
            "organization_name": {
              "type": "string",
              "title": "Organization Name"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            }
          },
          "type": "object",
          "required": [
            "id",
            "email",
            "organization_id",
            "organization_name",
            "created_at",
            "updated_at"
          ],
          "title": "UpdateUserResponse"
        },
        "UploadModel": {
          "properties": {
            "parameters": {
              "type": "object",
              "title": "Parameters"
            },
            "kind": {
              "$ref": "#/components/schemas/ModelKind"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "parameters",
            "kind"
          ],
          "title": "UploadModel"
        },
        "UploadModelResponse": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "filename": {
              "type": "string",
              "title": "Filename"
            },
            "upload_url": {
              "type": "string",
              "title": "Upload Url"
            }
          },
          "type": "object",
          "required": [
            "id",
            "filename",
            "upload_url"
          ],
          "title": "UploadModelResponse"
        },
        "UsageLimit": {
          "properties": {
            "name": {
              "$ref": "#/components/schemas/UsageLimitNames"
            },
            "limit": {
              "type": "integer",
              "title": "Limit"
            }
          },
          "type": "object",
          "required": [
            "name",
            "limit"
          ],
          "title": "UsageLimit"
        },
        "UsageLimitNames": {
          "type": "string",
          "enum": [
            "traces_per_month",
            "orgs_per_user",
            "users_per_org"
          ],
          "title": "UsageLimitNames"
        },
        "UsageLimitResponse": {
          "properties": {
            "name": {
              "$ref": "#/components/schemas/UsageLimitNames"
            },
            "limit": {
              "type": "integer",
              "title": "Limit"
            },
            "current_usage": {
              "type": "integer",
              "title": "Current Usage"
            }
          },
          "type": "object",
          "required": [
            "name",
            "limit",
            "current_usage"
          ],
          "title": "UsageLimitResponse"
        },
        "UserAction": {
          "type": "string",
          "enum": [
            "update",
            "delete",
            "read_api_keys"
          ],
          "title": "UserAction"
        },
        "UserCollaborator": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "permissions": {
              "items": {
                "$ref": "#/components/schemas/Permission"
              },
              "type": "array",
              "title": "Permissions",
              "default": []
            },
            "role": {
              "$ref": "#/components/schemas/CollaboratorRole"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "user_id": {
              "type": "string",
              "format": "uuid4",
              "title": "User Id"
            },
            "first_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "First Name"
            },
            "last_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Name"
            },
            "email": {
              "type": "string",
              "title": "Email"
            }
          },
          "type": "object",
          "required": [
            "id",
            "role",
            "created_at",
            "user_id",
            "first_name",
            "last_name",
            "email"
          ],
          "title": "UserCollaborator"
        },
        "UserCollaboratorCreate": {
          "properties": {
            "role": {
              "$ref": "#/components/schemas/CollaboratorRole",
              "default": "viewer"
            },
            "user_id": {
              "type": "string",
              "format": "uuid4",
              "title": "User Id"
            }
          },
          "type": "object",
          "required": [
            "user_id"
          ],
          "title": "UserCollaboratorCreate"
        },
        "UserCreate": {
          "properties": {
            "email": {
              "type": "string",
              "format": "email",
              "title": "Email"
            },
            "first_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "First Name",
              "default": ""
            },
            "last_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Name",
              "default": ""
            },
            "auth_method": {
              "$ref": "#/components/schemas/AuthMethod",
              "default": "email"
            },
            "role": {
              "$ref": "#/components/schemas/UserRole",
              "default": "read_only"
            },
            "email_is_verified": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Email Is Verified",
              "default": false
            },
            "password": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "password",
                  "writeOnly": true
                },
                {
                  "type": "null"
                }
              ],
              "title": "Password"
            }
          },
          "type": "object",
          "required": [
            "email"
          ],
          "title": "UserCreate"
        },
        "UserDB": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "permissions": {
              "items": {
                "$ref": "#/components/schemas/Permission"
              },
              "type": "array",
              "title": "Permissions",
              "default": []
            },
            "email": {
              "type": "string",
              "title": "Email"
            },
            "first_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "First Name",
              "default": ""
            },
            "last_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Name",
              "default": ""
            },
            "auth_method": {
              "$ref": "#/components/schemas/AuthMethod",
              "default": "email"
            },
            "role": {
              "$ref": "#/components/schemas/UserRole",
              "default": "read_only"
            },
            "email_is_verified": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Email Is Verified"
            },
            "organization_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Organization Id"
            },
            "organization_name": {
              "type": "string",
              "title": "Organization Name"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            }
          },
          "type": "object",
          "required": [
            "id",
            "email",
            "organization_id",
            "organization_name",
            "created_at",
            "updated_at"
          ],
          "title": "UserDB"
        },
        "UserInfo": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "email": {
              "type": "string",
              "title": "Email"
            },
            "first_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "First Name"
            },
            "last_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Name"
            }
          },
          "type": "object",
          "required": [
            "id",
            "email"
          ],
          "title": "UserInfo",
          "description": "A user's basic information, used for display purposes."
        },
        "UserMetadataFilter": {
          "properties": {
            "name": {
              "type": "string",
              "const": "user_metadata",
              "title": "Name",
              "default": "user_metadata"
            },
            "operator": {
              "type": "string",
              "enum": [
                "one_of",
                "not_in",
                "eq",
                "ne"
              ],
              "title": "Operator"
            },
            "key": {
              "type": "string",
              "title": "Key"
            },
            "value": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ],
              "title": "Value"
            }
          },
          "type": "object",
          "required": [
            "operator",
            "key",
            "value"
          ],
          "title": "UserMetadataFilter"
        },
        "UserPasswordResetRequest": {
          "properties": {
            "email": {
              "type": "string",
              "title": "Email"
            },
            "password": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "password",
                  "writeOnly": true
                },
                {
                  "type": "null"
                }
              ],
              "title": "Password"
            },
            "email_is_verified": {
              "type": "boolean",
              "title": "Email Is Verified",
              "default": true
            }
          },
          "type": "object",
          "required": [
            "email"
          ],
          "title": "UserPasswordResetRequest"
        },
        "UserPasswordResetResponse": {
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "permissions": {
              "items": {
                "$ref": "#/components/schemas/Permission"
              },
              "type": "array",
              "title": "Permissions",
              "default": []
            },
            "email": {
              "type": "string",
              "title": "Email"
            },
            "first_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "First Name",
              "default": ""
            },
            "last_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Name",
              "default": ""
            },
            "auth_method": {
              "$ref": "#/components/schemas/AuthMethod",
              "default": "email"
            },
            "role": {
              "$ref": "#/components/schemas/UserRole",
              "default": "read_only"
            },
            "email_is_verified": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Email Is Verified"
            },
            "organization_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Organization Id"
            },
            "organization_name": {
              "type": "string",
              "title": "Organization Name"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "title": "Updated At"
            }
          },
          "type": "object",
          "required": [
            "id",
            "email",
            "organization_id",
            "organization_name",
            "created_at",
            "updated_at"
          ],
          "title": "UserPasswordResetResponse"
        },
        "UserRole": {
          "type": "string",
          "enum": [
            "admin",
            "manager",
            "user",
            "read_only"
          ],
          "title": "UserRole"
        },
        "UserRoleInfo": {
          "properties": {
            "name": {
              "$ref": "#/components/schemas/UserRole",
              "examples": [
                "admin"
              ]
            },
            "display_name": {
              "type": "string",
              "title": "Display Name",
              "examples": [
                "Admin"
              ]
            },
            "description": {
              "type": "string",
              "title": "Description",
              "examples": [
                "Full access"
              ]
            }
          },
          "type": "object",
          "required": [
            "name",
            "display_name",
            "description"
          ],
          "title": "UserRoleInfo"
        },
        "UserUpdate": {
          "properties": {
            "email": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Email"
            },
            "first_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "First Name"
            },
            "last_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Name"
            },
            "role": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/UserRole"
                },
                {
                  "type": "null"
                }
              ]
            },
            "email_is_verified": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Email Is Verified"
            }
          },
          "type": "object",
          "title": "UserUpdate"
        },
        "ValidationError": {
          "properties": {
            "loc": {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "type": "array",
              "title": "Location"
            },
            "msg": {
              "type": "string",
              "title": "Message"
            },
            "type": {
              "type": "string",
              "title": "Error Type"
            }
          },
          "type": "object",
          "required": [
            "loc",
            "msg",
            "type"
          ],
          "title": "ValidationError"
        },
        "ValidationRequest": {
          "properties": {
            "file_type": {
              "type": "string",
              "title": "File Type",
              "default": "csv"
            },
            "payload": {
              "type": "string",
              "title": "Payload"
            }
          },
          "type": "object",
          "required": [
            "payload"
          ],
          "title": "ValidationRequest"
        },
        "ValidationResponse": {
          "properties": {
            "upload_url": {
              "type": "string",
              "title": "Upload Url"
            },
            "filename": {
              "type": "string",
              "title": "Filename"
            }
          },
          "type": "object",
          "required": [
            "upload_url",
            "filename"
          ],
          "title": "ValidationResponse"
        },
        "ValuePromptFilterParam": {
          "properties": {
            "column": {
              "type": "string",
              "title": "Column"
            },
            "filter_type": {
              "type": "string",
              "const": "value",
              "title": "Filter Type"
            },
            "value": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ],
              "title": "Value"
            },
            "relation": {
              "$ref": "#/components/schemas/Operator"
            }
          },
          "type": "object",
          "required": [
            "column",
            "filter_type",
            "value",
            "relation"
          ],
          "title": "ValuePromptFilterParam"
        },
        "VertexAIIntegration": {
          "properties": {
            "id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "name": {
              "type": "string",
              "const": "vertex_ai",
              "title": "Name",
              "default": "vertex_ai"
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            }
          },
          "type": "object",
          "title": "VertexAIIntegration"
        },
        "VertexAIIntegrationCreate": {
          "properties": {
            "token": {
              "type": "string",
              "title": "Token"
            }
          },
          "type": "object",
          "required": [
            "token"
          ],
          "title": "VertexAIIntegrationCreate"
        },
        "Webhook": {
          "properties": {
            "url": {
              "type": "string",
              "maxLength": 2083,
              "minLength": 1,
              "format": "uri",
              "title": "Url"
            },
            "status": {
              "$ref": "#/components/schemas/WebhookStatus",
              "default": "untested"
            },
            "notes": {
              "type": "string",
              "maxLength": 255,
              "title": "Notes",
              "default": ""
            }
          },
          "type": "object",
          "required": [
            "url"
          ],
          "title": "Webhook"
        },
        "WebhookStatus": {
          "type": "string",
          "enum": [
            "active",
            "untested",
            "failed",
            "paused"
          ],
          "title": "WebhookStatus"
        },
        "WeeklyChangelog": {
          "properties": {
            "week_of": {
              "type": "string",
              "format": "date",
              "title": "Week Of"
            },
            "changes": {
              "additionalProperties": {
                "$ref": "#/components/schemas/Changes"
              },
              "type": "object",
              "title": "Changes"
            }
          },
          "type": "object",
          "required": [
            "week_of"
          ],
          "title": "WeeklyChangelog"
        },
        "WorkflowCountResponse": {
          "properties": {
            "count": {
              "type": "integer",
              "title": "Count"
            },
            "max_rows": {
              "type": "integer",
              "title": "Max Rows",
              "default": 512
            },
            "max_rows_exceeded": {
              "type": "boolean",
              "title": "Max Rows Exceeded",
              "default": false
            }
          },
          "type": "object",
          "required": [
            "count"
          ],
          "title": "WorkflowCountResponse"
        },
        "WorkflowSpan": {
          "properties": {
            "type": {
              "type": "string",
              "const": "workflow",
              "title": "Type",
              "description": "Type: must be `workflow`",
              "default": "workflow"
            },
            "input": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/galileo_core__schemas__logging__llm__Message-Input"
                  },
                  "type": "array"
                }
              ],
              "title": "Input",
              "description": "Input to the step."
            },
            "output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/galileo_core__schemas__logging__llm__Message-Input"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/Document-Input"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output",
              "description": "Output of the step."
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At",
              "description": "Timestamp of the step's creation"
            },
            "user_metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "User Metadata",
              "description": "Metadata associated with this step."
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Tags",
              "description": "Tags associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "metrics": {
              "$ref": "#/components/schemas/Metrics-Input",
              "description": "Metrics associated with this step."
            },
            "spans": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WorkflowSpan"
                  },
                  {
                    "$ref": "#/components/schemas/LlmSpan"
                  },
                  {
                    "$ref": "#/components/schemas/RetrieverSpan"
                  },
                  {
                    "$ref": "#/components/schemas/ToolSpan"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "llm": "#/components/schemas/LlmSpan",
                    "retriever": "#/components/schemas/RetrieverSpan",
                    "tool": "#/components/schemas/ToolSpan",
                    "workflow": "#/components/schemas/WorkflowSpan"
                  }
                }
              },
              "type": "array",
              "title": "Spans",
              "description": "Child spans."
            }
          },
          "type": "object",
          "required": [
            "input"
          ],
          "title": "WorkflowSpan"
        },
        "WorkflowSpanRecord": {
          "properties": {
            "type": {
              "type": "string",
              "const": "workflow",
              "title": "Type",
              "description": "Type: must be `workflow`",
              "default": "workflow"
            },
            "input": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/galileo_core__schemas__logging__llm__Message-Output"
                  },
                  "type": "array"
                }
              ],
              "title": "Input",
              "description": "Input to the step."
            },
            "output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/galileo_core__schemas__logging__llm__Message-Output"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/Document-Output"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output",
              "description": "Output of the step."
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At",
              "description": "Timestamp of the step's creation"
            },
            "user_metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "User Metadata",
              "description": "Metadata associated with this step."
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Tags",
              "description": "Tags associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "metrics": {
              "$ref": "#/components/schemas/galileo_core__schemas__logging__step__Metrics",
              "description": "Metrics associated with this step."
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "ID",
              "description": "Galileo ID of the trace or span"
            },
            "trace_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Trace ID",
              "description": "Galileo ID of the trace containing the span (or the same value as id for a trace)"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project ID",
              "description": "Galileo ID of the project associated with this trace or span"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run ID",
              "description": "Galileo ID of the run (log stream or experiment) associated with this trace or span"
            },
            "updated_at": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Updated At",
              "description": "Timestamp of the trace or span's last update"
            },
            "has_children": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Has Children",
              "description": "Whether or not this trace or span has child spans"
            },
            "metrics_batch_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metrics Batch Id",
              "description": "Galileo ID of the metrics batch associated with this trace or span"
            },
            "metric_info": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TransactionMetricInfo"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Detailed information about the metrics associated with this trace or span"
            },
            "parent_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Parent ID",
              "description": "Galileo ID of the parent of this span"
            }
          },
          "type": "object",
          "required": [
            "input",
            "id",
            "trace_id",
            "project_id",
            "run_id",
            "parent_id"
          ],
          "title": "WorkflowSpanRecord"
        },
        "WorkflowSpanRecordWithChildren": {
          "properties": {
            "spans": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WorkflowSpanRecordWithChildren"
                  },
                  {
                    "$ref": "#/components/schemas/LlmSpanRecord"
                  },
                  {
                    "$ref": "#/components/schemas/ToolSpanRecord"
                  },
                  {
                    "$ref": "#/components/schemas/RetrieverSpanRecord"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "llm": "#/components/schemas/LlmSpanRecord",
                    "retriever": "#/components/schemas/RetrieverSpanRecord",
                    "tool": "#/components/schemas/ToolSpanRecord",
                    "workflow": "#/components/schemas/WorkflowSpanRecordWithChildren"
                  }
                }
              },
              "type": "array",
              "title": "Spans"
            },
            "type": {
              "type": "string",
              "const": "workflow",
              "title": "Type",
              "description": "Type: must be `workflow`",
              "default": "workflow"
            },
            "input": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/galileo_core__schemas__logging__llm__Message-Output"
                  },
                  "type": "array"
                }
              ],
              "title": "Input",
              "description": "Input to the step."
            },
            "output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/galileo_core__schemas__logging__llm__Message-Output"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/Document-Output"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Output",
              "description": "Output of the step."
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "title": "Created At",
              "description": "Timestamp of the step's creation"
            },
            "user_metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "User Metadata",
              "description": "Metadata associated with this step."
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Tags",
              "description": "Tags associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "metrics": {
              "$ref": "#/components/schemas/galileo_core__schemas__logging__step__Metrics",
              "description": "Metrics associated with this step."
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "ID",
              "description": "Galileo ID of the trace or span"
            },
            "trace_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Trace ID",
              "description": "Galileo ID of the trace containing the span (or the same value as id for a trace)"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project ID",
              "description": "Galileo ID of the project associated with this trace or span"
            },
            "run_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Run ID",
              "description": "Galileo ID of the run (log stream or experiment) associated with this trace or span"
            },
            "updated_at": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Updated At",
              "description": "Timestamp of the trace or span's last update"
            },
            "has_children": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Has Children",
              "description": "Whether or not this trace or span has child spans"
            },
            "metrics_batch_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Metrics Batch Id",
              "description": "Galileo ID of the metrics batch associated with this trace or span"
            },
            "metric_info": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TransactionMetricInfo"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Detailed information about the metrics associated with this trace or span"
            },
            "parent_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Parent ID",
              "description": "Galileo ID of the parent of this span"
            }
          },
          "type": "object",
          "required": [
            "input",
            "id",
            "trace_id",
            "project_id",
            "run_id",
            "parent_id"
          ],
          "title": "WorkflowSpanRecordWithChildren"
        },
        "WorkflowStep": {
          "properties": {
            "type": {
              "type": "string",
              "const": "workflow",
              "title": "Type",
              "description": "Type of the step. By default, it is set to workflow.",
              "default": "workflow"
            },
            "input": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/Document-Input"
                },
                {
                  "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                },
                {
                  "type": "object"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/Document-Input"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                }
              ],
              "title": "Input",
              "description": "Input to the step."
            },
            "output": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/Document-Input"
                },
                {
                  "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                },
                {
                  "type": "object"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/Document-Input"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/components/schemas/galileo_core__schemas__shared__message__Message"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                }
              ],
              "title": "Output",
              "description": "Output of the step.",
              "default": ""
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the step.",
              "default": ""
            },
            "created_at_ns": {
              "type": "integer",
              "title": "Created At Ns",
              "description": "Timestamp of the step's creation, as nanoseconds since epoch."
            },
            "duration_ns": {
              "type": "integer",
              "title": "Duration Ns",
              "description": "Duration of the step in nanoseconds.",
              "default": 0
            },
            "metadata": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object",
              "title": "Metadata",
              "description": "Metadata associated with this step."
            },
            "status_code": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Code",
              "description": "Status code of the step. Used for logging failed/errored steps."
            },
            "ground_truth": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ground Truth",
              "description": "Ground truth expected output for the step."
            },
            "steps": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WorkflowStep"
                  },
                  {
                    "$ref": "#/components/schemas/ChainStep"
                  },
                  {
                    "$ref": "#/components/schemas/LlmStep"
                  },
                  {
                    "$ref": "#/components/schemas/RetrieverStep"
                  },
                  {
                    "$ref": "#/components/schemas/ToolStep"
                  },
                  {
                    "$ref": "#/components/schemas/AgentStep"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "agent": "#/components/schemas/AgentStep",
                    "chain": "#/components/schemas/ChainStep",
                    "llm": "#/components/schemas/LlmStep",
                    "retriever": "#/components/schemas/RetrieverStep",
                    "tool": "#/components/schemas/ToolStep",
                    "workflow": "#/components/schemas/WorkflowStep"
                  }
                }
              },
              "type": "array",
              "title": "Steps",
              "description": "Steps in the workflow."
            },
            "parent": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/StepWithChildren"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Parent node of the current node. For internal use only."
            }
          },
          "type": "object",
          "required": [
            "input"
          ],
          "title": "WorkflowStep"
        },
        "WorkflowsIngestRequest": {
          "properties": {
            "workflows": {
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WorkflowStep"
                  },
                  {
                    "$ref": "#/components/schemas/ChainStep"
                  },
                  {
                    "$ref": "#/components/schemas/LlmStep"
                  },
                  {
                    "$ref": "#/components/schemas/RetrieverStep"
                  },
                  {
                    "$ref": "#/components/schemas/ToolStep"
                  },
                  {
                    "$ref": "#/components/schemas/AgentStep"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "agent": "#/components/schemas/AgentStep",
                    "chain": "#/components/schemas/ChainStep",
                    "llm": "#/components/schemas/LlmStep",
                    "retriever": "#/components/schemas/RetrieverStep",
                    "tool": "#/components/schemas/ToolStep",
                    "workflow": "#/components/schemas/WorkflowStep"
                  }
                }
              },
              "type": "array",
              "minItems": 1,
              "title": "Workflows",
              "description": "List of workflows to log."
            },
            "project_id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id",
              "description": "Project ID for the Observe project."
            },
            "project_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Name",
              "description": "Project name for the Observe project."
            }
          },
          "type": "object",
          "required": [
            "workflows"
          ],
          "title": "WorkflowsIngestRequest",
          "examples": [
            {
              "project_name": "my-observe-project",
              "workflows": [
                {
                  "created_at_ns": 1.7416229974015805e+18,
                  "duration_ns": 0,
                  "input": "who is a smart LLM?",
                  "metadata": {
  
                  },
                  "name": "llm",
                  "output": "I am!",
                  "type": "llm"
                }
              ]
            },
            {
              "project_id": "00000000-0000-0000-0000-000000000000",
              "workflows": [
                {
                  "created_at_ns": 1.7416229974016965e+18,
                  "duration_ns": 0,
                  "input": "who is a smart LLM?",
                  "metadata": {
  
                  },
                  "name": "llm",
                  "output": "I am!",
                  "type": "llm"
                }
              ]
            }
          ]
        },
        "WorkflowsIngestResponse": {
          "properties": {
            "message": {
              "type": "string",
              "title": "Message"
            },
            "project_id": {
              "type": "string",
              "format": "uuid4",
              "title": "Project Id"
            },
            "project_name": {
              "type": "string",
              "title": "Project Name"
            },
            "workflows_count": {
              "type": "integer",
              "title": "Workflows Count"
            },
            "records_count": {
              "type": "integer",
              "title": "Records Count"
            }
          },
          "type": "object",
          "required": [
            "message",
            "project_id",
            "project_name",
            "workflows_count",
            "records_count"
          ],
          "title": "WorkflowsIngestResponse"
        },
        "WorkflowsReadResponse": {
          "properties": {
            "starting_token": {
              "type": "integer",
              "title": "Starting Token",
              "default": 0
            },
            "limit": {
              "type": "integer",
              "title": "Limit",
              "default": 100
            },
            "paginated": {
              "type": "boolean",
              "title": "Paginated",
              "default": false
            },
            "next_starting_token": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Next Starting Token"
            },
            "workflows": {
              "items": {
                "$ref": "#/components/schemas/BaseGalileoStep"
              },
              "type": "array",
              "title": "Workflows"
            }
          },
          "type": "object",
          "required": [
            "workflows"
          ],
          "title": "WorkflowsReadResponse",
          "description": "Response model for workflow evaluation results"
        },
        "WriterIntegration": {
          "properties": {
            "organization_id": {
              "type": "string",
              "title": "Organization Id"
            },
            "id": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid4"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            },
            "name": {
              "type": "string",
              "const": "writer",
              "title": "Name",
              "default": "writer"
            },
            "extra": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Extra"
            }
          },
          "type": "object",
          "required": [
            "organization_id"
          ],
          "title": "WriterIntegration"
        },
        "WriterIntegrationCreate": {
          "properties": {
            "organization_id": {
              "type": "string",
              "title": "Organization Id"
            },
            "token": {
              "type": "string",
              "title": "Token"
            }
          },
          "type": "object",
          "required": [
            "organization_id",
            "token"
          ],
          "title": "WriterIntegrationCreate"
        },
        "XRayCardDB": {
          "properties": {
            "xray_class": {
              "$ref": "#/components/schemas/XRayClass"
            },
            "message_fields": {
              "type": "object",
              "title": "Message Fields"
            },
            "logic": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FilterParams"
                },
                {
                  "type": "null"
                }
              ]
            },
            "score": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 1,
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "title": "Score"
            },
            "extra_filters": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ExtraAlertFilters"
                },
                {
                  "type": "null"
                }
              ]
            },
            "id": {
              "type": "string",
              "format": "uuid4",
              "title": "Id"
            },
            "dismissed": {
              "type": "boolean",
              "title": "Dismissed"
            },
            "xray_classname": {
              "type": "string",
              "title": "Xray Classname",
              "default": ""
            },
            "message": {
              "type": "string",
              "title": "Message",
              "default": ""
            },
            "suggestion": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Suggestion"
            },
            "importance": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AlertImportance"
                },
                {
                  "type": "null"
                }
              ]
            },
            "alert_id": {
              "type": "integer",
              "title": "Alert Id"
            },
            "pct_samples": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Pct Samples"
            }
          },
          "type": "object",
          "required": [
            "xray_class",
            "message_fields",
            "id",
            "dismissed",
            "alert_id"
          ],
          "title": "XRayCardDB"
        },
        "XRayClass": {
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53],
          "title": "XRayClass"
        },
        "api__schemas__content__prompt_row__Metrics": {
          "properties": {
            "hallucination": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Hallucination"
            },
            "bleu": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Bleu"
            },
            "rouge": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Rouge"
            },
            "pii": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Pii"
            },
            "toxicity": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Toxicity"
            },
            "factuality": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Factuality"
            },
            "groundedness": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Groundedness"
            },
            "instruction_adherence": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Instruction Adherence"
            },
            "latency": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Latency"
            },
            "context_relevance": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Context Relevance"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Metrics"
        },
        "api__schemas__metric_critique__RecomputeSettingsObserve": {
          "properties": {
            "mode": {
              "type": "string",
              "const": "observe_filters",
              "title": "Mode",
              "default": "observe_filters"
            },
            "filters": {
              "items": {
                "$ref": "#/components/schemas/QueryFilterV1"
              },
              "type": "array",
              "title": "Filters",
              "description": "The parsed filters that are used to recompute the metric critique."
            }
          },
          "type": "object",
          "title": "RecomputeSettingsObserve"
        },
        "galileo_core__schemas__logging__llm__Message-Input": {
          "properties": {
            "content": {
              "type": "string",
              "title": "Content"
            },
            "role": {
              "$ref": "#/components/schemas/galileo_core__schemas__logging__llm__MessageRole"
            },
            "tool_call_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tool Call Id"
            },
            "tool_calls": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/ToolCall"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tool Calls"
            }
          },
          "type": "object",
          "required": [
            "content",
            "role"
          ],
          "title": "Message"
        },
        "galileo_core__schemas__logging__llm__Message-Output": {
          "properties": {
            "content": {
              "type": "string",
              "title": "Content"
            },
            "role": {
              "$ref": "#/components/schemas/galileo_core__schemas__logging__llm__MessageRole"
            },
            "tool_call_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tool Call Id"
            },
            "tool_calls": {
              "anyOf": [
                {
                  "items": {
                    "$ref": "#/components/schemas/ToolCall"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tool Calls"
            }
          },
          "type": "object",
          "required": [
            "content",
            "role"
          ],
          "title": "Message"
        },
        "galileo_core__schemas__logging__llm__MessageRole": {
          "type": "string",
          "enum": [
            "agent",
            "assistant",
            "developer",
            "function",
            "system",
            "tool",
            "user"
          ],
          "title": "MessageRole"
        },
        "galileo_core__schemas__logging__step__Metrics": {
          "properties": {
            "duration_ns": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Duration Ns",
              "description": "Duration of the step in milliseconds."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Metrics"
        },
        "galileo_core__schemas__shared__message__Message": {
          "properties": {
            "content": {
              "type": "string",
              "title": "Content"
            },
            "role": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/galileo_core__schemas__shared__message_role__MessageRole"
                }
              ],
              "title": "Role"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "required": [
            "content",
            "role"
          ],
          "title": "Message"
        },
        "galileo_core__schemas__shared__message_role__MessageRole": {
          "type": "string",
          "enum": [
            "agent",
            "assistant",
            "function",
            "system",
            "tool",
            "user"
          ],
          "title": "MessageRole"
        },
        "promptgalileo__schemas__metric_critique__RecomputeSettingsObserve": {
          "properties": {
            "mode": {
              "type": "string",
              "const": "observe_filters",
              "title": "Mode",
              "default": "observe_filters"
            },
            "filters": {
              "items": {
  
              },
              "type": "array",
              "title": "Filters"
            }
          },
          "type": "object",
          "required": [
            "filters"
          ],
          "title": "RecomputeSettingsObserve"
        }
      },
      "securitySchemes": {
        "APIKeyHeader": {
          "type": "apiKey",
          "in": "header",
          "name": "Galileo-API-Key"
        },
        "OAuth2PasswordBearer": {
          "type": "oauth2",
          "flows": {
            "password": {
              "scopes": {
  
              },
              "tokenUrl": "https://api.dev.rungalileo.io/login"
            }
          }
        },
        "HTTPBasic": {
          "type": "http",
          "scheme": "basic"
        }
      }
    }
  }